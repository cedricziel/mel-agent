---
openapi: 3.0.3
info:
  title: MEL Agent API
  description: AI Agents SaaS platform API with visual workflow builder
  version: 1.0.0
  contact:
    name: MEL Agent Team
    url: https://github.com/cedricziel/mel-agent

servers:
  - url: http://localhost:8080
    description: Local development server
  - url: https://api.mel-agent.com
    description: Production server

paths:
  /api/health:
    get:
      summary: Health check endpoint
      operationId: getHealth
      tags:
        - System
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok

  /api/agents:
    get:
      summary: List all agents
      operationId: listAgents
      tags:
        - Agents
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of agents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentList'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create a new agent
      operationId: createAgent
      tags:
        - Agents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAgentRequest'
      responses:
        '201':
          description: Agent created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/agents/{id}:
    get:
      summary: Get agent by ID
      operationId: getAgent
      tags:
        - Agents
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Agent details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
        '404':
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update agent
      operationId: updateAgent
      tags:
        - Agents
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAgentRequest'
      responses:
        '200':
          description: Agent updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete agent
      operationId: deleteAgent
      tags:
        - Agents
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Agent deleted successfully
        '404':
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/workflows:
    get:
      summary: List all workflows
      operationId: listWorkflows
      tags:
        - Workflows
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of workflows
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowList'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create a new workflow
      operationId: createWorkflow
      tags:
        - Workflows
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkflowRequest'
      responses:
        '201':
          description: Workflow created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/workflows/{id}:
    get:
      summary: Get workflow by ID
      operationId: getWorkflow
      tags:
        - Workflows
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Workflow details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
        '404':
          description: Workflow not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update workflow
      operationId: updateWorkflow
      tags:
        - Workflows
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWorkflowRequest'
      responses:
        '200':
          description: Workflow updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Workflow not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete workflow
      operationId: deleteWorkflow
      tags:
        - Workflows
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Workflow deleted successfully
        '404':
          description: Workflow not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/workflows/{id}/execute:
    post:
      summary: Execute a workflow
      operationId: executeWorkflow
      tags:
        - Workflows
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                input:
                  type: object
                  additionalProperties: true
      responses:
        '200':
          description: Workflow execution started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowExecution'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Workflow not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/workflow-runs:
    get:
      summary: List workflow runs
      operationId: listWorkflowRuns
      tags:
        - WorkflowRuns
      parameters:
        - name: workflow_id
          in: query
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, running, completed, failed]
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of workflow runs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowRunList'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/workflow-runs/{id}:
    get:
      summary: Get workflow run details
      operationId: getWorkflowRun
      tags:
        - WorkflowRuns
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Workflow run details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowRun'
        '404':
          description: Workflow run not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/workflow-runs/{id}/steps:
    get:
      summary: Get workflow run steps
      operationId: getWorkflowRunSteps
      tags:
        - WorkflowRuns
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of workflow steps
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkflowStep'
        '404':
          description: Workflow run not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/node-types:
    get:
      summary: List available node types
      operationId: listNodeTypes
      tags:
        - NodeTypes
      parameters:
        - name: kind
          in: query
          description: Filter by node kind (can be comma-separated)
          schema:
            type: string
            example: model,memory,action,tool,trigger
      responses:
        '200':
          description: List of node types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NodeType'

  /api/connections:
    get:
      summary: List connections
      operationId: listConnections
      tags:
        - Connections
      responses:
        '200':
          description: List of connections
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Connection'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create a connection
      operationId: createConnection
      tags:
        - Connections
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConnectionRequest'
      responses:
        '201':
          description: Connection created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/connections/{id}:
    get:
      summary: Get connection by ID
      operationId: getConnection
      tags:
        - Connections
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Connection details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
        '404':
          description: Connection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update connection
      operationId: updateConnection
      tags:
        - Connections
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConnectionRequest'
      responses:
        '200':
          description: Connection updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Connection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete connection
      operationId: deleteConnection
      tags:
        - Connections
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Connection deleted
        '404':
          description: Connection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/triggers:
    get:
      summary: List triggers
      operationId: listTriggers
      tags:
        - Triggers
      responses:
        '200':
          description: List of triggers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Trigger'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create a trigger
      operationId: createTrigger
      tags:
        - Triggers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTriggerRequest'
      responses:
        '201':
          description: Trigger created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trigger'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/triggers/{id}:
    get:
      summary: Get trigger by ID
      operationId: getTrigger
      tags:
        - Triggers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Trigger details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trigger'
        '404':
          description: Trigger not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update trigger
      operationId: updateTrigger
      tags:
        - Triggers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTriggerRequest'
      responses:
        '200':
          description: Trigger updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trigger'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Trigger not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete trigger
      operationId: deleteTrigger
      tags:
        - Triggers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Trigger deleted
        '404':
          description: Trigger not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/workers:
    get:
      summary: List all workers
      operationId: listWorkers
      tags:
        - Workers
      responses:
        '200':
          description: List of workers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Worker'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Register a new worker
      operationId: registerWorker
      tags:
        - Workers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterWorkerRequest'
      responses:
        '201':
          description: Worker registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Worker'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/workers/{id}:
    delete:
      summary: Unregister a worker
      operationId: unregisterWorker
      tags:
        - Workers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Worker unregistered successfully
        '404':
          description: Worker not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/workers/{id}/heartbeat:
    put:
      summary: Update worker heartbeat
      operationId: updateWorkerHeartbeat
      tags:
        - Workers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Heartbeat updated successfully
        '404':
          description: Worker not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/workers/{id}/claim-work:
    post:
      summary: Claim work items
      operationId: claimWork
      tags:
        - Workers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxItems:
                  type: integer
                  minimum: 1
                  maximum: 100
      responses:
        '200':
          description: Work items claimed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkItem'

  /api/workers/{id}/complete-work/{itemId}:
    post:
      summary: Complete a work item
      operationId: completeWork
      tags:
        - Workers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: itemId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                result:
                  type: object
                  additionalProperties: true
                error:
                  type: string
      responses:
        '200':
          description: Work item completed

  /webhooks/{token}:
    post:
      summary: Webhook endpoint
      operationId: handleWebhook
      tags:
        - Webhooks
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: Webhook processed
        '404':
          description: Webhook not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Agent:
      type: object
      required:
        - id
        - name
        - created_at
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        definition:
          $ref: '#/components/schemas/WorkflowDefinition'
        created_at:
          type: string
          format: date-time

    CreateAgentRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
        definition:
          $ref: '#/components/schemas/WorkflowDefinition'

    UpdateAgentRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        definition:
          $ref: '#/components/schemas/WorkflowDefinition'

    AgentList:
      type: object
      properties:
        agents:
          type: array
          items:
            $ref: '#/components/schemas/Agent'
        total:
          type: integer
        page:
          type: integer
        limit:
          type: integer

    Workflow:
      type: object
      required:
        - id
        - name
        - created_at
        - updated_at
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        definition:
          $ref: '#/components/schemas/WorkflowDefinition'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateWorkflowRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
        definition:
          $ref: '#/components/schemas/WorkflowDefinition'

    UpdateWorkflowRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        definition:
          $ref: '#/components/schemas/WorkflowDefinition'

    WorkflowList:
      type: object
      properties:
        workflows:
          type: array
          items:
            $ref: '#/components/schemas/Workflow'
        total:
          type: integer
        page:
          type: integer
        limit:
          type: integer

    WorkflowDefinition:
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowNode'
        edges:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowEdge'

    WorkflowNode:
      type: object
      required:
        - id
        - name
        - type
        - config
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
        config:
          type: object
          additionalProperties: true

    WorkflowEdge:
      type: object
      required:
        - id
        - source
        - target
      properties:
        id:
          type: string
        source:
          type: string
        target:
          type: string
        sourceOutput:
          type: string
        targetInput:
          type: string

    WorkflowExecution:
      type: object
      properties:
        id:
          type: string
          format: uuid
        workflow_id:
          type: string
          format: uuid
        status:
          type: string
          enum: [pending, running, completed, failed]
        started_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
        result:
          type: object
          additionalProperties: true
        error:
          type: string

    WorkflowRun:
      type: object
      properties:
        id:
          type: string
          format: uuid
        workflow_id:
          type: string
          format: uuid
        status:
          type: string
          enum: [pending, running, completed, failed]
        started_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
        context:
          type: object
          additionalProperties: true
        error:
          type: string

    WorkflowRunList:
      type: object
      properties:
        runs:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowRun'
        total:
          type: integer
        page:
          type: integer
        limit:
          type: integer

    WorkflowStep:
      type: object
      properties:
        id:
          type: string
          format: uuid
        run_id:
          type: string
          format: uuid
        node_id:
          type: string
        status:
          type: string
          enum: [pending, running, completed, failed, skipped]
        started_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
        input:
          type: object
          additionalProperties: true
        output:
          type: object
          additionalProperties: true
        error:
          type: string

    NodeType:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        kinds:
          type: array
          items:
            type: string
            enum: [action, model, memory, tool, trigger]
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/NodeInput'
        outputs:
          type: array
          items:
            $ref: '#/components/schemas/NodeOutput'

    NodeInput:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        required:
          type: boolean
        description:
          type: string

    NodeOutput:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        description:
          type: string

    Connection:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        integration_id:
          type: string
          format: uuid
        name:
          type: string
        secret:
          type: object
          additionalProperties: true
        config:
          type: object
          additionalProperties: true
        usage_limit_month:
          type: integer
        is_default:
          type: boolean
        created_at:
          type: string
          format: date-time
        last_validated:
          type: string
          format: date-time
        status:
          type: string
          enum: [valid, invalid, expired]

    CreateConnectionRequest:
      type: object
      required:
        - name
        - integration_id
      properties:
        name:
          type: string
        integration_id:
          type: string
          format: uuid
        secret:
          type: object
          additionalProperties: true
        config:
          type: object
          additionalProperties: true
        usage_limit_month:
          type: integer
        is_default:
          type: boolean

    UpdateConnectionRequest:
      type: object
      properties:
        name:
          type: string
        secret:
          type: object
          additionalProperties: true
        config:
          type: object
          additionalProperties: true
        usage_limit_month:
          type: integer
        is_default:
          type: boolean
        status:
          type: string
          enum: [valid, invalid, expired]

    Trigger:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        type:
          type: string
          enum: [schedule, webhook]
        workflow_id:
          type: string
          format: uuid
        config:
          type: object
          additionalProperties: true
        enabled:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateTriggerRequest:
      type: object
      required:
        - name
        - type
        - workflow_id
      properties:
        name:
          type: string
        type:
          type: string
          enum: [schedule, webhook]
        workflow_id:
          type: string
          format: uuid
        config:
          type: object
          additionalProperties: true
        enabled:
          type: boolean
          default: true

    UpdateTriggerRequest:
      type: object
      properties:
        name:
          type: string
        config:
          type: object
          additionalProperties: true
        enabled:
          type: boolean

    Worker:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        status:
          type: string
          enum: [active, inactive]
        last_heartbeat:
          type: string
          format: date-time
        concurrency:
          type: integer
        registered_at:
          type: string
          format: date-time

    RegisterWorkerRequest:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        name:
          type: string
        concurrency:
          type: integer
          minimum: 1
          default: 5

    WorkItem:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        payload:
          type: object
          additionalProperties: true
        created_at:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        code:
          type: integer

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

security:
  - BearerAuth: []
  - ApiKeyAuth: []

tags:
  - name: System
    description: System health and status endpoints
  - name: Agents
    description: Agent management endpoints
  - name: Workflows
    description: Workflow management endpoints
  - name: WorkflowRuns
    description: Workflow execution management
  - name: NodeTypes
    description: Node type discovery endpoints
  - name: Connections
    description: Integration connection management
  - name: Triggers
    description: Workflow trigger management
  - name: Workers
    description: Worker management endpoints
  - name: Webhooks
    description: External webhook handlers
