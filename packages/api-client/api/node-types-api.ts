/* tslint:disable */
/* eslint-disable */
/**
 * MEL Agent API
 * AI Agents SaaS platform API with visual workflow builder
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { NodeParameterOptions } from '../models';
// @ts-ignore
import type { NodeType } from '../models';
/**
 * NodeTypesApi - axios parameter creator
 * @export
 */
export const NodeTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get dynamic options for node parameters
         * @param {string} type 
         * @param {string} parameter 
         * @param {string} [context] Context for dynamic option generation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNodeParameterOptions: async (type: string, parameter: string, context?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getNodeParameterOptions', 'type', type)
            // verify required parameter 'parameter' is not null or undefined
            assertParamExists('getNodeParameterOptions', 'parameter', parameter)
            const localVarPath = `/api/node-types/{type}/parameters/{parameter}/options`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"parameter"}}`, encodeURIComponent(String(parameter)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (context !== undefined) {
                localVarQueryParameter['context'] = context;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List available node types
         * @param {string} [kind] Filter by node kind (can be comma-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNodeTypes: async (kind?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/node-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (kind !== undefined) {
                localVarQueryParameter['kind'] = kind;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NodeTypesApi - functional programming interface
 * @export
 */
export const NodeTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NodeTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get dynamic options for node parameters
         * @param {string} type 
         * @param {string} parameter 
         * @param {string} [context] Context for dynamic option generation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNodeParameterOptions(type: string, parameter: string, context?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NodeParameterOptions>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNodeParameterOptions(type, parameter, context, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodeTypesApi.getNodeParameterOptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List available node types
         * @param {string} [kind] Filter by node kind (can be comma-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listNodeTypes(kind?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NodeType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listNodeTypes(kind, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodeTypesApi.listNodeTypes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NodeTypesApi - factory interface
 * @export
 */
export const NodeTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NodeTypesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get dynamic options for node parameters
         * @param {string} type 
         * @param {string} parameter 
         * @param {string} [context] Context for dynamic option generation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNodeParameterOptions(type: string, parameter: string, context?: string, options?: RawAxiosRequestConfig): AxiosPromise<NodeParameterOptions> {
            return localVarFp.getNodeParameterOptions(type, parameter, context, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List available node types
         * @param {string} [kind] Filter by node kind (can be comma-separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNodeTypes(kind?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<NodeType>> {
            return localVarFp.listNodeTypes(kind, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NodeTypesApi - object-oriented interface
 * @export
 * @class NodeTypesApi
 * @extends {BaseAPI}
 */
export class NodeTypesApi extends BaseAPI {
    /**
     * 
     * @summary Get dynamic options for node parameters
     * @param {string} type 
     * @param {string} parameter 
     * @param {string} [context] Context for dynamic option generation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeTypesApi
     */
    public getNodeParameterOptions(type: string, parameter: string, context?: string, options?: RawAxiosRequestConfig) {
        return NodeTypesApiFp(this.configuration).getNodeParameterOptions(type, parameter, context, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List available node types
     * @param {string} [kind] Filter by node kind (can be comma-separated)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeTypesApi
     */
    public listNodeTypes(kind?: string, options?: RawAxiosRequestConfig) {
        return NodeTypesApiFp(this.configuration).listNodeTypes(kind, options).then((request) => request(this.axios, this.basePath));
    }
}

