/* tslint:disable */
/* eslint-disable */
/**
 * MEL Agent API
 * AI Agents SaaS platform API with visual workflow builder
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateWorkflowEdgeRequest } from '../models';
// @ts-ignore
import type { CreateWorkflowNodeRequest } from '../models';
// @ts-ignore
import type { CreateWorkflowRequest } from '../models';
// @ts-ignore
import type { CreateWorkflowVersionRequest } from '../models';
// @ts-ignore
import type { ExecuteWorkflowRequest } from '../models';
// @ts-ignore
import type { NodeTestResult } from '../models';
// @ts-ignore
import type { UpdateWorkflowDraftRequest } from '../models';
// @ts-ignore
import type { UpdateWorkflowNodeRequest } from '../models';
// @ts-ignore
import type { UpdateWorkflowRequest } from '../models';
// @ts-ignore
import type { Workflow } from '../models';
// @ts-ignore
import type { WorkflowDraft } from '../models';
// @ts-ignore
import type { WorkflowEdge } from '../models';
// @ts-ignore
import type { WorkflowExecution } from '../models';
// @ts-ignore
import type { WorkflowLayoutResult } from '../models';
// @ts-ignore
import type { WorkflowList } from '../models';
// @ts-ignore
import type { WorkflowNode } from '../models';
// @ts-ignore
import type { WorkflowVersion } from '../models';
// @ts-ignore
import type { WorkflowVersionList } from '../models';
/**
 * WorkflowsApi - axios parameter creator
 * @export
 */
export const WorkflowsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Auto-layout workflow nodes
         * @param {string} workflowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autoLayoutWorkflow: async (workflowId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('autoLayoutWorkflow', 'workflowId', workflowId)
            const localVarPath = `/api/workflows/{workflowId}/layout`
                .replace(`{${"workflowId"}}`, encodeURIComponent(String(workflowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new workflow
         * @param {CreateWorkflowRequest} createWorkflowRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkflow: async (createWorkflowRequest: CreateWorkflowRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createWorkflowRequest' is not null or undefined
            assertParamExists('createWorkflow', 'createWorkflowRequest', createWorkflowRequest)
            const localVarPath = `/api/workflows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createWorkflowRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new edge in workflow
         * @param {string} workflowId 
         * @param {CreateWorkflowEdgeRequest} createWorkflowEdgeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkflowEdge: async (workflowId: string, createWorkflowEdgeRequest: CreateWorkflowEdgeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('createWorkflowEdge', 'workflowId', workflowId)
            // verify required parameter 'createWorkflowEdgeRequest' is not null or undefined
            assertParamExists('createWorkflowEdge', 'createWorkflowEdgeRequest', createWorkflowEdgeRequest)
            const localVarPath = `/api/workflows/{workflowId}/edges`
                .replace(`{${"workflowId"}}`, encodeURIComponent(String(workflowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createWorkflowEdgeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new node in workflow
         * @param {string} workflowId 
         * @param {CreateWorkflowNodeRequest} createWorkflowNodeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkflowNode: async (workflowId: string, createWorkflowNodeRequest: CreateWorkflowNodeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('createWorkflowNode', 'workflowId', workflowId)
            // verify required parameter 'createWorkflowNodeRequest' is not null or undefined
            assertParamExists('createWorkflowNode', 'createWorkflowNodeRequest', createWorkflowNodeRequest)
            const localVarPath = `/api/workflows/{workflowId}/nodes`
                .replace(`{${"workflowId"}}`, encodeURIComponent(String(workflowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createWorkflowNodeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new workflow version
         * @param {string} workflowId 
         * @param {CreateWorkflowVersionRequest} createWorkflowVersionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkflowVersion: async (workflowId: string, createWorkflowVersionRequest: CreateWorkflowVersionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('createWorkflowVersion', 'workflowId', workflowId)
            // verify required parameter 'createWorkflowVersionRequest' is not null or undefined
            assertParamExists('createWorkflowVersion', 'createWorkflowVersionRequest', createWorkflowVersionRequest)
            const localVarPath = `/api/workflows/{workflowId}/versions`
                .replace(`{${"workflowId"}}`, encodeURIComponent(String(workflowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createWorkflowVersionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete workflow
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkflow: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteWorkflow', 'id', id)
            const localVarPath = `/api/workflows/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete workflow edge
         * @param {string} workflowId 
         * @param {string} edgeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkflowEdge: async (workflowId: string, edgeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('deleteWorkflowEdge', 'workflowId', workflowId)
            // verify required parameter 'edgeId' is not null or undefined
            assertParamExists('deleteWorkflowEdge', 'edgeId', edgeId)
            const localVarPath = `/api/workflows/{workflowId}/edges/{edgeId}`
                .replace(`{${"workflowId"}}`, encodeURIComponent(String(workflowId)))
                .replace(`{${"edgeId"}}`, encodeURIComponent(String(edgeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete workflow node
         * @param {string} workflowId 
         * @param {string} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkflowNode: async (workflowId: string, nodeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('deleteWorkflowNode', 'workflowId', workflowId)
            // verify required parameter 'nodeId' is not null or undefined
            assertParamExists('deleteWorkflowNode', 'nodeId', nodeId)
            const localVarPath = `/api/workflows/{workflowId}/nodes/{nodeId}`
                .replace(`{${"workflowId"}}`, encodeURIComponent(String(workflowId)))
                .replace(`{${"nodeId"}}`, encodeURIComponent(String(nodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deploy a specific workflow version
         * @param {string} workflowId 
         * @param {number} versionNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployWorkflowVersion: async (workflowId: string, versionNumber: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('deployWorkflowVersion', 'workflowId', workflowId)
            // verify required parameter 'versionNumber' is not null or undefined
            assertParamExists('deployWorkflowVersion', 'versionNumber', versionNumber)
            const localVarPath = `/api/workflows/{workflowId}/versions/{versionNumber}/deploy`
                .replace(`{${"workflowId"}}`, encodeURIComponent(String(workflowId)))
                .replace(`{${"versionNumber"}}`, encodeURIComponent(String(versionNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Execute a workflow
         * @param {string} id 
         * @param {ExecuteWorkflowRequest} [executeWorkflowRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeWorkflow: async (id: string, executeWorkflowRequest?: ExecuteWorkflowRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('executeWorkflow', 'id', id)
            const localVarPath = `/api/workflows/{id}/execute`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(executeWorkflowRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get latest version of a workflow
         * @param {string} workflowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestWorkflowVersion: async (workflowId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('getLatestWorkflowVersion', 'workflowId', workflowId)
            const localVarPath = `/api/workflows/{workflowId}/versions/latest`
                .replace(`{${"workflowId"}}`, encodeURIComponent(String(workflowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get workflow by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflow: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getWorkflow', 'id', id)
            const localVarPath = `/api/workflows/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get current draft for a workflow
         * @param {string} workflowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowDraft: async (workflowId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('getWorkflowDraft', 'workflowId', workflowId)
            const localVarPath = `/api/workflows/{workflowId}/draft`
                .replace(`{${"workflowId"}}`, encodeURIComponent(String(workflowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get specific workflow node
         * @param {string} workflowId 
         * @param {string} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowNode: async (workflowId: string, nodeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('getWorkflowNode', 'workflowId', workflowId)
            // verify required parameter 'nodeId' is not null or undefined
            assertParamExists('getWorkflowNode', 'nodeId', nodeId)
            const localVarPath = `/api/workflows/{workflowId}/nodes/{nodeId}`
                .replace(`{${"workflowId"}}`, encodeURIComponent(String(workflowId)))
                .replace(`{${"nodeId"}}`, encodeURIComponent(String(nodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all edges in a workflow
         * @param {string} workflowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkflowEdges: async (workflowId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('listWorkflowEdges', 'workflowId', workflowId)
            const localVarPath = `/api/workflows/{workflowId}/edges`
                .replace(`{${"workflowId"}}`, encodeURIComponent(String(workflowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all nodes in a workflow
         * @param {string} workflowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkflowNodes: async (workflowId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('listWorkflowNodes', 'workflowId', workflowId)
            const localVarPath = `/api/workflows/{workflowId}/nodes`
                .replace(`{${"workflowId"}}`, encodeURIComponent(String(workflowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all versions of a workflow
         * @param {string} workflowId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkflowVersions: async (workflowId: string, page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('listWorkflowVersions', 'workflowId', workflowId)
            const localVarPath = `/api/workflows/{workflowId}/versions`
                .replace(`{${"workflowId"}}`, encodeURIComponent(String(workflowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all workflows
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkflows: async (page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/workflows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Test a single node in draft context
         * @param {string} workflowId 
         * @param {string} nodeId 
         * @param {ExecuteWorkflowRequest} executeWorkflowRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testWorkflowDraftNode: async (workflowId: string, nodeId: string, executeWorkflowRequest: ExecuteWorkflowRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('testWorkflowDraftNode', 'workflowId', workflowId)
            // verify required parameter 'nodeId' is not null or undefined
            assertParamExists('testWorkflowDraftNode', 'nodeId', nodeId)
            // verify required parameter 'executeWorkflowRequest' is not null or undefined
            assertParamExists('testWorkflowDraftNode', 'executeWorkflowRequest', executeWorkflowRequest)
            const localVarPath = `/api/workflows/{workflowId}/draft/nodes/{nodeId}/test`
                .replace(`{${"workflowId"}}`, encodeURIComponent(String(workflowId)))
                .replace(`{${"nodeId"}}`, encodeURIComponent(String(nodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(executeWorkflowRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update workflow
         * @param {string} id 
         * @param {UpdateWorkflowRequest} updateWorkflowRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkflow: async (id: string, updateWorkflowRequest: UpdateWorkflowRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateWorkflow', 'id', id)
            // verify required parameter 'updateWorkflowRequest' is not null or undefined
            assertParamExists('updateWorkflow', 'updateWorkflowRequest', updateWorkflowRequest)
            const localVarPath = `/api/workflows/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateWorkflowRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update workflow draft with auto-persistence
         * @param {string} workflowId 
         * @param {UpdateWorkflowDraftRequest} updateWorkflowDraftRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkflowDraft: async (workflowId: string, updateWorkflowDraftRequest: UpdateWorkflowDraftRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('updateWorkflowDraft', 'workflowId', workflowId)
            // verify required parameter 'updateWorkflowDraftRequest' is not null or undefined
            assertParamExists('updateWorkflowDraft', 'updateWorkflowDraftRequest', updateWorkflowDraftRequest)
            const localVarPath = `/api/workflows/{workflowId}/draft`
                .replace(`{${"workflowId"}}`, encodeURIComponent(String(workflowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateWorkflowDraftRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update workflow node
         * @param {string} workflowId 
         * @param {string} nodeId 
         * @param {UpdateWorkflowNodeRequest} updateWorkflowNodeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkflowNode: async (workflowId: string, nodeId: string, updateWorkflowNodeRequest: UpdateWorkflowNodeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('updateWorkflowNode', 'workflowId', workflowId)
            // verify required parameter 'nodeId' is not null or undefined
            assertParamExists('updateWorkflowNode', 'nodeId', nodeId)
            // verify required parameter 'updateWorkflowNodeRequest' is not null or undefined
            assertParamExists('updateWorkflowNode', 'updateWorkflowNodeRequest', updateWorkflowNodeRequest)
            const localVarPath = `/api/workflows/{workflowId}/nodes/{nodeId}`
                .replace(`{${"workflowId"}}`, encodeURIComponent(String(workflowId)))
                .replace(`{${"nodeId"}}`, encodeURIComponent(String(nodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateWorkflowNodeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkflowsApi - functional programming interface
 * @export
 */
export const WorkflowsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkflowsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Auto-layout workflow nodes
         * @param {string} workflowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async autoLayoutWorkflow(workflowId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowLayoutResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.autoLayoutWorkflow(workflowId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowsApi.autoLayoutWorkflow']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new workflow
         * @param {CreateWorkflowRequest} createWorkflowRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWorkflow(createWorkflowRequest: CreateWorkflowRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workflow>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorkflow(createWorkflowRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowsApi.createWorkflow']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new edge in workflow
         * @param {string} workflowId 
         * @param {CreateWorkflowEdgeRequest} createWorkflowEdgeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWorkflowEdge(workflowId: string, createWorkflowEdgeRequest: CreateWorkflowEdgeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowEdge>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorkflowEdge(workflowId, createWorkflowEdgeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowsApi.createWorkflowEdge']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new node in workflow
         * @param {string} workflowId 
         * @param {CreateWorkflowNodeRequest} createWorkflowNodeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWorkflowNode(workflowId: string, createWorkflowNodeRequest: CreateWorkflowNodeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowNode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorkflowNode(workflowId, createWorkflowNodeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowsApi.createWorkflowNode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new workflow version
         * @param {string} workflowId 
         * @param {CreateWorkflowVersionRequest} createWorkflowVersionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWorkflowVersion(workflowId: string, createWorkflowVersionRequest: CreateWorkflowVersionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowVersion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorkflowVersion(workflowId, createWorkflowVersionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowsApi.createWorkflowVersion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete workflow
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWorkflow(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWorkflow(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowsApi.deleteWorkflow']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete workflow edge
         * @param {string} workflowId 
         * @param {string} edgeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWorkflowEdge(workflowId: string, edgeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWorkflowEdge(workflowId, edgeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowsApi.deleteWorkflowEdge']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete workflow node
         * @param {string} workflowId 
         * @param {string} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWorkflowNode(workflowId: string, nodeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWorkflowNode(workflowId, nodeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowsApi.deleteWorkflowNode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Deploy a specific workflow version
         * @param {string} workflowId 
         * @param {number} versionNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deployWorkflowVersion(workflowId: string, versionNumber: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowVersion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deployWorkflowVersion(workflowId, versionNumber, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowsApi.deployWorkflowVersion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Execute a workflow
         * @param {string} id 
         * @param {ExecuteWorkflowRequest} [executeWorkflowRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeWorkflow(id: string, executeWorkflowRequest?: ExecuteWorkflowRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowExecution>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.executeWorkflow(id, executeWorkflowRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowsApi.executeWorkflow']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get latest version of a workflow
         * @param {string} workflowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestWorkflowVersion(workflowId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowVersion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLatestWorkflowVersion(workflowId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowsApi.getLatestWorkflowVersion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get workflow by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkflow(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workflow>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkflow(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowsApi.getWorkflow']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get current draft for a workflow
         * @param {string} workflowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkflowDraft(workflowId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowDraft>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkflowDraft(workflowId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowsApi.getWorkflowDraft']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get specific workflow node
         * @param {string} workflowId 
         * @param {string} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkflowNode(workflowId: string, nodeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowNode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkflowNode(workflowId, nodeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowsApi.getWorkflowNode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all edges in a workflow
         * @param {string} workflowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listWorkflowEdges(workflowId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkflowEdge>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listWorkflowEdges(workflowId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowsApi.listWorkflowEdges']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all nodes in a workflow
         * @param {string} workflowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listWorkflowNodes(workflowId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkflowNode>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listWorkflowNodes(workflowId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowsApi.listWorkflowNodes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all versions of a workflow
         * @param {string} workflowId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listWorkflowVersions(workflowId: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowVersionList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listWorkflowVersions(workflowId, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowsApi.listWorkflowVersions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all workflows
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listWorkflows(page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listWorkflows(page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowsApi.listWorkflows']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Test a single node in draft context
         * @param {string} workflowId 
         * @param {string} nodeId 
         * @param {ExecuteWorkflowRequest} executeWorkflowRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testWorkflowDraftNode(workflowId: string, nodeId: string, executeWorkflowRequest: ExecuteWorkflowRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NodeTestResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testWorkflowDraftNode(workflowId, nodeId, executeWorkflowRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowsApi.testWorkflowDraftNode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update workflow
         * @param {string} id 
         * @param {UpdateWorkflowRequest} updateWorkflowRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWorkflow(id: string, updateWorkflowRequest: UpdateWorkflowRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workflow>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWorkflow(id, updateWorkflowRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowsApi.updateWorkflow']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update workflow draft with auto-persistence
         * @param {string} workflowId 
         * @param {UpdateWorkflowDraftRequest} updateWorkflowDraftRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWorkflowDraft(workflowId: string, updateWorkflowDraftRequest: UpdateWorkflowDraftRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowDraft>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWorkflowDraft(workflowId, updateWorkflowDraftRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowsApi.updateWorkflowDraft']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update workflow node
         * @param {string} workflowId 
         * @param {string} nodeId 
         * @param {UpdateWorkflowNodeRequest} updateWorkflowNodeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWorkflowNode(workflowId: string, nodeId: string, updateWorkflowNodeRequest: UpdateWorkflowNodeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowNode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWorkflowNode(workflowId, nodeId, updateWorkflowNodeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowsApi.updateWorkflowNode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WorkflowsApi - factory interface
 * @export
 */
export const WorkflowsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkflowsApiFp(configuration)
    return {
        /**
         * 
         * @summary Auto-layout workflow nodes
         * @param {string} workflowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autoLayoutWorkflow(workflowId: string, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowLayoutResult> {
            return localVarFp.autoLayoutWorkflow(workflowId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new workflow
         * @param {CreateWorkflowRequest} createWorkflowRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkflow(createWorkflowRequest: CreateWorkflowRequest, options?: RawAxiosRequestConfig): AxiosPromise<Workflow> {
            return localVarFp.createWorkflow(createWorkflowRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new edge in workflow
         * @param {string} workflowId 
         * @param {CreateWorkflowEdgeRequest} createWorkflowEdgeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkflowEdge(workflowId: string, createWorkflowEdgeRequest: CreateWorkflowEdgeRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowEdge> {
            return localVarFp.createWorkflowEdge(workflowId, createWorkflowEdgeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new node in workflow
         * @param {string} workflowId 
         * @param {CreateWorkflowNodeRequest} createWorkflowNodeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkflowNode(workflowId: string, createWorkflowNodeRequest: CreateWorkflowNodeRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowNode> {
            return localVarFp.createWorkflowNode(workflowId, createWorkflowNodeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new workflow version
         * @param {string} workflowId 
         * @param {CreateWorkflowVersionRequest} createWorkflowVersionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkflowVersion(workflowId: string, createWorkflowVersionRequest: CreateWorkflowVersionRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowVersion> {
            return localVarFp.createWorkflowVersion(workflowId, createWorkflowVersionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete workflow
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkflow(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteWorkflow(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete workflow edge
         * @param {string} workflowId 
         * @param {string} edgeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkflowEdge(workflowId: string, edgeId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteWorkflowEdge(workflowId, edgeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete workflow node
         * @param {string} workflowId 
         * @param {string} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkflowNode(workflowId: string, nodeId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteWorkflowNode(workflowId, nodeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deploy a specific workflow version
         * @param {string} workflowId 
         * @param {number} versionNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployWorkflowVersion(workflowId: string, versionNumber: number, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowVersion> {
            return localVarFp.deployWorkflowVersion(workflowId, versionNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Execute a workflow
         * @param {string} id 
         * @param {ExecuteWorkflowRequest} [executeWorkflowRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeWorkflow(id: string, executeWorkflowRequest?: ExecuteWorkflowRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowExecution> {
            return localVarFp.executeWorkflow(id, executeWorkflowRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get latest version of a workflow
         * @param {string} workflowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestWorkflowVersion(workflowId: string, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowVersion> {
            return localVarFp.getLatestWorkflowVersion(workflowId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get workflow by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflow(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Workflow> {
            return localVarFp.getWorkflow(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get current draft for a workflow
         * @param {string} workflowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowDraft(workflowId: string, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowDraft> {
            return localVarFp.getWorkflowDraft(workflowId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get specific workflow node
         * @param {string} workflowId 
         * @param {string} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowNode(workflowId: string, nodeId: string, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowNode> {
            return localVarFp.getWorkflowNode(workflowId, nodeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all edges in a workflow
         * @param {string} workflowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkflowEdges(workflowId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<WorkflowEdge>> {
            return localVarFp.listWorkflowEdges(workflowId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all nodes in a workflow
         * @param {string} workflowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkflowNodes(workflowId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<WorkflowNode>> {
            return localVarFp.listWorkflowNodes(workflowId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all versions of a workflow
         * @param {string} workflowId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkflowVersions(workflowId: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowVersionList> {
            return localVarFp.listWorkflowVersions(workflowId, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all workflows
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkflows(page?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowList> {
            return localVarFp.listWorkflows(page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Test a single node in draft context
         * @param {string} workflowId 
         * @param {string} nodeId 
         * @param {ExecuteWorkflowRequest} executeWorkflowRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testWorkflowDraftNode(workflowId: string, nodeId: string, executeWorkflowRequest: ExecuteWorkflowRequest, options?: RawAxiosRequestConfig): AxiosPromise<NodeTestResult> {
            return localVarFp.testWorkflowDraftNode(workflowId, nodeId, executeWorkflowRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update workflow
         * @param {string} id 
         * @param {UpdateWorkflowRequest} updateWorkflowRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkflow(id: string, updateWorkflowRequest: UpdateWorkflowRequest, options?: RawAxiosRequestConfig): AxiosPromise<Workflow> {
            return localVarFp.updateWorkflow(id, updateWorkflowRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update workflow draft with auto-persistence
         * @param {string} workflowId 
         * @param {UpdateWorkflowDraftRequest} updateWorkflowDraftRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkflowDraft(workflowId: string, updateWorkflowDraftRequest: UpdateWorkflowDraftRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowDraft> {
            return localVarFp.updateWorkflowDraft(workflowId, updateWorkflowDraftRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update workflow node
         * @param {string} workflowId 
         * @param {string} nodeId 
         * @param {UpdateWorkflowNodeRequest} updateWorkflowNodeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkflowNode(workflowId: string, nodeId: string, updateWorkflowNodeRequest: UpdateWorkflowNodeRequest, options?: RawAxiosRequestConfig): AxiosPromise<WorkflowNode> {
            return localVarFp.updateWorkflowNode(workflowId, nodeId, updateWorkflowNodeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkflowsApi - object-oriented interface
 * @export
 * @class WorkflowsApi
 * @extends {BaseAPI}
 */
export class WorkflowsApi extends BaseAPI {
    /**
     * 
     * @summary Auto-layout workflow nodes
     * @param {string} workflowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    public autoLayoutWorkflow(workflowId: string, options?: RawAxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).autoLayoutWorkflow(workflowId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new workflow
     * @param {CreateWorkflowRequest} createWorkflowRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    public createWorkflow(createWorkflowRequest: CreateWorkflowRequest, options?: RawAxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).createWorkflow(createWorkflowRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new edge in workflow
     * @param {string} workflowId 
     * @param {CreateWorkflowEdgeRequest} createWorkflowEdgeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    public createWorkflowEdge(workflowId: string, createWorkflowEdgeRequest: CreateWorkflowEdgeRequest, options?: RawAxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).createWorkflowEdge(workflowId, createWorkflowEdgeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new node in workflow
     * @param {string} workflowId 
     * @param {CreateWorkflowNodeRequest} createWorkflowNodeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    public createWorkflowNode(workflowId: string, createWorkflowNodeRequest: CreateWorkflowNodeRequest, options?: RawAxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).createWorkflowNode(workflowId, createWorkflowNodeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new workflow version
     * @param {string} workflowId 
     * @param {CreateWorkflowVersionRequest} createWorkflowVersionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    public createWorkflowVersion(workflowId: string, createWorkflowVersionRequest: CreateWorkflowVersionRequest, options?: RawAxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).createWorkflowVersion(workflowId, createWorkflowVersionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete workflow
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    public deleteWorkflow(id: string, options?: RawAxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).deleteWorkflow(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete workflow edge
     * @param {string} workflowId 
     * @param {string} edgeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    public deleteWorkflowEdge(workflowId: string, edgeId: string, options?: RawAxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).deleteWorkflowEdge(workflowId, edgeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete workflow node
     * @param {string} workflowId 
     * @param {string} nodeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    public deleteWorkflowNode(workflowId: string, nodeId: string, options?: RawAxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).deleteWorkflowNode(workflowId, nodeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deploy a specific workflow version
     * @param {string} workflowId 
     * @param {number} versionNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    public deployWorkflowVersion(workflowId: string, versionNumber: number, options?: RawAxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).deployWorkflowVersion(workflowId, versionNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Execute a workflow
     * @param {string} id 
     * @param {ExecuteWorkflowRequest} [executeWorkflowRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    public executeWorkflow(id: string, executeWorkflowRequest?: ExecuteWorkflowRequest, options?: RawAxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).executeWorkflow(id, executeWorkflowRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get latest version of a workflow
     * @param {string} workflowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    public getLatestWorkflowVersion(workflowId: string, options?: RawAxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).getLatestWorkflowVersion(workflowId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get workflow by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    public getWorkflow(id: string, options?: RawAxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).getWorkflow(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get current draft for a workflow
     * @param {string} workflowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    public getWorkflowDraft(workflowId: string, options?: RawAxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).getWorkflowDraft(workflowId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get specific workflow node
     * @param {string} workflowId 
     * @param {string} nodeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    public getWorkflowNode(workflowId: string, nodeId: string, options?: RawAxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).getWorkflowNode(workflowId, nodeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all edges in a workflow
     * @param {string} workflowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    public listWorkflowEdges(workflowId: string, options?: RawAxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).listWorkflowEdges(workflowId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all nodes in a workflow
     * @param {string} workflowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    public listWorkflowNodes(workflowId: string, options?: RawAxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).listWorkflowNodes(workflowId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all versions of a workflow
     * @param {string} workflowId 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    public listWorkflowVersions(workflowId: string, page?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).listWorkflowVersions(workflowId, page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all workflows
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    public listWorkflows(page?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).listWorkflows(page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Test a single node in draft context
     * @param {string} workflowId 
     * @param {string} nodeId 
     * @param {ExecuteWorkflowRequest} executeWorkflowRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    public testWorkflowDraftNode(workflowId: string, nodeId: string, executeWorkflowRequest: ExecuteWorkflowRequest, options?: RawAxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).testWorkflowDraftNode(workflowId, nodeId, executeWorkflowRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update workflow
     * @param {string} id 
     * @param {UpdateWorkflowRequest} updateWorkflowRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    public updateWorkflow(id: string, updateWorkflowRequest: UpdateWorkflowRequest, options?: RawAxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).updateWorkflow(id, updateWorkflowRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update workflow draft with auto-persistence
     * @param {string} workflowId 
     * @param {UpdateWorkflowDraftRequest} updateWorkflowDraftRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    public updateWorkflowDraft(workflowId: string, updateWorkflowDraftRequest: UpdateWorkflowDraftRequest, options?: RawAxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).updateWorkflowDraft(workflowId, updateWorkflowDraftRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update workflow node
     * @param {string} workflowId 
     * @param {string} nodeId 
     * @param {UpdateWorkflowNodeRequest} updateWorkflowNodeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    public updateWorkflowNode(workflowId: string, nodeId: string, updateWorkflowNodeRequest: UpdateWorkflowNodeRequest, options?: RawAxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).updateWorkflowNode(workflowId, nodeId, updateWorkflowNodeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

