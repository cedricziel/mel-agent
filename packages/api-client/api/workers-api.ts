/* tslint:disable */
/* eslint-disable */
/**
 * MEL Agent API
 * AI Agents SaaS platform API with visual workflow builder
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ClaimWorkRequest } from '../models';
// @ts-ignore
import type { CompleteWorkRequest } from '../models';
// @ts-ignore
import type { RegisterWorkerRequest } from '../models';
// @ts-ignore
import type { WorkItem } from '../models';
// @ts-ignore
import type { Worker } from '../models';
/**
 * WorkersApi - axios parameter creator
 * @export
 */
export const WorkersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Claim work items
         * @param {string} id 
         * @param {ClaimWorkRequest} claimWorkRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        claimWork: async (id: string, claimWorkRequest: ClaimWorkRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('claimWork', 'id', id)
            // verify required parameter 'claimWorkRequest' is not null or undefined
            assertParamExists('claimWork', 'claimWorkRequest', claimWorkRequest)
            const localVarPath = `/api/workers/{id}/claim-work`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(claimWorkRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Complete a work item
         * @param {string} id 
         * @param {string} itemId 
         * @param {CompleteWorkRequest} completeWorkRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeWork: async (id: string, itemId: string, completeWorkRequest: CompleteWorkRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('completeWork', 'id', id)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('completeWork', 'itemId', itemId)
            // verify required parameter 'completeWorkRequest' is not null or undefined
            assertParamExists('completeWork', 'completeWorkRequest', completeWorkRequest)
            const localVarPath = `/api/workers/{id}/complete-work/{itemId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(completeWorkRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all workers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/workers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register a new worker
         * @param {RegisterWorkerRequest} registerWorkerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerWorker: async (registerWorkerRequest: RegisterWorkerRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerWorkerRequest' is not null or undefined
            assertParamExists('registerWorker', 'registerWorkerRequest', registerWorkerRequest)
            const localVarPath = `/api/workers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerWorkerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Unregister a worker
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unregisterWorker: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('unregisterWorker', 'id', id)
            const localVarPath = `/api/workers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update worker heartbeat
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkerHeartbeat: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateWorkerHeartbeat', 'id', id)
            const localVarPath = `/api/workers/{id}/heartbeat`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkersApi - functional programming interface
 * @export
 */
export const WorkersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Claim work items
         * @param {string} id 
         * @param {ClaimWorkRequest} claimWorkRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async claimWork(id: string, claimWorkRequest: ClaimWorkRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.claimWork(id, claimWorkRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkersApi.claimWork']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Complete a work item
         * @param {string} id 
         * @param {string} itemId 
         * @param {CompleteWorkRequest} completeWorkRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeWork(id: string, itemId: string, completeWorkRequest: CompleteWorkRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.completeWork(id, itemId, completeWorkRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkersApi.completeWork']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all workers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listWorkers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Worker>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listWorkers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkersApi.listWorkers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Register a new worker
         * @param {RegisterWorkerRequest} registerWorkerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerWorker(registerWorkerRequest: RegisterWorkerRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Worker>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerWorker(registerWorkerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkersApi.registerWorker']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Unregister a worker
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unregisterWorker(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unregisterWorker(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkersApi.unregisterWorker']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update worker heartbeat
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWorkerHeartbeat(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWorkerHeartbeat(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkersApi.updateWorkerHeartbeat']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WorkersApi - factory interface
 * @export
 */
export const WorkersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkersApiFp(configuration)
    return {
        /**
         * 
         * @summary Claim work items
         * @param {string} id 
         * @param {ClaimWorkRequest} claimWorkRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        claimWork(id: string, claimWorkRequest: ClaimWorkRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<WorkItem>> {
            return localVarFp.claimWork(id, claimWorkRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Complete a work item
         * @param {string} id 
         * @param {string} itemId 
         * @param {CompleteWorkRequest} completeWorkRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeWork(id: string, itemId: string, completeWorkRequest: CompleteWorkRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.completeWork(id, itemId, completeWorkRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all workers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkers(options?: RawAxiosRequestConfig): AxiosPromise<Array<Worker>> {
            return localVarFp.listWorkers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register a new worker
         * @param {RegisterWorkerRequest} registerWorkerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerWorker(registerWorkerRequest: RegisterWorkerRequest, options?: RawAxiosRequestConfig): AxiosPromise<Worker> {
            return localVarFp.registerWorker(registerWorkerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Unregister a worker
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unregisterWorker(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.unregisterWorker(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update worker heartbeat
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkerHeartbeat(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateWorkerHeartbeat(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkersApi - object-oriented interface
 * @export
 * @class WorkersApi
 * @extends {BaseAPI}
 */
export class WorkersApi extends BaseAPI {
    /**
     * 
     * @summary Claim work items
     * @param {string} id 
     * @param {ClaimWorkRequest} claimWorkRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApi
     */
    public claimWork(id: string, claimWorkRequest: ClaimWorkRequest, options?: RawAxiosRequestConfig) {
        return WorkersApiFp(this.configuration).claimWork(id, claimWorkRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Complete a work item
     * @param {string} id 
     * @param {string} itemId 
     * @param {CompleteWorkRequest} completeWorkRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApi
     */
    public completeWork(id: string, itemId: string, completeWorkRequest: CompleteWorkRequest, options?: RawAxiosRequestConfig) {
        return WorkersApiFp(this.configuration).completeWork(id, itemId, completeWorkRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all workers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApi
     */
    public listWorkers(options?: RawAxiosRequestConfig) {
        return WorkersApiFp(this.configuration).listWorkers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register a new worker
     * @param {RegisterWorkerRequest} registerWorkerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApi
     */
    public registerWorker(registerWorkerRequest: RegisterWorkerRequest, options?: RawAxiosRequestConfig) {
        return WorkersApiFp(this.configuration).registerWorker(registerWorkerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Unregister a worker
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApi
     */
    public unregisterWorker(id: string, options?: RawAxiosRequestConfig) {
        return WorkersApiFp(this.configuration).unregisterWorker(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update worker heartbeat
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApi
     */
    public updateWorkerHeartbeat(id: string, options?: RawAxiosRequestConfig) {
        return WorkersApiFp(this.configuration).updateWorkerHeartbeat(id, options).then((request) => request(this.axios, this.basePath));
    }
}

