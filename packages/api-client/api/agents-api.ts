/* tslint:disable */
/* eslint-disable */
/**
 * MEL Agent API
 * AI Agents SaaS platform API with visual workflow builder
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Agent } from '../models';
// @ts-ignore
import type { AgentDeployment } from '../models';
// @ts-ignore
import type { AgentDraft } from '../models';
// @ts-ignore
import type { AgentList } from '../models';
// @ts-ignore
import type { AgentVersion } from '../models';
// @ts-ignore
import type { CreateAgentRequest } from '../models';
// @ts-ignore
import type { CreateAgentVersionRequest } from '../models';
// @ts-ignore
import type { DeployAgentVersionRequest } from '../models';
// @ts-ignore
import type { ExecuteAgentNodeRequest } from '../models';
// @ts-ignore
import type { ExecuteWorkflowRequest } from '../models';
// @ts-ignore
import type { NodeExecutionResult } from '../models';
// @ts-ignore
import type { NodeTestResult } from '../models';
// @ts-ignore
import type { UpdateAgentDraftRequest } from '../models';
// @ts-ignore
import type { UpdateAgentRequest } from '../models';
/**
 * AgentsApi - axios parameter creator
 * @export
 */
export const AgentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new agent
         * @param {CreateAgentRequest} createAgentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgent: async (createAgentRequest: CreateAgentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAgentRequest' is not null or undefined
            assertParamExists('createAgent', 'createAgentRequest', createAgentRequest)
            const localVarPath = `/api/agents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAgentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new agent version
         * @param {string} agentId 
         * @param {CreateAgentVersionRequest} createAgentVersionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgentVersion: async (agentId: string, createAgentVersionRequest: CreateAgentVersionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'agentId' is not null or undefined
            assertParamExists('createAgentVersion', 'agentId', agentId)
            // verify required parameter 'createAgentVersionRequest' is not null or undefined
            assertParamExists('createAgentVersion', 'createAgentVersionRequest', createAgentVersionRequest)
            const localVarPath = `/api/agents/{agentId}/versions`
                .replace(`{${"agentId"}}`, encodeURIComponent(String(agentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAgentVersionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete agent
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgent: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAgent', 'id', id)
            const localVarPath = `/api/agents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deploy a specific agent version
         * @param {string} agentId 
         * @param {DeployAgentVersionRequest} deployAgentVersionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployAgentVersion: async (agentId: string, deployAgentVersionRequest: DeployAgentVersionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'agentId' is not null or undefined
            assertParamExists('deployAgentVersion', 'agentId', agentId)
            // verify required parameter 'deployAgentVersionRequest' is not null or undefined
            assertParamExists('deployAgentVersion', 'deployAgentVersionRequest', deployAgentVersionRequest)
            const localVarPath = `/api/agents/{agentId}/deploy`
                .replace(`{${"agentId"}}`, encodeURIComponent(String(agentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deployAgentVersionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Execute a single node with provided input
         * @param {string} agentId 
         * @param {string} nodeId 
         * @param {ExecuteAgentNodeRequest} executeAgentNodeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeAgentNode: async (agentId: string, nodeId: string, executeAgentNodeRequest: ExecuteAgentNodeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'agentId' is not null or undefined
            assertParamExists('executeAgentNode', 'agentId', agentId)
            // verify required parameter 'nodeId' is not null or undefined
            assertParamExists('executeAgentNode', 'nodeId', nodeId)
            // verify required parameter 'executeAgentNodeRequest' is not null or undefined
            assertParamExists('executeAgentNode', 'executeAgentNodeRequest', executeAgentNodeRequest)
            const localVarPath = `/api/agents/{agentId}/nodes/{nodeId}/execute`
                .replace(`{${"agentId"}}`, encodeURIComponent(String(agentId)))
                .replace(`{${"nodeId"}}`, encodeURIComponent(String(nodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(executeAgentNodeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get agent by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgent: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAgent', 'id', id)
            const localVarPath = `/api/agents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get current draft for an agent
         * @param {string} agentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgentDraft: async (agentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'agentId' is not null or undefined
            assertParamExists('getAgentDraft', 'agentId', agentId)
            const localVarPath = `/api/agents/{agentId}/draft`
                .replace(`{${"agentId"}}`, encodeURIComponent(String(agentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get latest agent version
         * @param {string} agentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestAgentVersion: async (agentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'agentId' is not null or undefined
            assertParamExists('getLatestAgentVersion', 'agentId', agentId)
            const localVarPath = `/api/agents/{agentId}/versions/latest`
                .replace(`{${"agentId"}}`, encodeURIComponent(String(agentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all agents
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAgents: async (page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/agents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Test a single node in draft context
         * @param {string} agentId 
         * @param {string} nodeId 
         * @param {ExecuteWorkflowRequest} executeWorkflowRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testDraftNode: async (agentId: string, nodeId: string, executeWorkflowRequest: ExecuteWorkflowRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'agentId' is not null or undefined
            assertParamExists('testDraftNode', 'agentId', agentId)
            // verify required parameter 'nodeId' is not null or undefined
            assertParamExists('testDraftNode', 'nodeId', nodeId)
            // verify required parameter 'executeWorkflowRequest' is not null or undefined
            assertParamExists('testDraftNode', 'executeWorkflowRequest', executeWorkflowRequest)
            const localVarPath = `/api/agents/{agentId}/draft/nodes/{nodeId}/test`
                .replace(`{${"agentId"}}`, encodeURIComponent(String(agentId)))
                .replace(`{${"nodeId"}}`, encodeURIComponent(String(nodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(executeWorkflowRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update agent
         * @param {string} id 
         * @param {UpdateAgentRequest} updateAgentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgent: async (id: string, updateAgentRequest: UpdateAgentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAgent', 'id', id)
            // verify required parameter 'updateAgentRequest' is not null or undefined
            assertParamExists('updateAgent', 'updateAgentRequest', updateAgentRequest)
            const localVarPath = `/api/agents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAgentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update agent draft with auto-persistence
         * @param {string} agentId 
         * @param {UpdateAgentDraftRequest} updateAgentDraftRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgentDraft: async (agentId: string, updateAgentDraftRequest: UpdateAgentDraftRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'agentId' is not null or undefined
            assertParamExists('updateAgentDraft', 'agentId', agentId)
            // verify required parameter 'updateAgentDraftRequest' is not null or undefined
            assertParamExists('updateAgentDraft', 'updateAgentDraftRequest', updateAgentDraftRequest)
            const localVarPath = `/api/agents/{agentId}/draft`
                .replace(`{${"agentId"}}`, encodeURIComponent(String(agentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAgentDraftRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AgentsApi - functional programming interface
 * @export
 */
export const AgentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AgentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new agent
         * @param {CreateAgentRequest} createAgentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAgent(createAgentRequest: CreateAgentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Agent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAgent(createAgentRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AgentsApi.createAgent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new agent version
         * @param {string} agentId 
         * @param {CreateAgentVersionRequest} createAgentVersionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAgentVersion(agentId: string, createAgentVersionRequest: CreateAgentVersionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentVersion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAgentVersion(agentId, createAgentVersionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AgentsApi.createAgentVersion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete agent
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAgent(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAgent(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AgentsApi.deleteAgent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Deploy a specific agent version
         * @param {string} agentId 
         * @param {DeployAgentVersionRequest} deployAgentVersionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deployAgentVersion(agentId: string, deployAgentVersionRequest: DeployAgentVersionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentDeployment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deployAgentVersion(agentId, deployAgentVersionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AgentsApi.deployAgentVersion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Execute a single node with provided input
         * @param {string} agentId 
         * @param {string} nodeId 
         * @param {ExecuteAgentNodeRequest} executeAgentNodeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeAgentNode(agentId: string, nodeId: string, executeAgentNodeRequest: ExecuteAgentNodeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NodeExecutionResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.executeAgentNode(agentId, nodeId, executeAgentNodeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AgentsApi.executeAgentNode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get agent by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAgent(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Agent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAgent(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AgentsApi.getAgent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get current draft for an agent
         * @param {string} agentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAgentDraft(agentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentDraft>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAgentDraft(agentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AgentsApi.getAgentDraft']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get latest agent version
         * @param {string} agentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestAgentVersion(agentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentVersion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLatestAgentVersion(agentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AgentsApi.getLatestAgentVersion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all agents
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAgents(page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAgents(page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AgentsApi.listAgents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Test a single node in draft context
         * @param {string} agentId 
         * @param {string} nodeId 
         * @param {ExecuteWorkflowRequest} executeWorkflowRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testDraftNode(agentId: string, nodeId: string, executeWorkflowRequest: ExecuteWorkflowRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NodeTestResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testDraftNode(agentId, nodeId, executeWorkflowRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AgentsApi.testDraftNode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update agent
         * @param {string} id 
         * @param {UpdateAgentRequest} updateAgentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAgent(id: string, updateAgentRequest: UpdateAgentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Agent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAgent(id, updateAgentRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AgentsApi.updateAgent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update agent draft with auto-persistence
         * @param {string} agentId 
         * @param {UpdateAgentDraftRequest} updateAgentDraftRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAgentDraft(agentId: string, updateAgentDraftRequest: UpdateAgentDraftRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentDraft>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAgentDraft(agentId, updateAgentDraftRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AgentsApi.updateAgentDraft']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AgentsApi - factory interface
 * @export
 */
export const AgentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AgentsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new agent
         * @param {CreateAgentRequest} createAgentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgent(createAgentRequest: CreateAgentRequest, options?: RawAxiosRequestConfig): AxiosPromise<Agent> {
            return localVarFp.createAgent(createAgentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new agent version
         * @param {string} agentId 
         * @param {CreateAgentVersionRequest} createAgentVersionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgentVersion(agentId: string, createAgentVersionRequest: CreateAgentVersionRequest, options?: RawAxiosRequestConfig): AxiosPromise<AgentVersion> {
            return localVarFp.createAgentVersion(agentId, createAgentVersionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete agent
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgent(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteAgent(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deploy a specific agent version
         * @param {string} agentId 
         * @param {DeployAgentVersionRequest} deployAgentVersionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployAgentVersion(agentId: string, deployAgentVersionRequest: DeployAgentVersionRequest, options?: RawAxiosRequestConfig): AxiosPromise<AgentDeployment> {
            return localVarFp.deployAgentVersion(agentId, deployAgentVersionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Execute a single node with provided input
         * @param {string} agentId 
         * @param {string} nodeId 
         * @param {ExecuteAgentNodeRequest} executeAgentNodeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeAgentNode(agentId: string, nodeId: string, executeAgentNodeRequest: ExecuteAgentNodeRequest, options?: RawAxiosRequestConfig): AxiosPromise<NodeExecutionResult> {
            return localVarFp.executeAgentNode(agentId, nodeId, executeAgentNodeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get agent by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgent(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Agent> {
            return localVarFp.getAgent(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get current draft for an agent
         * @param {string} agentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgentDraft(agentId: string, options?: RawAxiosRequestConfig): AxiosPromise<AgentDraft> {
            return localVarFp.getAgentDraft(agentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get latest agent version
         * @param {string} agentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestAgentVersion(agentId: string, options?: RawAxiosRequestConfig): AxiosPromise<AgentVersion> {
            return localVarFp.getLatestAgentVersion(agentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all agents
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAgents(page?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<AgentList> {
            return localVarFp.listAgents(page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Test a single node in draft context
         * @param {string} agentId 
         * @param {string} nodeId 
         * @param {ExecuteWorkflowRequest} executeWorkflowRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testDraftNode(agentId: string, nodeId: string, executeWorkflowRequest: ExecuteWorkflowRequest, options?: RawAxiosRequestConfig): AxiosPromise<NodeTestResult> {
            return localVarFp.testDraftNode(agentId, nodeId, executeWorkflowRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update agent
         * @param {string} id 
         * @param {UpdateAgentRequest} updateAgentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgent(id: string, updateAgentRequest: UpdateAgentRequest, options?: RawAxiosRequestConfig): AxiosPromise<Agent> {
            return localVarFp.updateAgent(id, updateAgentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update agent draft with auto-persistence
         * @param {string} agentId 
         * @param {UpdateAgentDraftRequest} updateAgentDraftRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgentDraft(agentId: string, updateAgentDraftRequest: UpdateAgentDraftRequest, options?: RawAxiosRequestConfig): AxiosPromise<AgentDraft> {
            return localVarFp.updateAgentDraft(agentId, updateAgentDraftRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AgentsApi - object-oriented interface
 * @export
 * @class AgentsApi
 * @extends {BaseAPI}
 */
export class AgentsApi extends BaseAPI {
    /**
     * 
     * @summary Create a new agent
     * @param {CreateAgentRequest} createAgentRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    public createAgent(createAgentRequest: CreateAgentRequest, options?: RawAxiosRequestConfig) {
        return AgentsApiFp(this.configuration).createAgent(createAgentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new agent version
     * @param {string} agentId 
     * @param {CreateAgentVersionRequest} createAgentVersionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    public createAgentVersion(agentId: string, createAgentVersionRequest: CreateAgentVersionRequest, options?: RawAxiosRequestConfig) {
        return AgentsApiFp(this.configuration).createAgentVersion(agentId, createAgentVersionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete agent
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    public deleteAgent(id: string, options?: RawAxiosRequestConfig) {
        return AgentsApiFp(this.configuration).deleteAgent(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deploy a specific agent version
     * @param {string} agentId 
     * @param {DeployAgentVersionRequest} deployAgentVersionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    public deployAgentVersion(agentId: string, deployAgentVersionRequest: DeployAgentVersionRequest, options?: RawAxiosRequestConfig) {
        return AgentsApiFp(this.configuration).deployAgentVersion(agentId, deployAgentVersionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Execute a single node with provided input
     * @param {string} agentId 
     * @param {string} nodeId 
     * @param {ExecuteAgentNodeRequest} executeAgentNodeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    public executeAgentNode(agentId: string, nodeId: string, executeAgentNodeRequest: ExecuteAgentNodeRequest, options?: RawAxiosRequestConfig) {
        return AgentsApiFp(this.configuration).executeAgentNode(agentId, nodeId, executeAgentNodeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get agent by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    public getAgent(id: string, options?: RawAxiosRequestConfig) {
        return AgentsApiFp(this.configuration).getAgent(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get current draft for an agent
     * @param {string} agentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    public getAgentDraft(agentId: string, options?: RawAxiosRequestConfig) {
        return AgentsApiFp(this.configuration).getAgentDraft(agentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get latest agent version
     * @param {string} agentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    public getLatestAgentVersion(agentId: string, options?: RawAxiosRequestConfig) {
        return AgentsApiFp(this.configuration).getLatestAgentVersion(agentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all agents
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    public listAgents(page?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return AgentsApiFp(this.configuration).listAgents(page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Test a single node in draft context
     * @param {string} agentId 
     * @param {string} nodeId 
     * @param {ExecuteWorkflowRequest} executeWorkflowRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    public testDraftNode(agentId: string, nodeId: string, executeWorkflowRequest: ExecuteWorkflowRequest, options?: RawAxiosRequestConfig) {
        return AgentsApiFp(this.configuration).testDraftNode(agentId, nodeId, executeWorkflowRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update agent
     * @param {string} id 
     * @param {UpdateAgentRequest} updateAgentRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    public updateAgent(id: string, updateAgentRequest: UpdateAgentRequest, options?: RawAxiosRequestConfig) {
        return AgentsApiFp(this.configuration).updateAgent(id, updateAgentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update agent draft with auto-persistence
     * @param {string} agentId 
     * @param {UpdateAgentDraftRequest} updateAgentDraftRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    public updateAgentDraft(agentId: string, updateAgentDraftRequest: UpdateAgentDraftRequest, options?: RawAxiosRequestConfig) {
        return AgentsApiFp(this.configuration).updateAgentDraft(agentId, updateAgentDraftRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

