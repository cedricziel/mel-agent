/* tslint:disable */
/* eslint-disable */
/**
 * MEL Agent API
 * AI Agents SaaS platform API with visual workflow builder
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CredentialTestResult } from '../models';
// @ts-ignore
import type { CredentialType } from '../models';
// @ts-ignore
import type { CredentialTypeSchema } from '../models';
// @ts-ignore
import type { TestCredentialsRequest } from '../models';
/**
 * CredentialTypesApi - axios parameter creator
 * @export
 */
export const CredentialTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get JSON schema for credential type
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCredentialTypeSchema: async (type: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getCredentialTypeSchema', 'type', type)
            const localVarPath = `/api/credential-types/{type}/schema`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List credential type definitions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCredentialTypes: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/credential-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Test credentials for a specific type
         * @param {string} type 
         * @param {TestCredentialsRequest} testCredentialsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCredentials: async (type: string, testCredentialsRequest: TestCredentialsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('testCredentials', 'type', type)
            // verify required parameter 'testCredentialsRequest' is not null or undefined
            assertParamExists('testCredentials', 'testCredentialsRequest', testCredentialsRequest)
            const localVarPath = `/api/credential-types/{type}/test`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(testCredentialsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CredentialTypesApi - functional programming interface
 * @export
 */
export const CredentialTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CredentialTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get JSON schema for credential type
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCredentialTypeSchema(type: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CredentialTypeSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCredentialTypeSchema(type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CredentialTypesApi.getCredentialTypeSchema']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List credential type definitions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCredentialTypes(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CredentialType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCredentialTypes(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CredentialTypesApi.listCredentialTypes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Test credentials for a specific type
         * @param {string} type 
         * @param {TestCredentialsRequest} testCredentialsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testCredentials(type: string, testCredentialsRequest: TestCredentialsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CredentialTestResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testCredentials(type, testCredentialsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CredentialTypesApi.testCredentials']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CredentialTypesApi - factory interface
 * @export
 */
export const CredentialTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CredentialTypesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get JSON schema for credential type
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCredentialTypeSchema(type: string, options?: RawAxiosRequestConfig): AxiosPromise<CredentialTypeSchema> {
            return localVarFp.getCredentialTypeSchema(type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List credential type definitions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCredentialTypes(options?: RawAxiosRequestConfig): AxiosPromise<Array<CredentialType>> {
            return localVarFp.listCredentialTypes(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Test credentials for a specific type
         * @param {string} type 
         * @param {TestCredentialsRequest} testCredentialsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCredentials(type: string, testCredentialsRequest: TestCredentialsRequest, options?: RawAxiosRequestConfig): AxiosPromise<CredentialTestResult> {
            return localVarFp.testCredentials(type, testCredentialsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CredentialTypesApi - object-oriented interface
 * @export
 * @class CredentialTypesApi
 * @extends {BaseAPI}
 */
export class CredentialTypesApi extends BaseAPI {
    /**
     * 
     * @summary Get JSON schema for credential type
     * @param {string} type 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialTypesApi
     */
    public getCredentialTypeSchema(type: string, options?: RawAxiosRequestConfig) {
        return CredentialTypesApiFp(this.configuration).getCredentialTypeSchema(type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List credential type definitions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialTypesApi
     */
    public listCredentialTypes(options?: RawAxiosRequestConfig) {
        return CredentialTypesApiFp(this.configuration).listCredentialTypes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Test credentials for a specific type
     * @param {string} type 
     * @param {TestCredentialsRequest} testCredentialsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialTypesApi
     */
    public testCredentials(type: string, testCredentialsRequest: TestCredentialsRequest, options?: RawAxiosRequestConfig) {
        return CredentialTypesApiFp(this.configuration).testCredentials(type, testCredentialsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

