/* tslint:disable */
/* eslint-disable */
/**
 * MEL Agent API
 * AI Agents SaaS platform API with visual workflow builder
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateTriggerRequest } from '../models';
// @ts-ignore
import type { Trigger } from '../models';
// @ts-ignore
import type { UpdateTriggerRequest } from '../models';
/**
 * TriggersApi - axios parameter creator
 * @export
 */
export const TriggersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a trigger
         * @param {CreateTriggerRequest} createTriggerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTrigger: async (createTriggerRequest: CreateTriggerRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTriggerRequest' is not null or undefined
            assertParamExists('createTrigger', 'createTriggerRequest', createTriggerRequest)
            const localVarPath = `/api/triggers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTriggerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete trigger
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrigger: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTrigger', 'id', id)
            const localVarPath = `/api/triggers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get trigger by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrigger: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTrigger', 'id', id)
            const localVarPath = `/api/triggers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List triggers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTriggers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/triggers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update trigger
         * @param {string} id 
         * @param {UpdateTriggerRequest} updateTriggerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTrigger: async (id: string, updateTriggerRequest: UpdateTriggerRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTrigger', 'id', id)
            // verify required parameter 'updateTriggerRequest' is not null or undefined
            assertParamExists('updateTrigger', 'updateTriggerRequest', updateTriggerRequest)
            const localVarPath = `/api/triggers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTriggerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TriggersApi - functional programming interface
 * @export
 */
export const TriggersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TriggersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a trigger
         * @param {CreateTriggerRequest} createTriggerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTrigger(createTriggerRequest: CreateTriggerRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Trigger>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTrigger(createTriggerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TriggersApi.createTrigger']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete trigger
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTrigger(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTrigger(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TriggersApi.deleteTrigger']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get trigger by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrigger(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Trigger>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrigger(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TriggersApi.getTrigger']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List triggers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTriggers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Trigger>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTriggers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TriggersApi.listTriggers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update trigger
         * @param {string} id 
         * @param {UpdateTriggerRequest} updateTriggerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTrigger(id: string, updateTriggerRequest: UpdateTriggerRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Trigger>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTrigger(id, updateTriggerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TriggersApi.updateTrigger']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TriggersApi - factory interface
 * @export
 */
export const TriggersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TriggersApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a trigger
         * @param {CreateTriggerRequest} createTriggerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTrigger(createTriggerRequest: CreateTriggerRequest, options?: RawAxiosRequestConfig): AxiosPromise<Trigger> {
            return localVarFp.createTrigger(createTriggerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete trigger
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrigger(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTrigger(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get trigger by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrigger(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Trigger> {
            return localVarFp.getTrigger(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List triggers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTriggers(options?: RawAxiosRequestConfig): AxiosPromise<Array<Trigger>> {
            return localVarFp.listTriggers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update trigger
         * @param {string} id 
         * @param {UpdateTriggerRequest} updateTriggerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTrigger(id: string, updateTriggerRequest: UpdateTriggerRequest, options?: RawAxiosRequestConfig): AxiosPromise<Trigger> {
            return localVarFp.updateTrigger(id, updateTriggerRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TriggersApi - object-oriented interface
 * @export
 * @class TriggersApi
 * @extends {BaseAPI}
 */
export class TriggersApi extends BaseAPI {
    /**
     * 
     * @summary Create a trigger
     * @param {CreateTriggerRequest} createTriggerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersApi
     */
    public createTrigger(createTriggerRequest: CreateTriggerRequest, options?: RawAxiosRequestConfig) {
        return TriggersApiFp(this.configuration).createTrigger(createTriggerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete trigger
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersApi
     */
    public deleteTrigger(id: string, options?: RawAxiosRequestConfig) {
        return TriggersApiFp(this.configuration).deleteTrigger(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get trigger by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersApi
     */
    public getTrigger(id: string, options?: RawAxiosRequestConfig) {
        return TriggersApiFp(this.configuration).getTrigger(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List triggers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersApi
     */
    public listTriggers(options?: RawAxiosRequestConfig) {
        return TriggersApiFp(this.configuration).listTriggers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update trigger
     * @param {string} id 
     * @param {UpdateTriggerRequest} updateTriggerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersApi
     */
    public updateTrigger(id: string, updateTriggerRequest: UpdateTriggerRequest, options?: RawAxiosRequestConfig) {
        return TriggersApiFp(this.configuration).updateTrigger(id, updateTriggerRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

