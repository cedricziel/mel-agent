// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for AgentDeploymentStatus.
const (
	AgentDeploymentStatusDeployed  AgentDeploymentStatus = "deployed"
	AgentDeploymentStatusDeploying AgentDeploymentStatus = "deploying"
	AgentDeploymentStatusFailed    AgentDeploymentStatus = "failed"
)

// Defines values for ChatChoiceFinishReason.
const (
	ChatChoiceFinishReasonFunctionCall ChatChoiceFinishReason = "function_call"
	ChatChoiceFinishReasonLength       ChatChoiceFinishReason = "length"
	ChatChoiceFinishReasonStop         ChatChoiceFinishReason = "stop"
)

// Defines values for ChatMessageRole.
const (
	Assistant ChatMessageRole = "assistant"
	Function  ChatMessageRole = "function"
	System    ChatMessageRole = "system"
	User      ChatMessageRole = "user"
)

// Defines values for ConnectionStatus.
const (
	ConnectionStatusExpired ConnectionStatus = "expired"
	ConnectionStatusInvalid ConnectionStatus = "invalid"
	ConnectionStatusValid   ConnectionStatus = "valid"
)

// Defines values for CreateTriggerRequestType.
const (
	CreateTriggerRequestTypeSchedule CreateTriggerRequestType = "schedule"
	CreateTriggerRequestTypeWebhook  CreateTriggerRequestType = "webhook"
)

// Defines values for CredentialStatus.
const (
	CredentialStatusExpired CredentialStatus = "expired"
	CredentialStatusInvalid CredentialStatus = "invalid"
	CredentialStatusValid   CredentialStatus = "valid"
)

// Defines values for IntegrationStatus.
const (
	IntegrationStatusActive   IntegrationStatus = "active"
	IntegrationStatusInactive IntegrationStatus = "inactive"
)

// Defines values for NodeTypeKinds.
const (
	NodeTypeKindsAction  NodeTypeKinds = "action"
	NodeTypeKindsMemory  NodeTypeKinds = "memory"
	NodeTypeKindsModel   NodeTypeKinds = "model"
	NodeTypeKindsTool    NodeTypeKinds = "tool"
	NodeTypeKindsTrigger NodeTypeKinds = "trigger"
)

// Defines values for TriggerType.
const (
	TriggerTypeSchedule TriggerType = "schedule"
	TriggerTypeWebhook  TriggerType = "webhook"
)

// Defines values for UpdateConnectionRequestStatus.
const (
	Expired UpdateConnectionRequestStatus = "expired"
	Invalid UpdateConnectionRequestStatus = "invalid"
	Valid   UpdateConnectionRequestStatus = "valid"
)

// Defines values for WorkerStatus.
const (
	WorkerStatusActive   WorkerStatus = "active"
	WorkerStatusInactive WorkerStatus = "inactive"
)

// Defines values for WorkflowExecutionStatus.
const (
	WorkflowExecutionStatusCompleted WorkflowExecutionStatus = "completed"
	WorkflowExecutionStatusFailed    WorkflowExecutionStatus = "failed"
	WorkflowExecutionStatusPending   WorkflowExecutionStatus = "pending"
	WorkflowExecutionStatusRunning   WorkflowExecutionStatus = "running"
)

// Defines values for WorkflowRunStatus.
const (
	WorkflowRunStatusCompleted WorkflowRunStatus = "completed"
	WorkflowRunStatusFailed    WorkflowRunStatus = "failed"
	WorkflowRunStatusPending   WorkflowRunStatus = "pending"
	WorkflowRunStatusRunning   WorkflowRunStatus = "running"
)

// Defines values for WorkflowStepStatus.
const (
	WorkflowStepStatusCompleted WorkflowStepStatus = "completed"
	WorkflowStepStatusFailed    WorkflowStepStatus = "failed"
	WorkflowStepStatusPending   WorkflowStepStatus = "pending"
	WorkflowStepStatusRunning   WorkflowStepStatus = "running"
	WorkflowStepStatusSkipped   WorkflowStepStatus = "skipped"
)

// Defines values for ListWorkflowRunsParamsStatus.
const (
	Completed ListWorkflowRunsParamsStatus = "completed"
	Failed    ListWorkflowRunsParamsStatus = "failed"
	Pending   ListWorkflowRunsParamsStatus = "pending"
	Running   ListWorkflowRunsParamsStatus = "running"
)

// Agent defines model for Agent.
type Agent struct {
	CreatedAt   time.Time           `json:"created_at"`
	Definition  *WorkflowDefinition `json:"definition,omitempty"`
	Description *string             `json:"description,omitempty"`
	Id          openapi_types.UUID  `json:"id"`
	Name        string              `json:"name"`
}

// AgentDeployment defines model for AgentDeployment.
type AgentDeployment struct {
	AgentId    *openapi_types.UUID    `json:"agent_id,omitempty"`
	DeployedAt *time.Time             `json:"deployed_at,omitempty"`
	Status     *AgentDeploymentStatus `json:"status,omitempty"`
	VersionId  *openapi_types.UUID    `json:"version_id,omitempty"`
}

// AgentDeploymentStatus defines model for AgentDeployment.Status.
type AgentDeploymentStatus string

// AgentDraft defines model for AgentDraft.
type AgentDraft struct {
	AgentId    *openapi_types.UUID `json:"agent_id,omitempty"`
	Definition *WorkflowDefinition `json:"definition,omitempty"`
	Id         *openapi_types.UUID `json:"id,omitempty"`
	UpdatedAt  *time.Time          `json:"updated_at,omitempty"`
}

// AgentList defines model for AgentList.
type AgentList struct {
	Agents *[]Agent `json:"agents,omitempty"`
	Limit  *int     `json:"limit,omitempty"`
	Page   *int     `json:"page,omitempty"`
	Total  *int     `json:"total,omitempty"`
}

// AgentVersion defines model for AgentVersion.
type AgentVersion struct {
	AgentId       *openapi_types.UUID `json:"agent_id,omitempty"`
	CreatedAt     *time.Time          `json:"created_at,omitempty"`
	Definition    *WorkflowDefinition `json:"definition,omitempty"`
	Description   *string             `json:"description,omitempty"`
	Id            *openapi_types.UUID `json:"id,omitempty"`
	IsCurrent     *bool               `json:"is_current,omitempty"`
	Name          *string             `json:"name,omitempty"`
	VersionNumber *int                `json:"version_number,omitempty"`
}

// AssistantChatRequest defines model for AssistantChatRequest.
type AssistantChatRequest struct {
	// Messages Array of chat messages
	Messages []ChatMessage `json:"messages"`
}

// AssistantChatResponse defines model for AssistantChatResponse.
type AssistantChatResponse struct {
	// Choices Array of response choices
	Choices *[]ChatChoice `json:"choices,omitempty"`

	// Created Unix timestamp
	Created *int `json:"created,omitempty"`

	// Id Response ID
	Id *string `json:"id,omitempty"`

	// Model Model used
	Model *string `json:"model,omitempty"`

	// Object Object type (e.g., "chat.completion")
	Object *string    `json:"object,omitempty"`
	Usage  *ChatUsage `json:"usage,omitempty"`
}

// ChatChoice defines model for ChatChoice.
type ChatChoice struct {
	// FinishReason Reason for finishing
	FinishReason *ChatChoiceFinishReason `json:"finish_reason,omitempty"`

	// Index Choice index
	Index   *int         `json:"index,omitempty"`
	Message *ChatMessage `json:"message,omitempty"`
}

// ChatChoiceFinishReason Reason for finishing
type ChatChoiceFinishReason string

// ChatMessage defines model for ChatMessage.
type ChatMessage struct {
	// Content Message content
	Content      string        `json:"content"`
	FunctionCall *FunctionCall `json:"function_call,omitempty"`

	// Name Function name (for function role)
	Name *string `json:"name,omitempty"`

	// Role Message role
	Role ChatMessageRole `json:"role"`
}

// ChatMessageRole Message role
type ChatMessageRole string

// ChatUsage defines model for ChatUsage.
type ChatUsage struct {
	// CompletionTokens Tokens used in completion
	CompletionTokens *int `json:"completion_tokens,omitempty"`

	// PromptTokens Tokens used in prompt
	PromptTokens *int `json:"prompt_tokens,omitempty"`

	// TotalTokens Total tokens used
	TotalTokens *int `json:"total_tokens,omitempty"`
}

// Connection defines model for Connection.
type Connection struct {
	Config          *map[string]interface{} `json:"config,omitempty"`
	CreatedAt       *time.Time              `json:"created_at,omitempty"`
	Id              *openapi_types.UUID     `json:"id,omitempty"`
	IntegrationId   *openapi_types.UUID     `json:"integration_id,omitempty"`
	IsDefault       *bool                   `json:"is_default,omitempty"`
	LastValidated   *time.Time              `json:"last_validated,omitempty"`
	Name            *string                 `json:"name,omitempty"`
	Secret          *map[string]interface{} `json:"secret,omitempty"`
	Status          *ConnectionStatus       `json:"status,omitempty"`
	UsageLimitMonth *int                    `json:"usage_limit_month,omitempty"`
	UserId          *openapi_types.UUID     `json:"user_id,omitempty"`
}

// ConnectionStatus defines model for Connection.Status.
type ConnectionStatus string

// CreateAgentRequest defines model for CreateAgentRequest.
type CreateAgentRequest struct {
	Definition  *WorkflowDefinition `json:"definition,omitempty"`
	Description *string             `json:"description,omitempty"`
	Name        string              `json:"name"`
}

// CreateAgentVersionRequest defines model for CreateAgentVersionRequest.
type CreateAgentVersionRequest struct {
	Definition  *WorkflowDefinition `json:"definition,omitempty"`
	Description *string             `json:"description,omitempty"`
	Name        string              `json:"name"`
}

// CreateConnectionRequest defines model for CreateConnectionRequest.
type CreateConnectionRequest struct {
	Config          *map[string]interface{} `json:"config,omitempty"`
	IntegrationId   openapi_types.UUID      `json:"integration_id"`
	IsDefault       *bool                   `json:"is_default,omitempty"`
	Name            string                  `json:"name"`
	Secret          *map[string]interface{} `json:"secret,omitempty"`
	UsageLimitMonth *int                    `json:"usage_limit_month,omitempty"`
}

// CreateTriggerRequest defines model for CreateTriggerRequest.
type CreateTriggerRequest struct {
	Config     *map[string]interface{}  `json:"config,omitempty"`
	Enabled    *bool                    `json:"enabled,omitempty"`
	Name       string                   `json:"name"`
	Type       CreateTriggerRequestType `json:"type"`
	WorkflowId openapi_types.UUID       `json:"workflow_id"`
}

// CreateTriggerRequestType defines model for CreateTriggerRequest.Type.
type CreateTriggerRequestType string

// CreateWorkflowEdgeRequest defines model for CreateWorkflowEdgeRequest.
type CreateWorkflowEdgeRequest struct {
	Id           string  `json:"id"`
	Source       string  `json:"source"`
	SourceOutput *string `json:"sourceOutput,omitempty"`
	Target       string  `json:"target"`
	TargetInput  *string `json:"targetInput,omitempty"`
}

// CreateWorkflowNodeRequest defines model for CreateWorkflowNodeRequest.
type CreateWorkflowNodeRequest struct {
	Config   map[string]interface{} `json:"config"`
	Id       string                 `json:"id"`
	Name     string                 `json:"name"`
	Position *struct {
		X *float32 `json:"x,omitempty"`
		Y *float32 `json:"y,omitempty"`
	} `json:"position,omitempty"`
	Type string `json:"type"`
}

// CreateWorkflowRequest defines model for CreateWorkflowRequest.
type CreateWorkflowRequest struct {
	Definition  *WorkflowDefinition `json:"definition,omitempty"`
	Description *string             `json:"description,omitempty"`
	Name        string              `json:"name"`
}

// Credential defines model for Credential.
type Credential struct {
	CreatedAt   *time.Time          `json:"created_at,omitempty"`
	Description *string             `json:"description,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	LastUsed    *time.Time          `json:"last_used,omitempty"`
	Name        *string             `json:"name,omitempty"`
	Status      *CredentialStatus   `json:"status,omitempty"`
	Type        *string             `json:"type,omitempty"`
}

// CredentialStatus defines model for Credential.Status.
type CredentialStatus string

// CredentialTestResult defines model for CredentialTestResult.
type CredentialTestResult struct {
	Details *map[string]interface{} `json:"details,omitempty"`
	Error   *string                 `json:"error,omitempty"`
	Message *string                 `json:"message,omitempty"`
	Success *bool                   `json:"success,omitempty"`
}

// CredentialType defines model for CredentialType.
type CredentialType struct {
	Description    *string                 `json:"description,omitempty"`
	Id             *string                 `json:"id,omitempty"`
	Name           *string                 `json:"name,omitempty"`
	RequiredFields *[]string               `json:"required_fields,omitempty"`
	Schema         *map[string]interface{} `json:"schema,omitempty"`
	TestEndpoint   *string                 `json:"test_endpoint,omitempty"`
}

// CredentialTypeSchema defines model for CredentialTypeSchema.
type CredentialTypeSchema struct {
	Description *string                 `json:"description,omitempty"`
	Properties  *map[string]interface{} `json:"properties,omitempty"`
	Required    *[]string               `json:"required,omitempty"`
	Title       *string                 `json:"title,omitempty"`
	Type        *string                 `json:"type,omitempty"`
}

// DeployAgentVersionRequest defines model for DeployAgentVersionRequest.
type DeployAgentVersionRequest struct {
	VersionId openapi_types.UUID `json:"version_id"`
}

// Error defines model for Error.
type Error struct {
	Code    *int    `json:"code,omitempty"`
	Error   *string `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
}

// Extension defines model for Extension.
type Extension struct {
	// Categories Extension types provided (e.g. "node", "trigger")
	Categories []string `json:"categories"`

	// Id Unique plugin identifier
	Id string `json:"id"`

	// Params Parameter schema for configuration/UI
	Params *[]ParamSpec `json:"params,omitempty"`

	// UiComponent Optional path or URL to React bundle
	UiComponent *string `json:"ui_component,omitempty"`

	// Version Semver-compliant version string
	Version string `json:"version"`
}

// FunctionCall defines model for FunctionCall.
type FunctionCall struct {
	// Arguments Function arguments as JSON string
	Arguments *string `json:"arguments,omitempty"`

	// Name Function name
	Name *string `json:"name,omitempty"`
}

// Integration defines model for Integration.
type Integration struct {
	Capabilities *[]string           `json:"capabilities,omitempty"`
	CreatedAt    *time.Time          `json:"created_at,omitempty"`
	Description  *string             `json:"description,omitempty"`
	Id           *openapi_types.UUID `json:"id,omitempty"`
	Name         *string             `json:"name,omitempty"`
	Status       *IntegrationStatus  `json:"status,omitempty"`
	Type         *string             `json:"type,omitempty"`
	UpdatedAt    *time.Time          `json:"updated_at,omitempty"`
}

// IntegrationStatus defines model for Integration.Status.
type IntegrationStatus string

// NodeExecutionResult defines model for NodeExecutionResult.
type NodeExecutionResult struct {
	AgentId       *openapi_types.UUID     `json:"agent_id,omitempty"`
	Error         *string                 `json:"error,omitempty"`
	ExecutionTime *float32                `json:"execution_time,omitempty"`
	Logs          *[]string               `json:"logs,omitempty"`
	NodeId        *string                 `json:"node_id,omitempty"`
	Output        *map[string]interface{} `json:"output,omitempty"`
	Success       *bool                   `json:"success,omitempty"`
}

// NodeInput defines model for NodeInput.
type NodeInput struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
	Required    *bool   `json:"required,omitempty"`
	Type        *string `json:"type,omitempty"`
}

// NodeOutput defines model for NodeOutput.
type NodeOutput struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
	Type        *string `json:"type,omitempty"`
}

// NodeParameterOptions defines model for NodeParameterOptions.
type NodeParameterOptions struct {
	ContextDependent *bool `json:"context_dependent,omitempty"`
	Dynamic          *bool `json:"dynamic,omitempty"`
	Options          *[]struct {
		Description *string `json:"description,omitempty"`
		Label       *string `json:"label,omitempty"`
		Value       *string `json:"value,omitempty"`
	} `json:"options,omitempty"`
}

// NodeTestResult defines model for NodeTestResult.
type NodeTestResult struct {
	Error         *string                 `json:"error,omitempty"`
	ExecutionTime *float32                `json:"execution_time,omitempty"`
	Logs          *[]string               `json:"logs,omitempty"`
	Output        *map[string]interface{} `json:"output,omitempty"`
	Success       *bool                   `json:"success,omitempty"`
}

// NodeType defines model for NodeType.
type NodeType struct {
	Description *string          `json:"description,omitempty"`
	Id          *string          `json:"id,omitempty"`
	Inputs      *[]NodeInput     `json:"inputs,omitempty"`
	Kinds       *[]NodeTypeKinds `json:"kinds,omitempty"`
	Name        *string          `json:"name,omitempty"`
	Outputs     *[]NodeOutput    `json:"outputs,omitempty"`
}

// NodeTypeKinds defines model for NodeType.Kinds.
type NodeTypeKinds string

// ParamSpec defines model for ParamSpec.
type ParamSpec struct {
	// Default Default value
	Default *interface{} `json:"default,omitempty"`

	// Description Help text
	Description *string `json:"description,omitempty"`

	// Group UI grouping
	Group *string `json:"group,omitempty"`

	// Label User-facing label
	Label *string `json:"label,omitempty"`

	// Name Key name
	Name string `json:"name"`

	// Options Enum options
	Options *[]string `json:"options,omitempty"`

	// Required Must be provided
	Required *bool `json:"required,omitempty"`

	// Type Data type (e.g. "string", "number", "enum")
	Type string `json:"type"`

	// Validators Validation rules
	Validators *[]ValidatorSpec `json:"validators,omitempty"`

	// VisibilityCondition Conditional display expression
	VisibilityCondition *string `json:"visibility_condition,omitempty"`
}

// RegisterWorkerRequest defines model for RegisterWorkerRequest.
type RegisterWorkerRequest struct {
	Concurrency *int    `json:"concurrency,omitempty"`
	Id          string  `json:"id"`
	Name        *string `json:"name,omitempty"`
}

// Trigger defines model for Trigger.
type Trigger struct {
	Config     *map[string]interface{} `json:"config,omitempty"`
	CreatedAt  *time.Time              `json:"created_at,omitempty"`
	Enabled    *bool                   `json:"enabled,omitempty"`
	Id         *openapi_types.UUID     `json:"id,omitempty"`
	Name       *string                 `json:"name,omitempty"`
	Type       *TriggerType            `json:"type,omitempty"`
	UpdatedAt  *time.Time              `json:"updated_at,omitempty"`
	WorkflowId *openapi_types.UUID     `json:"workflow_id,omitempty"`
}

// TriggerType defines model for Trigger.Type.
type TriggerType string

// UpdateAgentDraftRequest defines model for UpdateAgentDraftRequest.
type UpdateAgentDraftRequest struct {
	Definition *WorkflowDefinition `json:"definition,omitempty"`
}

// UpdateAgentRequest defines model for UpdateAgentRequest.
type UpdateAgentRequest struct {
	Definition  *WorkflowDefinition `json:"definition,omitempty"`
	Description *string             `json:"description,omitempty"`
	Name        *string             `json:"name,omitempty"`
}

// UpdateConnectionRequest defines model for UpdateConnectionRequest.
type UpdateConnectionRequest struct {
	Config          *map[string]interface{}        `json:"config,omitempty"`
	IsDefault       *bool                          `json:"is_default,omitempty"`
	Name            *string                        `json:"name,omitempty"`
	Secret          *map[string]interface{}        `json:"secret,omitempty"`
	Status          *UpdateConnectionRequestStatus `json:"status,omitempty"`
	UsageLimitMonth *int                           `json:"usage_limit_month,omitempty"`
}

// UpdateConnectionRequestStatus defines model for UpdateConnectionRequest.Status.
type UpdateConnectionRequestStatus string

// UpdateTriggerRequest defines model for UpdateTriggerRequest.
type UpdateTriggerRequest struct {
	Config  *map[string]interface{} `json:"config,omitempty"`
	Enabled *bool                   `json:"enabled,omitempty"`
	Name    *string                 `json:"name,omitempty"`
}

// UpdateWorkflowNodeRequest defines model for UpdateWorkflowNodeRequest.
type UpdateWorkflowNodeRequest struct {
	Config   *map[string]interface{} `json:"config,omitempty"`
	Name     *string                 `json:"name,omitempty"`
	Position *struct {
		X *float32 `json:"x,omitempty"`
		Y *float32 `json:"y,omitempty"`
	} `json:"position,omitempty"`
}

// UpdateWorkflowRequest defines model for UpdateWorkflowRequest.
type UpdateWorkflowRequest struct {
	Definition  *WorkflowDefinition `json:"definition,omitempty"`
	Description *string             `json:"description,omitempty"`
	Name        *string             `json:"name,omitempty"`
}

// ValidatorSpec defines model for ValidatorSpec.
type ValidatorSpec struct {
	// Params Parameters for the validator
	Params *map[string]interface{} `json:"params,omitempty"`

	// Type Validator type (e.g. "notEmpty", "regex")
	Type string `json:"type"`
}

// WorkItem defines model for WorkItem.
type WorkItem struct {
	CreatedAt *time.Time              `json:"created_at,omitempty"`
	Id        *string                 `json:"id,omitempty"`
	Payload   *map[string]interface{} `json:"payload,omitempty"`
	Type      *string                 `json:"type,omitempty"`
}

// Worker defines model for Worker.
type Worker struct {
	Concurrency   *int          `json:"concurrency,omitempty"`
	Id            *string       `json:"id,omitempty"`
	LastHeartbeat *time.Time    `json:"last_heartbeat,omitempty"`
	Name          *string       `json:"name,omitempty"`
	RegisteredAt  *time.Time    `json:"registered_at,omitempty"`
	Status        *WorkerStatus `json:"status,omitempty"`
}

// WorkerStatus defines model for Worker.Status.
type WorkerStatus string

// Workflow defines model for Workflow.
type Workflow struct {
	CreatedAt   time.Time           `json:"created_at"`
	Definition  *WorkflowDefinition `json:"definition,omitempty"`
	Description *string             `json:"description,omitempty"`
	Id          openapi_types.UUID  `json:"id"`
	Name        string              `json:"name"`
	UpdatedAt   time.Time           `json:"updated_at"`
}

// WorkflowDefinition defines model for WorkflowDefinition.
type WorkflowDefinition struct {
	Edges *[]WorkflowEdge `json:"edges,omitempty"`
	Nodes *[]WorkflowNode `json:"nodes,omitempty"`
}

// WorkflowEdge defines model for WorkflowEdge.
type WorkflowEdge struct {
	Id           string  `json:"id"`
	Source       string  `json:"source"`
	SourceOutput *string `json:"sourceOutput,omitempty"`
	Target       string  `json:"target"`
	TargetInput  *string `json:"targetInput,omitempty"`
}

// WorkflowExecution defines model for WorkflowExecution.
type WorkflowExecution struct {
	CompletedAt *time.Time               `json:"completed_at,omitempty"`
	Error       *string                  `json:"error,omitempty"`
	Id          *openapi_types.UUID      `json:"id,omitempty"`
	Result      *map[string]interface{}  `json:"result,omitempty"`
	StartedAt   *time.Time               `json:"started_at,omitempty"`
	Status      *WorkflowExecutionStatus `json:"status,omitempty"`
	WorkflowId  *openapi_types.UUID      `json:"workflow_id,omitempty"`
}

// WorkflowExecutionStatus defines model for WorkflowExecution.Status.
type WorkflowExecutionStatus string

// WorkflowLayoutResult defines model for WorkflowLayoutResult.
type WorkflowLayoutResult struct {
	Nodes *[]struct {
		Id       *string `json:"id,omitempty"`
		Position *struct {
			X *float32 `json:"x,omitempty"`
			Y *float32 `json:"y,omitempty"`
		} `json:"position,omitempty"`
	} `json:"nodes,omitempty"`
}

// WorkflowList defines model for WorkflowList.
type WorkflowList struct {
	Limit     *int        `json:"limit,omitempty"`
	Page      *int        `json:"page,omitempty"`
	Total     *int        `json:"total,omitempty"`
	Workflows *[]Workflow `json:"workflows,omitempty"`
}

// WorkflowNode defines model for WorkflowNode.
type WorkflowNode struct {
	Config map[string]interface{} `json:"config"`
	Id     string                 `json:"id"`
	Name   string                 `json:"name"`
	Type   string                 `json:"type"`
}

// WorkflowRun defines model for WorkflowRun.
type WorkflowRun struct {
	CompletedAt *time.Time              `json:"completed_at,omitempty"`
	Context     *map[string]interface{} `json:"context,omitempty"`
	Error       *string                 `json:"error,omitempty"`
	Id          *openapi_types.UUID     `json:"id,omitempty"`
	StartedAt   *time.Time              `json:"started_at,omitempty"`
	Status      *WorkflowRunStatus      `json:"status,omitempty"`
	WorkflowId  *openapi_types.UUID     `json:"workflow_id,omitempty"`
}

// WorkflowRunStatus defines model for WorkflowRun.Status.
type WorkflowRunStatus string

// WorkflowRunList defines model for WorkflowRunList.
type WorkflowRunList struct {
	Limit *int           `json:"limit,omitempty"`
	Page  *int           `json:"page,omitempty"`
	Runs  *[]WorkflowRun `json:"runs,omitempty"`
	Total *int           `json:"total,omitempty"`
}

// WorkflowStep defines model for WorkflowStep.
type WorkflowStep struct {
	CompletedAt *time.Time              `json:"completed_at,omitempty"`
	Error       *string                 `json:"error,omitempty"`
	Id          *openapi_types.UUID     `json:"id,omitempty"`
	Input       *map[string]interface{} `json:"input,omitempty"`
	NodeId      *string                 `json:"node_id,omitempty"`
	Output      *map[string]interface{} `json:"output,omitempty"`
	RunId       *openapi_types.UUID     `json:"run_id,omitempty"`
	StartedAt   *time.Time              `json:"started_at,omitempty"`
	Status      *WorkflowStepStatus     `json:"status,omitempty"`
}

// WorkflowStepStatus defines model for WorkflowStep.Status.
type WorkflowStepStatus string

// ListAgentsParams defines parameters for ListAgents.
type ListAgentsParams struct {
	Page  *int `form:"page,omitempty" json:"page,omitempty"`
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// TestDraftNodeJSONBody defines parameters for TestDraftNode.
type TestDraftNodeJSONBody struct {
	Input *map[string]interface{} `json:"input,omitempty"`
}

// ExecuteAgentNodeJSONBody defines parameters for ExecuteAgentNode.
type ExecuteAgentNodeJSONBody struct {
	Context *map[string]interface{} `json:"context,omitempty"`
	Input   *map[string]interface{} `json:"input,omitempty"`
}

// TestCredentialsJSONBody defines parameters for TestCredentials.
type TestCredentialsJSONBody struct {
	Credentials *map[string]interface{} `json:"credentials,omitempty"`
}

// ListCredentialsParams defines parameters for ListCredentials.
type ListCredentialsParams struct {
	// CredentialType Filter by credential type
	CredentialType *string `form:"credential_type,omitempty" json:"credential_type,omitempty"`
}

// ListNodeTypesParams defines parameters for ListNodeTypes.
type ListNodeTypesParams struct {
	// Kind Filter by node kind (can be comma-separated)
	Kind *string `form:"kind,omitempty" json:"kind,omitempty"`
}

// GetNodeParameterOptionsParams defines parameters for GetNodeParameterOptions.
type GetNodeParameterOptionsParams struct {
	// Context Context for dynamic option generation
	Context *string `form:"context,omitempty" json:"context,omitempty"`
}

// ClaimWorkJSONBody defines parameters for ClaimWork.
type ClaimWorkJSONBody struct {
	MaxItems *int `json:"maxItems,omitempty"`
}

// CompleteWorkJSONBody defines parameters for CompleteWork.
type CompleteWorkJSONBody struct {
	Error  *string                 `json:"error,omitempty"`
	Result *map[string]interface{} `json:"result,omitempty"`
}

// ListWorkflowRunsParams defines parameters for ListWorkflowRuns.
type ListWorkflowRunsParams struct {
	WorkflowId *openapi_types.UUID           `form:"workflow_id,omitempty" json:"workflow_id,omitempty"`
	Status     *ListWorkflowRunsParamsStatus `form:"status,omitempty" json:"status,omitempty"`
	Page       *int                          `form:"page,omitempty" json:"page,omitempty"`
	Limit      *int                          `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListWorkflowRunsParamsStatus defines parameters for ListWorkflowRuns.
type ListWorkflowRunsParamsStatus string

// ListWorkflowsParams defines parameters for ListWorkflows.
type ListWorkflowsParams struct {
	Page  *int `form:"page,omitempty" json:"page,omitempty"`
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// ExecuteWorkflowJSONBody defines parameters for ExecuteWorkflow.
type ExecuteWorkflowJSONBody struct {
	Input *map[string]interface{} `json:"input,omitempty"`
}

// HandleWebhookJSONBody defines parameters for HandleWebhook.
type HandleWebhookJSONBody map[string]interface{}

// CreateAgentJSONRequestBody defines body for CreateAgent for application/json ContentType.
type CreateAgentJSONRequestBody = CreateAgentRequest

// AssistantChatJSONRequestBody defines body for AssistantChat for application/json ContentType.
type AssistantChatJSONRequestBody = AssistantChatRequest

// DeployAgentVersionJSONRequestBody defines body for DeployAgentVersion for application/json ContentType.
type DeployAgentVersionJSONRequestBody = DeployAgentVersionRequest

// UpdateAgentDraftJSONRequestBody defines body for UpdateAgentDraft for application/json ContentType.
type UpdateAgentDraftJSONRequestBody = UpdateAgentDraftRequest

// TestDraftNodeJSONRequestBody defines body for TestDraftNode for application/json ContentType.
type TestDraftNodeJSONRequestBody TestDraftNodeJSONBody

// ExecuteAgentNodeJSONRequestBody defines body for ExecuteAgentNode for application/json ContentType.
type ExecuteAgentNodeJSONRequestBody ExecuteAgentNodeJSONBody

// CreateAgentVersionJSONRequestBody defines body for CreateAgentVersion for application/json ContentType.
type CreateAgentVersionJSONRequestBody = CreateAgentVersionRequest

// UpdateAgentJSONRequestBody defines body for UpdateAgent for application/json ContentType.
type UpdateAgentJSONRequestBody = UpdateAgentRequest

// CreateConnectionJSONRequestBody defines body for CreateConnection for application/json ContentType.
type CreateConnectionJSONRequestBody = CreateConnectionRequest

// UpdateConnectionJSONRequestBody defines body for UpdateConnection for application/json ContentType.
type UpdateConnectionJSONRequestBody = UpdateConnectionRequest

// TestCredentialsJSONRequestBody defines body for TestCredentials for application/json ContentType.
type TestCredentialsJSONRequestBody TestCredentialsJSONBody

// CreateTriggerJSONRequestBody defines body for CreateTrigger for application/json ContentType.
type CreateTriggerJSONRequestBody = CreateTriggerRequest

// UpdateTriggerJSONRequestBody defines body for UpdateTrigger for application/json ContentType.
type UpdateTriggerJSONRequestBody = UpdateTriggerRequest

// RegisterWorkerJSONRequestBody defines body for RegisterWorker for application/json ContentType.
type RegisterWorkerJSONRequestBody = RegisterWorkerRequest

// ClaimWorkJSONRequestBody defines body for ClaimWork for application/json ContentType.
type ClaimWorkJSONRequestBody ClaimWorkJSONBody

// CompleteWorkJSONRequestBody defines body for CompleteWork for application/json ContentType.
type CompleteWorkJSONRequestBody CompleteWorkJSONBody

// CreateWorkflowJSONRequestBody defines body for CreateWorkflow for application/json ContentType.
type CreateWorkflowJSONRequestBody = CreateWorkflowRequest

// UpdateWorkflowJSONRequestBody defines body for UpdateWorkflow for application/json ContentType.
type UpdateWorkflowJSONRequestBody = UpdateWorkflowRequest

// ExecuteWorkflowJSONRequestBody defines body for ExecuteWorkflow for application/json ContentType.
type ExecuteWorkflowJSONRequestBody ExecuteWorkflowJSONBody

// CreateWorkflowEdgeJSONRequestBody defines body for CreateWorkflowEdge for application/json ContentType.
type CreateWorkflowEdgeJSONRequestBody = CreateWorkflowEdgeRequest

// CreateWorkflowNodeJSONRequestBody defines body for CreateWorkflowNode for application/json ContentType.
type CreateWorkflowNodeJSONRequestBody = CreateWorkflowNodeRequest

// UpdateWorkflowNodeJSONRequestBody defines body for UpdateWorkflowNode for application/json ContentType.
type UpdateWorkflowNodeJSONRequestBody = UpdateWorkflowNodeRequest

// HandleWebhookJSONRequestBody defines body for HandleWebhook for application/json ContentType.
type HandleWebhookJSONRequestBody HandleWebhookJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all agents
	// (GET /api/agents)
	ListAgents(w http.ResponseWriter, r *http.Request, params ListAgentsParams)
	// Create a new agent
	// (POST /api/agents)
	CreateAgent(w http.ResponseWriter, r *http.Request)
	// Chat with AI assistant for workflow building
	// (POST /api/agents/{agentId}/assistant/chat)
	AssistantChat(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID)
	// Deploy a specific agent version
	// (POST /api/agents/{agentId}/deploy)
	DeployAgentVersion(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID)
	// Get current draft for an agent
	// (GET /api/agents/{agentId}/draft)
	GetAgentDraft(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID)
	// Update agent draft with auto-persistence
	// (PUT /api/agents/{agentId}/draft)
	UpdateAgentDraft(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID)
	// Test a single node in draft context
	// (POST /api/agents/{agentId}/draft/nodes/{nodeId}/test)
	TestDraftNode(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID, nodeId string)
	// Execute a single node with provided input
	// (POST /api/agents/{agentId}/nodes/{nodeId}/execute)
	ExecuteAgentNode(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID, nodeId string)
	// Create a new agent version
	// (POST /api/agents/{agentId}/versions)
	CreateAgentVersion(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID)
	// Get latest agent version
	// (GET /api/agents/{agentId}/versions/latest)
	GetLatestAgentVersion(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID)
	// Delete agent
	// (DELETE /api/agents/{id})
	DeleteAgent(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get agent by ID
	// (GET /api/agents/{id})
	GetAgent(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Update agent
	// (PUT /api/agents/{id})
	UpdateAgent(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// List connections
	// (GET /api/connections)
	ListConnections(w http.ResponseWriter, r *http.Request)
	// Create a connection
	// (POST /api/connections)
	CreateConnection(w http.ResponseWriter, r *http.Request)
	// Delete connection
	// (DELETE /api/connections/{id})
	DeleteConnection(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get connection by ID
	// (GET /api/connections/{id})
	GetConnection(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Update connection
	// (PUT /api/connections/{id})
	UpdateConnection(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// List credential type definitions
	// (GET /api/credential-types)
	ListCredentialTypes(w http.ResponseWriter, r *http.Request)
	// Get JSON schema for credential type
	// (GET /api/credential-types/schema/{type})
	GetCredentialTypeSchema(w http.ResponseWriter, r *http.Request, pType string)
	// Test credentials for a specific type
	// (POST /api/credential-types/{type}/test)
	TestCredentials(w http.ResponseWriter, r *http.Request, pType string)
	// List credentials for selection in nodes
	// (GET /api/credentials)
	ListCredentials(w http.ResponseWriter, r *http.Request, params ListCredentialsParams)
	// List available extensions and plugins
	// (GET /api/extensions)
	ListExtensions(w http.ResponseWriter, r *http.Request)
	// Health check endpoint
	// (GET /api/health)
	GetHealth(w http.ResponseWriter, r *http.Request)
	// List available integrations
	// (GET /api/integrations)
	ListIntegrations(w http.ResponseWriter, r *http.Request)
	// List available node types
	// (GET /api/node-types)
	ListNodeTypes(w http.ResponseWriter, r *http.Request, params ListNodeTypesParams)
	// Get dynamic options for node parameters
	// (GET /api/node-types/{type}/parameters/{parameter}/options)
	GetNodeParameterOptions(w http.ResponseWriter, r *http.Request, pType string, parameter string, params GetNodeParameterOptionsParams)
	// List triggers
	// (GET /api/triggers)
	ListTriggers(w http.ResponseWriter, r *http.Request)
	// Create a trigger
	// (POST /api/triggers)
	CreateTrigger(w http.ResponseWriter, r *http.Request)
	// Delete trigger
	// (DELETE /api/triggers/{id})
	DeleteTrigger(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get trigger by ID
	// (GET /api/triggers/{id})
	GetTrigger(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Update trigger
	// (PUT /api/triggers/{id})
	UpdateTrigger(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// List all workers
	// (GET /api/workers)
	ListWorkers(w http.ResponseWriter, r *http.Request)
	// Register a new worker
	// (POST /api/workers)
	RegisterWorker(w http.ResponseWriter, r *http.Request)
	// Unregister a worker
	// (DELETE /api/workers/{id})
	UnregisterWorker(w http.ResponseWriter, r *http.Request, id string)
	// Claim work items
	// (POST /api/workers/{id}/claim-work)
	ClaimWork(w http.ResponseWriter, r *http.Request, id string)
	// Complete a work item
	// (POST /api/workers/{id}/complete-work/{itemId})
	CompleteWork(w http.ResponseWriter, r *http.Request, id string, itemId string)
	// Update worker heartbeat
	// (PUT /api/workers/{id}/heartbeat)
	UpdateWorkerHeartbeat(w http.ResponseWriter, r *http.Request, id string)
	// List workflow runs
	// (GET /api/workflow-runs)
	ListWorkflowRuns(w http.ResponseWriter, r *http.Request, params ListWorkflowRunsParams)
	// Get workflow run details
	// (GET /api/workflow-runs/{id})
	GetWorkflowRun(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get workflow run steps
	// (GET /api/workflow-runs/{id}/steps)
	GetWorkflowRunSteps(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// List all workflows
	// (GET /api/workflows)
	ListWorkflows(w http.ResponseWriter, r *http.Request, params ListWorkflowsParams)
	// Create a new workflow
	// (POST /api/workflows)
	CreateWorkflow(w http.ResponseWriter, r *http.Request)
	// Delete workflow
	// (DELETE /api/workflows/{id})
	DeleteWorkflow(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get workflow by ID
	// (GET /api/workflows/{id})
	GetWorkflow(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Update workflow
	// (PUT /api/workflows/{id})
	UpdateWorkflow(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Execute a workflow
	// (POST /api/workflows/{id}/execute)
	ExecuteWorkflow(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// List all edges in a workflow
	// (GET /api/workflows/{workflowId}/edges)
	ListWorkflowEdges(w http.ResponseWriter, r *http.Request, workflowId openapi_types.UUID)
	// Create a new edge in workflow
	// (POST /api/workflows/{workflowId}/edges)
	CreateWorkflowEdge(w http.ResponseWriter, r *http.Request, workflowId openapi_types.UUID)
	// Delete workflow edge
	// (DELETE /api/workflows/{workflowId}/edges/{edgeId})
	DeleteWorkflowEdge(w http.ResponseWriter, r *http.Request, workflowId openapi_types.UUID, edgeId string)
	// Auto-layout workflow nodes
	// (POST /api/workflows/{workflowId}/layout)
	AutoLayoutWorkflow(w http.ResponseWriter, r *http.Request, workflowId openapi_types.UUID)
	// List all nodes in a workflow
	// (GET /api/workflows/{workflowId}/nodes)
	ListWorkflowNodes(w http.ResponseWriter, r *http.Request, workflowId openapi_types.UUID)
	// Create a new node in workflow
	// (POST /api/workflows/{workflowId}/nodes)
	CreateWorkflowNode(w http.ResponseWriter, r *http.Request, workflowId openapi_types.UUID)
	// Delete workflow node
	// (DELETE /api/workflows/{workflowId}/nodes/{nodeId})
	DeleteWorkflowNode(w http.ResponseWriter, r *http.Request, workflowId openapi_types.UUID, nodeId string)
	// Get specific workflow node
	// (GET /api/workflows/{workflowId}/nodes/{nodeId})
	GetWorkflowNode(w http.ResponseWriter, r *http.Request, workflowId openapi_types.UUID, nodeId string)
	// Update workflow node
	// (PUT /api/workflows/{workflowId}/nodes/{nodeId})
	UpdateWorkflowNode(w http.ResponseWriter, r *http.Request, workflowId openapi_types.UUID, nodeId string)
	// Webhook endpoint
	// (POST /webhooks/{token})
	HandleWebhook(w http.ResponseWriter, r *http.Request, token string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List all agents
// (GET /api/agents)
func (_ Unimplemented) ListAgents(w http.ResponseWriter, r *http.Request, params ListAgentsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new agent
// (POST /api/agents)
func (_ Unimplemented) CreateAgent(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Chat with AI assistant for workflow building
// (POST /api/agents/{agentId}/assistant/chat)
func (_ Unimplemented) AssistantChat(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Deploy a specific agent version
// (POST /api/agents/{agentId}/deploy)
func (_ Unimplemented) DeployAgentVersion(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get current draft for an agent
// (GET /api/agents/{agentId}/draft)
func (_ Unimplemented) GetAgentDraft(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update agent draft with auto-persistence
// (PUT /api/agents/{agentId}/draft)
func (_ Unimplemented) UpdateAgentDraft(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Test a single node in draft context
// (POST /api/agents/{agentId}/draft/nodes/{nodeId}/test)
func (_ Unimplemented) TestDraftNode(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID, nodeId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Execute a single node with provided input
// (POST /api/agents/{agentId}/nodes/{nodeId}/execute)
func (_ Unimplemented) ExecuteAgentNode(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID, nodeId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new agent version
// (POST /api/agents/{agentId}/versions)
func (_ Unimplemented) CreateAgentVersion(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get latest agent version
// (GET /api/agents/{agentId}/versions/latest)
func (_ Unimplemented) GetLatestAgentVersion(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete agent
// (DELETE /api/agents/{id})
func (_ Unimplemented) DeleteAgent(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get agent by ID
// (GET /api/agents/{id})
func (_ Unimplemented) GetAgent(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update agent
// (PUT /api/agents/{id})
func (_ Unimplemented) UpdateAgent(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List connections
// (GET /api/connections)
func (_ Unimplemented) ListConnections(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a connection
// (POST /api/connections)
func (_ Unimplemented) CreateConnection(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete connection
// (DELETE /api/connections/{id})
func (_ Unimplemented) DeleteConnection(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get connection by ID
// (GET /api/connections/{id})
func (_ Unimplemented) GetConnection(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update connection
// (PUT /api/connections/{id})
func (_ Unimplemented) UpdateConnection(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List credential type definitions
// (GET /api/credential-types)
func (_ Unimplemented) ListCredentialTypes(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get JSON schema for credential type
// (GET /api/credential-types/schema/{type})
func (_ Unimplemented) GetCredentialTypeSchema(w http.ResponseWriter, r *http.Request, pType string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Test credentials for a specific type
// (POST /api/credential-types/{type}/test)
func (_ Unimplemented) TestCredentials(w http.ResponseWriter, r *http.Request, pType string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List credentials for selection in nodes
// (GET /api/credentials)
func (_ Unimplemented) ListCredentials(w http.ResponseWriter, r *http.Request, params ListCredentialsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List available extensions and plugins
// (GET /api/extensions)
func (_ Unimplemented) ListExtensions(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Health check endpoint
// (GET /api/health)
func (_ Unimplemented) GetHealth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List available integrations
// (GET /api/integrations)
func (_ Unimplemented) ListIntegrations(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List available node types
// (GET /api/node-types)
func (_ Unimplemented) ListNodeTypes(w http.ResponseWriter, r *http.Request, params ListNodeTypesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get dynamic options for node parameters
// (GET /api/node-types/{type}/parameters/{parameter}/options)
func (_ Unimplemented) GetNodeParameterOptions(w http.ResponseWriter, r *http.Request, pType string, parameter string, params GetNodeParameterOptionsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List triggers
// (GET /api/triggers)
func (_ Unimplemented) ListTriggers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a trigger
// (POST /api/triggers)
func (_ Unimplemented) CreateTrigger(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete trigger
// (DELETE /api/triggers/{id})
func (_ Unimplemented) DeleteTrigger(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get trigger by ID
// (GET /api/triggers/{id})
func (_ Unimplemented) GetTrigger(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update trigger
// (PUT /api/triggers/{id})
func (_ Unimplemented) UpdateTrigger(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all workers
// (GET /api/workers)
func (_ Unimplemented) ListWorkers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Register a new worker
// (POST /api/workers)
func (_ Unimplemented) RegisterWorker(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unregister a worker
// (DELETE /api/workers/{id})
func (_ Unimplemented) UnregisterWorker(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Claim work items
// (POST /api/workers/{id}/claim-work)
func (_ Unimplemented) ClaimWork(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Complete a work item
// (POST /api/workers/{id}/complete-work/{itemId})
func (_ Unimplemented) CompleteWork(w http.ResponseWriter, r *http.Request, id string, itemId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update worker heartbeat
// (PUT /api/workers/{id}/heartbeat)
func (_ Unimplemented) UpdateWorkerHeartbeat(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List workflow runs
// (GET /api/workflow-runs)
func (_ Unimplemented) ListWorkflowRuns(w http.ResponseWriter, r *http.Request, params ListWorkflowRunsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get workflow run details
// (GET /api/workflow-runs/{id})
func (_ Unimplemented) GetWorkflowRun(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get workflow run steps
// (GET /api/workflow-runs/{id}/steps)
func (_ Unimplemented) GetWorkflowRunSteps(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all workflows
// (GET /api/workflows)
func (_ Unimplemented) ListWorkflows(w http.ResponseWriter, r *http.Request, params ListWorkflowsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new workflow
// (POST /api/workflows)
func (_ Unimplemented) CreateWorkflow(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete workflow
// (DELETE /api/workflows/{id})
func (_ Unimplemented) DeleteWorkflow(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get workflow by ID
// (GET /api/workflows/{id})
func (_ Unimplemented) GetWorkflow(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update workflow
// (PUT /api/workflows/{id})
func (_ Unimplemented) UpdateWorkflow(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Execute a workflow
// (POST /api/workflows/{id}/execute)
func (_ Unimplemented) ExecuteWorkflow(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all edges in a workflow
// (GET /api/workflows/{workflowId}/edges)
func (_ Unimplemented) ListWorkflowEdges(w http.ResponseWriter, r *http.Request, workflowId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new edge in workflow
// (POST /api/workflows/{workflowId}/edges)
func (_ Unimplemented) CreateWorkflowEdge(w http.ResponseWriter, r *http.Request, workflowId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete workflow edge
// (DELETE /api/workflows/{workflowId}/edges/{edgeId})
func (_ Unimplemented) DeleteWorkflowEdge(w http.ResponseWriter, r *http.Request, workflowId openapi_types.UUID, edgeId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Auto-layout workflow nodes
// (POST /api/workflows/{workflowId}/layout)
func (_ Unimplemented) AutoLayoutWorkflow(w http.ResponseWriter, r *http.Request, workflowId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all nodes in a workflow
// (GET /api/workflows/{workflowId}/nodes)
func (_ Unimplemented) ListWorkflowNodes(w http.ResponseWriter, r *http.Request, workflowId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new node in workflow
// (POST /api/workflows/{workflowId}/nodes)
func (_ Unimplemented) CreateWorkflowNode(w http.ResponseWriter, r *http.Request, workflowId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete workflow node
// (DELETE /api/workflows/{workflowId}/nodes/{nodeId})
func (_ Unimplemented) DeleteWorkflowNode(w http.ResponseWriter, r *http.Request, workflowId openapi_types.UUID, nodeId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get specific workflow node
// (GET /api/workflows/{workflowId}/nodes/{nodeId})
func (_ Unimplemented) GetWorkflowNode(w http.ResponseWriter, r *http.Request, workflowId openapi_types.UUID, nodeId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update workflow node
// (PUT /api/workflows/{workflowId}/nodes/{nodeId})
func (_ Unimplemented) UpdateWorkflowNode(w http.ResponseWriter, r *http.Request, workflowId openapi_types.UUID, nodeId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Webhook endpoint
// (POST /webhooks/{token})
func (_ Unimplemented) HandleWebhook(w http.ResponseWriter, r *http.Request, token string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListAgents operation middleware
func (siw *ServerInterfaceWrapper) ListAgents(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAgentsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAgents(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateAgent operation middleware
func (siw *ServerInterfaceWrapper) CreateAgent(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAgent(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AssistantChat operation middleware
func (siw *ServerInterfaceWrapper) AssistantChat(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "agentId" -------------
	var agentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "agentId", chi.URLParam(r, "agentId"), &agentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "agentId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AssistantChat(w, r, agentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeployAgentVersion operation middleware
func (siw *ServerInterfaceWrapper) DeployAgentVersion(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "agentId" -------------
	var agentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "agentId", chi.URLParam(r, "agentId"), &agentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "agentId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeployAgentVersion(w, r, agentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAgentDraft operation middleware
func (siw *ServerInterfaceWrapper) GetAgentDraft(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "agentId" -------------
	var agentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "agentId", chi.URLParam(r, "agentId"), &agentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "agentId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAgentDraft(w, r, agentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateAgentDraft operation middleware
func (siw *ServerInterfaceWrapper) UpdateAgentDraft(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "agentId" -------------
	var agentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "agentId", chi.URLParam(r, "agentId"), &agentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "agentId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateAgentDraft(w, r, agentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// TestDraftNode operation middleware
func (siw *ServerInterfaceWrapper) TestDraftNode(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "agentId" -------------
	var agentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "agentId", chi.URLParam(r, "agentId"), &agentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "agentId", Err: err})
		return
	}

	// ------------- Path parameter "nodeId" -------------
	var nodeId string

	err = runtime.BindStyledParameterWithOptions("simple", "nodeId", chi.URLParam(r, "nodeId"), &nodeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nodeId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TestDraftNode(w, r, agentId, nodeId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ExecuteAgentNode operation middleware
func (siw *ServerInterfaceWrapper) ExecuteAgentNode(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "agentId" -------------
	var agentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "agentId", chi.URLParam(r, "agentId"), &agentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "agentId", Err: err})
		return
	}

	// ------------- Path parameter "nodeId" -------------
	var nodeId string

	err = runtime.BindStyledParameterWithOptions("simple", "nodeId", chi.URLParam(r, "nodeId"), &nodeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nodeId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ExecuteAgentNode(w, r, agentId, nodeId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateAgentVersion operation middleware
func (siw *ServerInterfaceWrapper) CreateAgentVersion(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "agentId" -------------
	var agentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "agentId", chi.URLParam(r, "agentId"), &agentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "agentId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAgentVersion(w, r, agentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetLatestAgentVersion operation middleware
func (siw *ServerInterfaceWrapper) GetLatestAgentVersion(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "agentId" -------------
	var agentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "agentId", chi.URLParam(r, "agentId"), &agentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "agentId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLatestAgentVersion(w, r, agentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAgent operation middleware
func (siw *ServerInterfaceWrapper) DeleteAgent(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAgent(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAgent operation middleware
func (siw *ServerInterfaceWrapper) GetAgent(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAgent(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateAgent operation middleware
func (siw *ServerInterfaceWrapper) UpdateAgent(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateAgent(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListConnections operation middleware
func (siw *ServerInterfaceWrapper) ListConnections(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListConnections(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateConnection operation middleware
func (siw *ServerInterfaceWrapper) CreateConnection(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateConnection(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteConnection operation middleware
func (siw *ServerInterfaceWrapper) DeleteConnection(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteConnection(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetConnection operation middleware
func (siw *ServerInterfaceWrapper) GetConnection(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConnection(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateConnection operation middleware
func (siw *ServerInterfaceWrapper) UpdateConnection(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateConnection(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListCredentialTypes operation middleware
func (siw *ServerInterfaceWrapper) ListCredentialTypes(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCredentialTypes(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCredentialTypeSchema operation middleware
func (siw *ServerInterfaceWrapper) GetCredentialTypeSchema(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "type" -------------
	var pType string

	err = runtime.BindStyledParameterWithOptions("simple", "type", chi.URLParam(r, "type"), &pType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCredentialTypeSchema(w, r, pType)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// TestCredentials operation middleware
func (siw *ServerInterfaceWrapper) TestCredentials(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "type" -------------
	var pType string

	err = runtime.BindStyledParameterWithOptions("simple", "type", chi.URLParam(r, "type"), &pType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TestCredentials(w, r, pType)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListCredentials operation middleware
func (siw *ServerInterfaceWrapper) ListCredentials(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCredentialsParams

	// ------------- Optional query parameter "credential_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "credential_type", r.URL.Query(), &params.CredentialType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "credential_type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCredentials(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListExtensions operation middleware
func (siw *ServerInterfaceWrapper) ListExtensions(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListExtensions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListIntegrations operation middleware
func (siw *ServerInterfaceWrapper) ListIntegrations(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListIntegrations(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListNodeTypes operation middleware
func (siw *ServerInterfaceWrapper) ListNodeTypes(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListNodeTypesParams

	// ------------- Optional query parameter "kind" -------------

	err = runtime.BindQueryParameter("form", true, false, "kind", r.URL.Query(), &params.Kind)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "kind", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListNodeTypes(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNodeParameterOptions operation middleware
func (siw *ServerInterfaceWrapper) GetNodeParameterOptions(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "type" -------------
	var pType string

	err = runtime.BindStyledParameterWithOptions("simple", "type", chi.URLParam(r, "type"), &pType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// ------------- Path parameter "parameter" -------------
	var parameter string

	err = runtime.BindStyledParameterWithOptions("simple", "parameter", chi.URLParam(r, "parameter"), &parameter, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "parameter", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeParameterOptionsParams

	// ------------- Optional query parameter "context" -------------

	err = runtime.BindQueryParameter("form", true, false, "context", r.URL.Query(), &params.Context)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "context", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodeParameterOptions(w, r, pType, parameter, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTriggers operation middleware
func (siw *ServerInterfaceWrapper) ListTriggers(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTriggers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateTrigger operation middleware
func (siw *ServerInterfaceWrapper) CreateTrigger(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTrigger(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteTrigger operation middleware
func (siw *ServerInterfaceWrapper) DeleteTrigger(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTrigger(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTrigger operation middleware
func (siw *ServerInterfaceWrapper) GetTrigger(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrigger(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateTrigger operation middleware
func (siw *ServerInterfaceWrapper) UpdateTrigger(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTrigger(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListWorkers operation middleware
func (siw *ServerInterfaceWrapper) ListWorkers(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListWorkers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RegisterWorker operation middleware
func (siw *ServerInterfaceWrapper) RegisterWorker(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterWorker(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UnregisterWorker operation middleware
func (siw *ServerInterfaceWrapper) UnregisterWorker(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UnregisterWorker(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ClaimWork operation middleware
func (siw *ServerInterfaceWrapper) ClaimWork(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ClaimWork(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CompleteWork operation middleware
func (siw *ServerInterfaceWrapper) CompleteWork(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Path parameter "itemId" -------------
	var itemId string

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", chi.URLParam(r, "itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CompleteWork(w, r, id, itemId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateWorkerHeartbeat operation middleware
func (siw *ServerInterfaceWrapper) UpdateWorkerHeartbeat(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateWorkerHeartbeat(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListWorkflowRuns operation middleware
func (siw *ServerInterfaceWrapper) ListWorkflowRuns(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListWorkflowRunsParams

	// ------------- Optional query parameter "workflow_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "workflow_id", r.URL.Query(), &params.WorkflowId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflow_id", Err: err})
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListWorkflowRuns(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetWorkflowRun operation middleware
func (siw *ServerInterfaceWrapper) GetWorkflowRun(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWorkflowRun(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetWorkflowRunSteps operation middleware
func (siw *ServerInterfaceWrapper) GetWorkflowRunSteps(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWorkflowRunSteps(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListWorkflows operation middleware
func (siw *ServerInterfaceWrapper) ListWorkflows(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListWorkflowsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListWorkflows(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateWorkflow operation middleware
func (siw *ServerInterfaceWrapper) CreateWorkflow(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateWorkflow(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteWorkflow operation middleware
func (siw *ServerInterfaceWrapper) DeleteWorkflow(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteWorkflow(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetWorkflow operation middleware
func (siw *ServerInterfaceWrapper) GetWorkflow(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWorkflow(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateWorkflow operation middleware
func (siw *ServerInterfaceWrapper) UpdateWorkflow(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateWorkflow(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ExecuteWorkflow operation middleware
func (siw *ServerInterfaceWrapper) ExecuteWorkflow(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ExecuteWorkflow(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListWorkflowEdges operation middleware
func (siw *ServerInterfaceWrapper) ListWorkflowEdges(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "workflowId" -------------
	var workflowId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "workflowId", chi.URLParam(r, "workflowId"), &workflowId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListWorkflowEdges(w, r, workflowId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateWorkflowEdge operation middleware
func (siw *ServerInterfaceWrapper) CreateWorkflowEdge(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "workflowId" -------------
	var workflowId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "workflowId", chi.URLParam(r, "workflowId"), &workflowId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateWorkflowEdge(w, r, workflowId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteWorkflowEdge operation middleware
func (siw *ServerInterfaceWrapper) DeleteWorkflowEdge(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "workflowId" -------------
	var workflowId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "workflowId", chi.URLParam(r, "workflowId"), &workflowId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowId", Err: err})
		return
	}

	// ------------- Path parameter "edgeId" -------------
	var edgeId string

	err = runtime.BindStyledParameterWithOptions("simple", "edgeId", chi.URLParam(r, "edgeId"), &edgeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "edgeId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteWorkflowEdge(w, r, workflowId, edgeId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AutoLayoutWorkflow operation middleware
func (siw *ServerInterfaceWrapper) AutoLayoutWorkflow(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "workflowId" -------------
	var workflowId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "workflowId", chi.URLParam(r, "workflowId"), &workflowId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AutoLayoutWorkflow(w, r, workflowId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListWorkflowNodes operation middleware
func (siw *ServerInterfaceWrapper) ListWorkflowNodes(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "workflowId" -------------
	var workflowId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "workflowId", chi.URLParam(r, "workflowId"), &workflowId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListWorkflowNodes(w, r, workflowId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateWorkflowNode operation middleware
func (siw *ServerInterfaceWrapper) CreateWorkflowNode(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "workflowId" -------------
	var workflowId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "workflowId", chi.URLParam(r, "workflowId"), &workflowId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateWorkflowNode(w, r, workflowId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteWorkflowNode operation middleware
func (siw *ServerInterfaceWrapper) DeleteWorkflowNode(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "workflowId" -------------
	var workflowId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "workflowId", chi.URLParam(r, "workflowId"), &workflowId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowId", Err: err})
		return
	}

	// ------------- Path parameter "nodeId" -------------
	var nodeId string

	err = runtime.BindStyledParameterWithOptions("simple", "nodeId", chi.URLParam(r, "nodeId"), &nodeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nodeId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteWorkflowNode(w, r, workflowId, nodeId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetWorkflowNode operation middleware
func (siw *ServerInterfaceWrapper) GetWorkflowNode(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "workflowId" -------------
	var workflowId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "workflowId", chi.URLParam(r, "workflowId"), &workflowId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowId", Err: err})
		return
	}

	// ------------- Path parameter "nodeId" -------------
	var nodeId string

	err = runtime.BindStyledParameterWithOptions("simple", "nodeId", chi.URLParam(r, "nodeId"), &nodeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nodeId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWorkflowNode(w, r, workflowId, nodeId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateWorkflowNode operation middleware
func (siw *ServerInterfaceWrapper) UpdateWorkflowNode(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "workflowId" -------------
	var workflowId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "workflowId", chi.URLParam(r, "workflowId"), &workflowId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowId", Err: err})
		return
	}

	// ------------- Path parameter "nodeId" -------------
	var nodeId string

	err = runtime.BindStyledParameterWithOptions("simple", "nodeId", chi.URLParam(r, "nodeId"), &nodeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nodeId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateWorkflowNode(w, r, workflowId, nodeId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// HandleWebhook operation middleware
func (siw *ServerInterfaceWrapper) HandleWebhook(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "token" -------------
	var token string

	err = runtime.BindStyledParameterWithOptions("simple", "token", chi.URLParam(r, "token"), &token, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "token", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HandleWebhook(w, r, token)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/agents", wrapper.ListAgents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/agents", wrapper.CreateAgent)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/agents/{agentId}/assistant/chat", wrapper.AssistantChat)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/agents/{agentId}/deploy", wrapper.DeployAgentVersion)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/agents/{agentId}/draft", wrapper.GetAgentDraft)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/agents/{agentId}/draft", wrapper.UpdateAgentDraft)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/agents/{agentId}/draft/nodes/{nodeId}/test", wrapper.TestDraftNode)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/agents/{agentId}/nodes/{nodeId}/execute", wrapper.ExecuteAgentNode)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/agents/{agentId}/versions", wrapper.CreateAgentVersion)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/agents/{agentId}/versions/latest", wrapper.GetLatestAgentVersion)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/agents/{id}", wrapper.DeleteAgent)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/agents/{id}", wrapper.GetAgent)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/agents/{id}", wrapper.UpdateAgent)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/connections", wrapper.ListConnections)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/connections", wrapper.CreateConnection)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/connections/{id}", wrapper.DeleteConnection)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/connections/{id}", wrapper.GetConnection)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/connections/{id}", wrapper.UpdateConnection)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/credential-types", wrapper.ListCredentialTypes)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/credential-types/schema/{type}", wrapper.GetCredentialTypeSchema)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/credential-types/{type}/test", wrapper.TestCredentials)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/credentials", wrapper.ListCredentials)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/extensions", wrapper.ListExtensions)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/health", wrapper.GetHealth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/integrations", wrapper.ListIntegrations)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/node-types", wrapper.ListNodeTypes)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/node-types/{type}/parameters/{parameter}/options", wrapper.GetNodeParameterOptions)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/triggers", wrapper.ListTriggers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/triggers", wrapper.CreateTrigger)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/triggers/{id}", wrapper.DeleteTrigger)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/triggers/{id}", wrapper.GetTrigger)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/triggers/{id}", wrapper.UpdateTrigger)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/workers", wrapper.ListWorkers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/workers", wrapper.RegisterWorker)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/workers/{id}", wrapper.UnregisterWorker)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/workers/{id}/claim-work", wrapper.ClaimWork)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/workers/{id}/complete-work/{itemId}", wrapper.CompleteWork)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/workers/{id}/heartbeat", wrapper.UpdateWorkerHeartbeat)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/workflow-runs", wrapper.ListWorkflowRuns)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/workflow-runs/{id}", wrapper.GetWorkflowRun)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/workflow-runs/{id}/steps", wrapper.GetWorkflowRunSteps)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/workflows", wrapper.ListWorkflows)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/workflows", wrapper.CreateWorkflow)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/workflows/{id}", wrapper.DeleteWorkflow)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/workflows/{id}", wrapper.GetWorkflow)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/workflows/{id}", wrapper.UpdateWorkflow)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/workflows/{id}/execute", wrapper.ExecuteWorkflow)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/workflows/{workflowId}/edges", wrapper.ListWorkflowEdges)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/workflows/{workflowId}/edges", wrapper.CreateWorkflowEdge)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/workflows/{workflowId}/edges/{edgeId}", wrapper.DeleteWorkflowEdge)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/workflows/{workflowId}/layout", wrapper.AutoLayoutWorkflow)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/workflows/{workflowId}/nodes", wrapper.ListWorkflowNodes)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/workflows/{workflowId}/nodes", wrapper.CreateWorkflowNode)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/workflows/{workflowId}/nodes/{nodeId}", wrapper.DeleteWorkflowNode)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/workflows/{workflowId}/nodes/{nodeId}", wrapper.GetWorkflowNode)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/workflows/{workflowId}/nodes/{nodeId}", wrapper.UpdateWorkflowNode)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/webhooks/{token}", wrapper.HandleWebhook)
	})

	return r
}

type ListAgentsRequestObject struct {
	Params ListAgentsParams
}

type ListAgentsResponseObject interface {
	VisitListAgentsResponse(w http.ResponseWriter) error
}

type ListAgents200JSONResponse AgentList

func (response ListAgents200JSONResponse) VisitListAgentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListAgents500JSONResponse Error

func (response ListAgents500JSONResponse) VisitListAgentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateAgentRequestObject struct {
	Body *CreateAgentJSONRequestBody
}

type CreateAgentResponseObject interface {
	VisitCreateAgentResponse(w http.ResponseWriter) error
}

type CreateAgent201JSONResponse Agent

func (response CreateAgent201JSONResponse) VisitCreateAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateAgent400JSONResponse Error

func (response CreateAgent400JSONResponse) VisitCreateAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateAgent500JSONResponse Error

func (response CreateAgent500JSONResponse) VisitCreateAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AssistantChatRequestObject struct {
	AgentId openapi_types.UUID `json:"agentId"`
	Body    *AssistantChatJSONRequestBody
}

type AssistantChatResponseObject interface {
	VisitAssistantChatResponse(w http.ResponseWriter) error
}

type AssistantChat200JSONResponse AssistantChatResponse

func (response AssistantChat200JSONResponse) VisitAssistantChatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssistantChat400JSONResponse Error

func (response AssistantChat400JSONResponse) VisitAssistantChatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AssistantChat500JSONResponse Error

func (response AssistantChat500JSONResponse) VisitAssistantChatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeployAgentVersionRequestObject struct {
	AgentId openapi_types.UUID `json:"agentId"`
	Body    *DeployAgentVersionJSONRequestBody
}

type DeployAgentVersionResponseObject interface {
	VisitDeployAgentVersionResponse(w http.ResponseWriter) error
}

type DeployAgentVersion200JSONResponse AgentDeployment

func (response DeployAgentVersion200JSONResponse) VisitDeployAgentVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeployAgentVersion400JSONResponse Error

func (response DeployAgentVersion400JSONResponse) VisitDeployAgentVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeployAgentVersion404JSONResponse Error

func (response DeployAgentVersion404JSONResponse) VisitDeployAgentVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeployAgentVersion500JSONResponse Error

func (response DeployAgentVersion500JSONResponse) VisitDeployAgentVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAgentDraftRequestObject struct {
	AgentId openapi_types.UUID `json:"agentId"`
}

type GetAgentDraftResponseObject interface {
	VisitGetAgentDraftResponse(w http.ResponseWriter) error
}

type GetAgentDraft200JSONResponse AgentDraft

func (response GetAgentDraft200JSONResponse) VisitGetAgentDraftResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAgentDraft404JSONResponse Error

func (response GetAgentDraft404JSONResponse) VisitGetAgentDraftResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAgentDraft500JSONResponse Error

func (response GetAgentDraft500JSONResponse) VisitGetAgentDraftResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAgentDraftRequestObject struct {
	AgentId openapi_types.UUID `json:"agentId"`
	Body    *UpdateAgentDraftJSONRequestBody
}

type UpdateAgentDraftResponseObject interface {
	VisitUpdateAgentDraftResponse(w http.ResponseWriter) error
}

type UpdateAgentDraft200JSONResponse AgentDraft

func (response UpdateAgentDraft200JSONResponse) VisitUpdateAgentDraftResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAgentDraft400JSONResponse Error

func (response UpdateAgentDraft400JSONResponse) VisitUpdateAgentDraftResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAgentDraft404JSONResponse Error

func (response UpdateAgentDraft404JSONResponse) VisitUpdateAgentDraftResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAgentDraft500JSONResponse Error

func (response UpdateAgentDraft500JSONResponse) VisitUpdateAgentDraftResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type TestDraftNodeRequestObject struct {
	AgentId openapi_types.UUID `json:"agentId"`
	NodeId  string             `json:"nodeId"`
	Body    *TestDraftNodeJSONRequestBody
}

type TestDraftNodeResponseObject interface {
	VisitTestDraftNodeResponse(w http.ResponseWriter) error
}

type TestDraftNode200JSONResponse NodeTestResult

func (response TestDraftNode200JSONResponse) VisitTestDraftNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TestDraftNode400JSONResponse Error

func (response TestDraftNode400JSONResponse) VisitTestDraftNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TestDraftNode404JSONResponse Error

func (response TestDraftNode404JSONResponse) VisitTestDraftNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type TestDraftNode500JSONResponse Error

func (response TestDraftNode500JSONResponse) VisitTestDraftNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ExecuteAgentNodeRequestObject struct {
	AgentId openapi_types.UUID `json:"agentId"`
	NodeId  string             `json:"nodeId"`
	Body    *ExecuteAgentNodeJSONRequestBody
}

type ExecuteAgentNodeResponseObject interface {
	VisitExecuteAgentNodeResponse(w http.ResponseWriter) error
}

type ExecuteAgentNode200JSONResponse NodeExecutionResult

func (response ExecuteAgentNode200JSONResponse) VisitExecuteAgentNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ExecuteAgentNode400JSONResponse Error

func (response ExecuteAgentNode400JSONResponse) VisitExecuteAgentNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ExecuteAgentNode404JSONResponse Error

func (response ExecuteAgentNode404JSONResponse) VisitExecuteAgentNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ExecuteAgentNode500JSONResponse Error

func (response ExecuteAgentNode500JSONResponse) VisitExecuteAgentNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateAgentVersionRequestObject struct {
	AgentId openapi_types.UUID `json:"agentId"`
	Body    *CreateAgentVersionJSONRequestBody
}

type CreateAgentVersionResponseObject interface {
	VisitCreateAgentVersionResponse(w http.ResponseWriter) error
}

type CreateAgentVersion201JSONResponse AgentVersion

func (response CreateAgentVersion201JSONResponse) VisitCreateAgentVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateAgentVersion400JSONResponse Error

func (response CreateAgentVersion400JSONResponse) VisitCreateAgentVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateAgentVersion404JSONResponse Error

func (response CreateAgentVersion404JSONResponse) VisitCreateAgentVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateAgentVersion500JSONResponse Error

func (response CreateAgentVersion500JSONResponse) VisitCreateAgentVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetLatestAgentVersionRequestObject struct {
	AgentId openapi_types.UUID `json:"agentId"`
}

type GetLatestAgentVersionResponseObject interface {
	VisitGetLatestAgentVersionResponse(w http.ResponseWriter) error
}

type GetLatestAgentVersion200JSONResponse AgentVersion

func (response GetLatestAgentVersion200JSONResponse) VisitGetLatestAgentVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetLatestAgentVersion404JSONResponse Error

func (response GetLatestAgentVersion404JSONResponse) VisitGetLatestAgentVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetLatestAgentVersion500JSONResponse Error

func (response GetLatestAgentVersion500JSONResponse) VisitGetLatestAgentVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAgentRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteAgentResponseObject interface {
	VisitDeleteAgentResponse(w http.ResponseWriter) error
}

type DeleteAgent204Response struct {
}

func (response DeleteAgent204Response) VisitDeleteAgentResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAgent404JSONResponse Error

func (response DeleteAgent404JSONResponse) VisitDeleteAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAgent500JSONResponse Error

func (response DeleteAgent500JSONResponse) VisitDeleteAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAgentRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetAgentResponseObject interface {
	VisitGetAgentResponse(w http.ResponseWriter) error
}

type GetAgent200JSONResponse Agent

func (response GetAgent200JSONResponse) VisitGetAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAgent404JSONResponse Error

func (response GetAgent404JSONResponse) VisitGetAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAgent500JSONResponse Error

func (response GetAgent500JSONResponse) VisitGetAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAgentRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *UpdateAgentJSONRequestBody
}

type UpdateAgentResponseObject interface {
	VisitUpdateAgentResponse(w http.ResponseWriter) error
}

type UpdateAgent200JSONResponse Agent

func (response UpdateAgent200JSONResponse) VisitUpdateAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAgent400JSONResponse Error

func (response UpdateAgent400JSONResponse) VisitUpdateAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAgent404JSONResponse Error

func (response UpdateAgent404JSONResponse) VisitUpdateAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAgent500JSONResponse Error

func (response UpdateAgent500JSONResponse) VisitUpdateAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListConnectionsRequestObject struct {
}

type ListConnectionsResponseObject interface {
	VisitListConnectionsResponse(w http.ResponseWriter) error
}

type ListConnections200JSONResponse []Connection

func (response ListConnections200JSONResponse) VisitListConnectionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListConnections500JSONResponse Error

func (response ListConnections500JSONResponse) VisitListConnectionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateConnectionRequestObject struct {
	Body *CreateConnectionJSONRequestBody
}

type CreateConnectionResponseObject interface {
	VisitCreateConnectionResponse(w http.ResponseWriter) error
}

type CreateConnection201JSONResponse Connection

func (response CreateConnection201JSONResponse) VisitCreateConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateConnection400JSONResponse Error

func (response CreateConnection400JSONResponse) VisitCreateConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateConnection500JSONResponse Error

func (response CreateConnection500JSONResponse) VisitCreateConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteConnectionRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteConnectionResponseObject interface {
	VisitDeleteConnectionResponse(w http.ResponseWriter) error
}

type DeleteConnection204Response struct {
}

func (response DeleteConnection204Response) VisitDeleteConnectionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteConnection404JSONResponse Error

func (response DeleteConnection404JSONResponse) VisitDeleteConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteConnection500JSONResponse Error

func (response DeleteConnection500JSONResponse) VisitDeleteConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConnectionRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetConnectionResponseObject interface {
	VisitGetConnectionResponse(w http.ResponseWriter) error
}

type GetConnection200JSONResponse Connection

func (response GetConnection200JSONResponse) VisitGetConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConnection404JSONResponse Error

func (response GetConnection404JSONResponse) VisitGetConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConnection500JSONResponse Error

func (response GetConnection500JSONResponse) VisitGetConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateConnectionRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *UpdateConnectionJSONRequestBody
}

type UpdateConnectionResponseObject interface {
	VisitUpdateConnectionResponse(w http.ResponseWriter) error
}

type UpdateConnection200JSONResponse Connection

func (response UpdateConnection200JSONResponse) VisitUpdateConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateConnection400JSONResponse Error

func (response UpdateConnection400JSONResponse) VisitUpdateConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateConnection404JSONResponse Error

func (response UpdateConnection404JSONResponse) VisitUpdateConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateConnection500JSONResponse Error

func (response UpdateConnection500JSONResponse) VisitUpdateConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListCredentialTypesRequestObject struct {
}

type ListCredentialTypesResponseObject interface {
	VisitListCredentialTypesResponse(w http.ResponseWriter) error
}

type ListCredentialTypes200JSONResponse []CredentialType

func (response ListCredentialTypes200JSONResponse) VisitListCredentialTypesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListCredentialTypes500JSONResponse Error

func (response ListCredentialTypes500JSONResponse) VisitListCredentialTypesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCredentialTypeSchemaRequestObject struct {
	Type string `json:"type"`
}

type GetCredentialTypeSchemaResponseObject interface {
	VisitGetCredentialTypeSchemaResponse(w http.ResponseWriter) error
}

type GetCredentialTypeSchema200JSONResponse CredentialTypeSchema

func (response GetCredentialTypeSchema200JSONResponse) VisitGetCredentialTypeSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCredentialTypeSchema404JSONResponse Error

func (response GetCredentialTypeSchema404JSONResponse) VisitGetCredentialTypeSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCredentialTypeSchema500JSONResponse Error

func (response GetCredentialTypeSchema500JSONResponse) VisitGetCredentialTypeSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type TestCredentialsRequestObject struct {
	Type string `json:"type"`
	Body *TestCredentialsJSONRequestBody
}

type TestCredentialsResponseObject interface {
	VisitTestCredentialsResponse(w http.ResponseWriter) error
}

type TestCredentials200JSONResponse CredentialTestResult

func (response TestCredentials200JSONResponse) VisitTestCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TestCredentials400JSONResponse Error

func (response TestCredentials400JSONResponse) VisitTestCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TestCredentials404JSONResponse Error

func (response TestCredentials404JSONResponse) VisitTestCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type TestCredentials500JSONResponse Error

func (response TestCredentials500JSONResponse) VisitTestCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListCredentialsRequestObject struct {
	Params ListCredentialsParams
}

type ListCredentialsResponseObject interface {
	VisitListCredentialsResponse(w http.ResponseWriter) error
}

type ListCredentials200JSONResponse []Credential

func (response ListCredentials200JSONResponse) VisitListCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListCredentials500JSONResponse Error

func (response ListCredentials500JSONResponse) VisitListCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListExtensionsRequestObject struct {
}

type ListExtensionsResponseObject interface {
	VisitListExtensionsResponse(w http.ResponseWriter) error
}

type ListExtensions200JSONResponse []Extension

func (response ListExtensions200JSONResponse) VisitListExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListExtensions500JSONResponse Error

func (response ListExtensions500JSONResponse) VisitListExtensionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetHealthRequestObject struct {
}

type GetHealthResponseObject interface {
	VisitGetHealthResponse(w http.ResponseWriter) error
}

type GetHealth200JSONResponse struct {
	Status *string `json:"status,omitempty"`
}

func (response GetHealth200JSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListIntegrationsRequestObject struct {
}

type ListIntegrationsResponseObject interface {
	VisitListIntegrationsResponse(w http.ResponseWriter) error
}

type ListIntegrations200JSONResponse []Integration

func (response ListIntegrations200JSONResponse) VisitListIntegrationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListIntegrations500JSONResponse Error

func (response ListIntegrations500JSONResponse) VisitListIntegrationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListNodeTypesRequestObject struct {
	Params ListNodeTypesParams
}

type ListNodeTypesResponseObject interface {
	VisitListNodeTypesResponse(w http.ResponseWriter) error
}

type ListNodeTypes200JSONResponse []NodeType

func (response ListNodeTypes200JSONResponse) VisitListNodeTypesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeParameterOptionsRequestObject struct {
	Type      string `json:"type"`
	Parameter string `json:"parameter"`
	Params    GetNodeParameterOptionsParams
}

type GetNodeParameterOptionsResponseObject interface {
	VisitGetNodeParameterOptionsResponse(w http.ResponseWriter) error
}

type GetNodeParameterOptions200JSONResponse NodeParameterOptions

func (response GetNodeParameterOptions200JSONResponse) VisitGetNodeParameterOptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeParameterOptions404JSONResponse Error

func (response GetNodeParameterOptions404JSONResponse) VisitGetNodeParameterOptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetNodeParameterOptions500JSONResponse Error

func (response GetNodeParameterOptions500JSONResponse) VisitGetNodeParameterOptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListTriggersRequestObject struct {
}

type ListTriggersResponseObject interface {
	VisitListTriggersResponse(w http.ResponseWriter) error
}

type ListTriggers200JSONResponse []Trigger

func (response ListTriggers200JSONResponse) VisitListTriggersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTriggers500JSONResponse Error

func (response ListTriggers500JSONResponse) VisitListTriggersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateTriggerRequestObject struct {
	Body *CreateTriggerJSONRequestBody
}

type CreateTriggerResponseObject interface {
	VisitCreateTriggerResponse(w http.ResponseWriter) error
}

type CreateTrigger201JSONResponse Trigger

func (response CreateTrigger201JSONResponse) VisitCreateTriggerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateTrigger400JSONResponse Error

func (response CreateTrigger400JSONResponse) VisitCreateTriggerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateTrigger500JSONResponse Error

func (response CreateTrigger500JSONResponse) VisitCreateTriggerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTriggerRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteTriggerResponseObject interface {
	VisitDeleteTriggerResponse(w http.ResponseWriter) error
}

type DeleteTrigger204Response struct {
}

func (response DeleteTrigger204Response) VisitDeleteTriggerResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteTrigger404JSONResponse Error

func (response DeleteTrigger404JSONResponse) VisitDeleteTriggerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTrigger500JSONResponse Error

func (response DeleteTrigger500JSONResponse) VisitDeleteTriggerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTriggerRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetTriggerResponseObject interface {
	VisitGetTriggerResponse(w http.ResponseWriter) error
}

type GetTrigger200JSONResponse Trigger

func (response GetTrigger200JSONResponse) VisitGetTriggerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTrigger404JSONResponse Error

func (response GetTrigger404JSONResponse) VisitGetTriggerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetTrigger500JSONResponse Error

func (response GetTrigger500JSONResponse) VisitGetTriggerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTriggerRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *UpdateTriggerJSONRequestBody
}

type UpdateTriggerResponseObject interface {
	VisitUpdateTriggerResponse(w http.ResponseWriter) error
}

type UpdateTrigger200JSONResponse Trigger

func (response UpdateTrigger200JSONResponse) VisitUpdateTriggerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTrigger400JSONResponse Error

func (response UpdateTrigger400JSONResponse) VisitUpdateTriggerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTrigger404JSONResponse Error

func (response UpdateTrigger404JSONResponse) VisitUpdateTriggerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTrigger500JSONResponse Error

func (response UpdateTrigger500JSONResponse) VisitUpdateTriggerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListWorkersRequestObject struct {
}

type ListWorkersResponseObject interface {
	VisitListWorkersResponse(w http.ResponseWriter) error
}

type ListWorkers200JSONResponse []Worker

func (response ListWorkers200JSONResponse) VisitListWorkersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListWorkers500JSONResponse Error

func (response ListWorkers500JSONResponse) VisitListWorkersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RegisterWorkerRequestObject struct {
	Body *RegisterWorkerJSONRequestBody
}

type RegisterWorkerResponseObject interface {
	VisitRegisterWorkerResponse(w http.ResponseWriter) error
}

type RegisterWorker201JSONResponse Worker

func (response RegisterWorker201JSONResponse) VisitRegisterWorkerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type RegisterWorker400JSONResponse Error

func (response RegisterWorker400JSONResponse) VisitRegisterWorkerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RegisterWorker500JSONResponse Error

func (response RegisterWorker500JSONResponse) VisitRegisterWorkerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UnregisterWorkerRequestObject struct {
	Id string `json:"id"`
}

type UnregisterWorkerResponseObject interface {
	VisitUnregisterWorkerResponse(w http.ResponseWriter) error
}

type UnregisterWorker204Response struct {
}

func (response UnregisterWorker204Response) VisitUnregisterWorkerResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UnregisterWorker404JSONResponse Error

func (response UnregisterWorker404JSONResponse) VisitUnregisterWorkerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UnregisterWorker500JSONResponse Error

func (response UnregisterWorker500JSONResponse) VisitUnregisterWorkerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ClaimWorkRequestObject struct {
	Id   string `json:"id"`
	Body *ClaimWorkJSONRequestBody
}

type ClaimWorkResponseObject interface {
	VisitClaimWorkResponse(w http.ResponseWriter) error
}

type ClaimWork200JSONResponse []WorkItem

func (response ClaimWork200JSONResponse) VisitClaimWorkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CompleteWorkRequestObject struct {
	Id     string `json:"id"`
	ItemId string `json:"itemId"`
	Body   *CompleteWorkJSONRequestBody
}

type CompleteWorkResponseObject interface {
	VisitCompleteWorkResponse(w http.ResponseWriter) error
}

type CompleteWork200Response struct {
}

func (response CompleteWork200Response) VisitCompleteWorkResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateWorkerHeartbeatRequestObject struct {
	Id string `json:"id"`
}

type UpdateWorkerHeartbeatResponseObject interface {
	VisitUpdateWorkerHeartbeatResponse(w http.ResponseWriter) error
}

type UpdateWorkerHeartbeat200Response struct {
}

func (response UpdateWorkerHeartbeat200Response) VisitUpdateWorkerHeartbeatResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateWorkerHeartbeat404JSONResponse Error

func (response UpdateWorkerHeartbeat404JSONResponse) VisitUpdateWorkerHeartbeatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateWorkerHeartbeat500JSONResponse Error

func (response UpdateWorkerHeartbeat500JSONResponse) VisitUpdateWorkerHeartbeatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListWorkflowRunsRequestObject struct {
	Params ListWorkflowRunsParams
}

type ListWorkflowRunsResponseObject interface {
	VisitListWorkflowRunsResponse(w http.ResponseWriter) error
}

type ListWorkflowRuns200JSONResponse WorkflowRunList

func (response ListWorkflowRuns200JSONResponse) VisitListWorkflowRunsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListWorkflowRuns500JSONResponse Error

func (response ListWorkflowRuns500JSONResponse) VisitListWorkflowRunsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflowRunRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetWorkflowRunResponseObject interface {
	VisitGetWorkflowRunResponse(w http.ResponseWriter) error
}

type GetWorkflowRun200JSONResponse WorkflowRun

func (response GetWorkflowRun200JSONResponse) VisitGetWorkflowRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflowRun404JSONResponse Error

func (response GetWorkflowRun404JSONResponse) VisitGetWorkflowRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflowRun500JSONResponse Error

func (response GetWorkflowRun500JSONResponse) VisitGetWorkflowRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflowRunStepsRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetWorkflowRunStepsResponseObject interface {
	VisitGetWorkflowRunStepsResponse(w http.ResponseWriter) error
}

type GetWorkflowRunSteps200JSONResponse []WorkflowStep

func (response GetWorkflowRunSteps200JSONResponse) VisitGetWorkflowRunStepsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflowRunSteps404JSONResponse Error

func (response GetWorkflowRunSteps404JSONResponse) VisitGetWorkflowRunStepsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflowRunSteps500JSONResponse Error

func (response GetWorkflowRunSteps500JSONResponse) VisitGetWorkflowRunStepsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListWorkflowsRequestObject struct {
	Params ListWorkflowsParams
}

type ListWorkflowsResponseObject interface {
	VisitListWorkflowsResponse(w http.ResponseWriter) error
}

type ListWorkflows200JSONResponse WorkflowList

func (response ListWorkflows200JSONResponse) VisitListWorkflowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListWorkflows500JSONResponse Error

func (response ListWorkflows500JSONResponse) VisitListWorkflowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateWorkflowRequestObject struct {
	Body *CreateWorkflowJSONRequestBody
}

type CreateWorkflowResponseObject interface {
	VisitCreateWorkflowResponse(w http.ResponseWriter) error
}

type CreateWorkflow201JSONResponse Workflow

func (response CreateWorkflow201JSONResponse) VisitCreateWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateWorkflow400JSONResponse Error

func (response CreateWorkflow400JSONResponse) VisitCreateWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateWorkflow500JSONResponse Error

func (response CreateWorkflow500JSONResponse) VisitCreateWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteWorkflowRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteWorkflowResponseObject interface {
	VisitDeleteWorkflowResponse(w http.ResponseWriter) error
}

type DeleteWorkflow204Response struct {
}

func (response DeleteWorkflow204Response) VisitDeleteWorkflowResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteWorkflow404JSONResponse Error

func (response DeleteWorkflow404JSONResponse) VisitDeleteWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteWorkflow500JSONResponse Error

func (response DeleteWorkflow500JSONResponse) VisitDeleteWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflowRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetWorkflowResponseObject interface {
	VisitGetWorkflowResponse(w http.ResponseWriter) error
}

type GetWorkflow200JSONResponse Workflow

func (response GetWorkflow200JSONResponse) VisitGetWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflow404JSONResponse Error

func (response GetWorkflow404JSONResponse) VisitGetWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflow500JSONResponse Error

func (response GetWorkflow500JSONResponse) VisitGetWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateWorkflowRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *UpdateWorkflowJSONRequestBody
}

type UpdateWorkflowResponseObject interface {
	VisitUpdateWorkflowResponse(w http.ResponseWriter) error
}

type UpdateWorkflow200JSONResponse Workflow

func (response UpdateWorkflow200JSONResponse) VisitUpdateWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateWorkflow400JSONResponse Error

func (response UpdateWorkflow400JSONResponse) VisitUpdateWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateWorkflow404JSONResponse Error

func (response UpdateWorkflow404JSONResponse) VisitUpdateWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateWorkflow500JSONResponse Error

func (response UpdateWorkflow500JSONResponse) VisitUpdateWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ExecuteWorkflowRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *ExecuteWorkflowJSONRequestBody
}

type ExecuteWorkflowResponseObject interface {
	VisitExecuteWorkflowResponse(w http.ResponseWriter) error
}

type ExecuteWorkflow200JSONResponse WorkflowExecution

func (response ExecuteWorkflow200JSONResponse) VisitExecuteWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ExecuteWorkflow400JSONResponse Error

func (response ExecuteWorkflow400JSONResponse) VisitExecuteWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ExecuteWorkflow404JSONResponse Error

func (response ExecuteWorkflow404JSONResponse) VisitExecuteWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ExecuteWorkflow500JSONResponse Error

func (response ExecuteWorkflow500JSONResponse) VisitExecuteWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListWorkflowEdgesRequestObject struct {
	WorkflowId openapi_types.UUID `json:"workflowId"`
}

type ListWorkflowEdgesResponseObject interface {
	VisitListWorkflowEdgesResponse(w http.ResponseWriter) error
}

type ListWorkflowEdges200JSONResponse []WorkflowEdge

func (response ListWorkflowEdges200JSONResponse) VisitListWorkflowEdgesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListWorkflowEdges404JSONResponse Error

func (response ListWorkflowEdges404JSONResponse) VisitListWorkflowEdgesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListWorkflowEdges500JSONResponse Error

func (response ListWorkflowEdges500JSONResponse) VisitListWorkflowEdgesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateWorkflowEdgeRequestObject struct {
	WorkflowId openapi_types.UUID `json:"workflowId"`
	Body       *CreateWorkflowEdgeJSONRequestBody
}

type CreateWorkflowEdgeResponseObject interface {
	VisitCreateWorkflowEdgeResponse(w http.ResponseWriter) error
}

type CreateWorkflowEdge201JSONResponse WorkflowEdge

func (response CreateWorkflowEdge201JSONResponse) VisitCreateWorkflowEdgeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateWorkflowEdge400JSONResponse Error

func (response CreateWorkflowEdge400JSONResponse) VisitCreateWorkflowEdgeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateWorkflowEdge404JSONResponse Error

func (response CreateWorkflowEdge404JSONResponse) VisitCreateWorkflowEdgeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateWorkflowEdge500JSONResponse Error

func (response CreateWorkflowEdge500JSONResponse) VisitCreateWorkflowEdgeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteWorkflowEdgeRequestObject struct {
	WorkflowId openapi_types.UUID `json:"workflowId"`
	EdgeId     string             `json:"edgeId"`
}

type DeleteWorkflowEdgeResponseObject interface {
	VisitDeleteWorkflowEdgeResponse(w http.ResponseWriter) error
}

type DeleteWorkflowEdge204Response struct {
}

func (response DeleteWorkflowEdge204Response) VisitDeleteWorkflowEdgeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteWorkflowEdge404JSONResponse Error

func (response DeleteWorkflowEdge404JSONResponse) VisitDeleteWorkflowEdgeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteWorkflowEdge500JSONResponse Error

func (response DeleteWorkflowEdge500JSONResponse) VisitDeleteWorkflowEdgeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AutoLayoutWorkflowRequestObject struct {
	WorkflowId openapi_types.UUID `json:"workflowId"`
}

type AutoLayoutWorkflowResponseObject interface {
	VisitAutoLayoutWorkflowResponse(w http.ResponseWriter) error
}

type AutoLayoutWorkflow200JSONResponse WorkflowLayoutResult

func (response AutoLayoutWorkflow200JSONResponse) VisitAutoLayoutWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AutoLayoutWorkflow404JSONResponse Error

func (response AutoLayoutWorkflow404JSONResponse) VisitAutoLayoutWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AutoLayoutWorkflow500JSONResponse Error

func (response AutoLayoutWorkflow500JSONResponse) VisitAutoLayoutWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListWorkflowNodesRequestObject struct {
	WorkflowId openapi_types.UUID `json:"workflowId"`
}

type ListWorkflowNodesResponseObject interface {
	VisitListWorkflowNodesResponse(w http.ResponseWriter) error
}

type ListWorkflowNodes200JSONResponse []WorkflowNode

func (response ListWorkflowNodes200JSONResponse) VisitListWorkflowNodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListWorkflowNodes404JSONResponse Error

func (response ListWorkflowNodes404JSONResponse) VisitListWorkflowNodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListWorkflowNodes500JSONResponse Error

func (response ListWorkflowNodes500JSONResponse) VisitListWorkflowNodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateWorkflowNodeRequestObject struct {
	WorkflowId openapi_types.UUID `json:"workflowId"`
	Body       *CreateWorkflowNodeJSONRequestBody
}

type CreateWorkflowNodeResponseObject interface {
	VisitCreateWorkflowNodeResponse(w http.ResponseWriter) error
}

type CreateWorkflowNode201JSONResponse WorkflowNode

func (response CreateWorkflowNode201JSONResponse) VisitCreateWorkflowNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateWorkflowNode400JSONResponse Error

func (response CreateWorkflowNode400JSONResponse) VisitCreateWorkflowNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateWorkflowNode404JSONResponse Error

func (response CreateWorkflowNode404JSONResponse) VisitCreateWorkflowNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateWorkflowNode500JSONResponse Error

func (response CreateWorkflowNode500JSONResponse) VisitCreateWorkflowNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteWorkflowNodeRequestObject struct {
	WorkflowId openapi_types.UUID `json:"workflowId"`
	NodeId     string             `json:"nodeId"`
}

type DeleteWorkflowNodeResponseObject interface {
	VisitDeleteWorkflowNodeResponse(w http.ResponseWriter) error
}

type DeleteWorkflowNode204Response struct {
}

func (response DeleteWorkflowNode204Response) VisitDeleteWorkflowNodeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteWorkflowNode404JSONResponse Error

func (response DeleteWorkflowNode404JSONResponse) VisitDeleteWorkflowNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteWorkflowNode500JSONResponse Error

func (response DeleteWorkflowNode500JSONResponse) VisitDeleteWorkflowNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflowNodeRequestObject struct {
	WorkflowId openapi_types.UUID `json:"workflowId"`
	NodeId     string             `json:"nodeId"`
}

type GetWorkflowNodeResponseObject interface {
	VisitGetWorkflowNodeResponse(w http.ResponseWriter) error
}

type GetWorkflowNode200JSONResponse WorkflowNode

func (response GetWorkflowNode200JSONResponse) VisitGetWorkflowNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflowNode404JSONResponse Error

func (response GetWorkflowNode404JSONResponse) VisitGetWorkflowNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflowNode500JSONResponse Error

func (response GetWorkflowNode500JSONResponse) VisitGetWorkflowNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateWorkflowNodeRequestObject struct {
	WorkflowId openapi_types.UUID `json:"workflowId"`
	NodeId     string             `json:"nodeId"`
	Body       *UpdateWorkflowNodeJSONRequestBody
}

type UpdateWorkflowNodeResponseObject interface {
	VisitUpdateWorkflowNodeResponse(w http.ResponseWriter) error
}

type UpdateWorkflowNode200JSONResponse WorkflowNode

func (response UpdateWorkflowNode200JSONResponse) VisitUpdateWorkflowNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateWorkflowNode400JSONResponse Error

func (response UpdateWorkflowNode400JSONResponse) VisitUpdateWorkflowNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateWorkflowNode404JSONResponse Error

func (response UpdateWorkflowNode404JSONResponse) VisitUpdateWorkflowNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateWorkflowNode500JSONResponse Error

func (response UpdateWorkflowNode500JSONResponse) VisitUpdateWorkflowNodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type HandleWebhookRequestObject struct {
	Token string `json:"token"`
	Body  *HandleWebhookJSONRequestBody
}

type HandleWebhookResponseObject interface {
	VisitHandleWebhookResponse(w http.ResponseWriter) error
}

type HandleWebhook200Response struct {
}

func (response HandleWebhook200Response) VisitHandleWebhookResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type HandleWebhook404JSONResponse Error

func (response HandleWebhook404JSONResponse) VisitHandleWebhookResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type HandleWebhook500JSONResponse Error

func (response HandleWebhook500JSONResponse) VisitHandleWebhookResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all agents
	// (GET /api/agents)
	ListAgents(ctx context.Context, request ListAgentsRequestObject) (ListAgentsResponseObject, error)
	// Create a new agent
	// (POST /api/agents)
	CreateAgent(ctx context.Context, request CreateAgentRequestObject) (CreateAgentResponseObject, error)
	// Chat with AI assistant for workflow building
	// (POST /api/agents/{agentId}/assistant/chat)
	AssistantChat(ctx context.Context, request AssistantChatRequestObject) (AssistantChatResponseObject, error)
	// Deploy a specific agent version
	// (POST /api/agents/{agentId}/deploy)
	DeployAgentVersion(ctx context.Context, request DeployAgentVersionRequestObject) (DeployAgentVersionResponseObject, error)
	// Get current draft for an agent
	// (GET /api/agents/{agentId}/draft)
	GetAgentDraft(ctx context.Context, request GetAgentDraftRequestObject) (GetAgentDraftResponseObject, error)
	// Update agent draft with auto-persistence
	// (PUT /api/agents/{agentId}/draft)
	UpdateAgentDraft(ctx context.Context, request UpdateAgentDraftRequestObject) (UpdateAgentDraftResponseObject, error)
	// Test a single node in draft context
	// (POST /api/agents/{agentId}/draft/nodes/{nodeId}/test)
	TestDraftNode(ctx context.Context, request TestDraftNodeRequestObject) (TestDraftNodeResponseObject, error)
	// Execute a single node with provided input
	// (POST /api/agents/{agentId}/nodes/{nodeId}/execute)
	ExecuteAgentNode(ctx context.Context, request ExecuteAgentNodeRequestObject) (ExecuteAgentNodeResponseObject, error)
	// Create a new agent version
	// (POST /api/agents/{agentId}/versions)
	CreateAgentVersion(ctx context.Context, request CreateAgentVersionRequestObject) (CreateAgentVersionResponseObject, error)
	// Get latest agent version
	// (GET /api/agents/{agentId}/versions/latest)
	GetLatestAgentVersion(ctx context.Context, request GetLatestAgentVersionRequestObject) (GetLatestAgentVersionResponseObject, error)
	// Delete agent
	// (DELETE /api/agents/{id})
	DeleteAgent(ctx context.Context, request DeleteAgentRequestObject) (DeleteAgentResponseObject, error)
	// Get agent by ID
	// (GET /api/agents/{id})
	GetAgent(ctx context.Context, request GetAgentRequestObject) (GetAgentResponseObject, error)
	// Update agent
	// (PUT /api/agents/{id})
	UpdateAgent(ctx context.Context, request UpdateAgentRequestObject) (UpdateAgentResponseObject, error)
	// List connections
	// (GET /api/connections)
	ListConnections(ctx context.Context, request ListConnectionsRequestObject) (ListConnectionsResponseObject, error)
	// Create a connection
	// (POST /api/connections)
	CreateConnection(ctx context.Context, request CreateConnectionRequestObject) (CreateConnectionResponseObject, error)
	// Delete connection
	// (DELETE /api/connections/{id})
	DeleteConnection(ctx context.Context, request DeleteConnectionRequestObject) (DeleteConnectionResponseObject, error)
	// Get connection by ID
	// (GET /api/connections/{id})
	GetConnection(ctx context.Context, request GetConnectionRequestObject) (GetConnectionResponseObject, error)
	// Update connection
	// (PUT /api/connections/{id})
	UpdateConnection(ctx context.Context, request UpdateConnectionRequestObject) (UpdateConnectionResponseObject, error)
	// List credential type definitions
	// (GET /api/credential-types)
	ListCredentialTypes(ctx context.Context, request ListCredentialTypesRequestObject) (ListCredentialTypesResponseObject, error)
	// Get JSON schema for credential type
	// (GET /api/credential-types/schema/{type})
	GetCredentialTypeSchema(ctx context.Context, request GetCredentialTypeSchemaRequestObject) (GetCredentialTypeSchemaResponseObject, error)
	// Test credentials for a specific type
	// (POST /api/credential-types/{type}/test)
	TestCredentials(ctx context.Context, request TestCredentialsRequestObject) (TestCredentialsResponseObject, error)
	// List credentials for selection in nodes
	// (GET /api/credentials)
	ListCredentials(ctx context.Context, request ListCredentialsRequestObject) (ListCredentialsResponseObject, error)
	// List available extensions and plugins
	// (GET /api/extensions)
	ListExtensions(ctx context.Context, request ListExtensionsRequestObject) (ListExtensionsResponseObject, error)
	// Health check endpoint
	// (GET /api/health)
	GetHealth(ctx context.Context, request GetHealthRequestObject) (GetHealthResponseObject, error)
	// List available integrations
	// (GET /api/integrations)
	ListIntegrations(ctx context.Context, request ListIntegrationsRequestObject) (ListIntegrationsResponseObject, error)
	// List available node types
	// (GET /api/node-types)
	ListNodeTypes(ctx context.Context, request ListNodeTypesRequestObject) (ListNodeTypesResponseObject, error)
	// Get dynamic options for node parameters
	// (GET /api/node-types/{type}/parameters/{parameter}/options)
	GetNodeParameterOptions(ctx context.Context, request GetNodeParameterOptionsRequestObject) (GetNodeParameterOptionsResponseObject, error)
	// List triggers
	// (GET /api/triggers)
	ListTriggers(ctx context.Context, request ListTriggersRequestObject) (ListTriggersResponseObject, error)
	// Create a trigger
	// (POST /api/triggers)
	CreateTrigger(ctx context.Context, request CreateTriggerRequestObject) (CreateTriggerResponseObject, error)
	// Delete trigger
	// (DELETE /api/triggers/{id})
	DeleteTrigger(ctx context.Context, request DeleteTriggerRequestObject) (DeleteTriggerResponseObject, error)
	// Get trigger by ID
	// (GET /api/triggers/{id})
	GetTrigger(ctx context.Context, request GetTriggerRequestObject) (GetTriggerResponseObject, error)
	// Update trigger
	// (PUT /api/triggers/{id})
	UpdateTrigger(ctx context.Context, request UpdateTriggerRequestObject) (UpdateTriggerResponseObject, error)
	// List all workers
	// (GET /api/workers)
	ListWorkers(ctx context.Context, request ListWorkersRequestObject) (ListWorkersResponseObject, error)
	// Register a new worker
	// (POST /api/workers)
	RegisterWorker(ctx context.Context, request RegisterWorkerRequestObject) (RegisterWorkerResponseObject, error)
	// Unregister a worker
	// (DELETE /api/workers/{id})
	UnregisterWorker(ctx context.Context, request UnregisterWorkerRequestObject) (UnregisterWorkerResponseObject, error)
	// Claim work items
	// (POST /api/workers/{id}/claim-work)
	ClaimWork(ctx context.Context, request ClaimWorkRequestObject) (ClaimWorkResponseObject, error)
	// Complete a work item
	// (POST /api/workers/{id}/complete-work/{itemId})
	CompleteWork(ctx context.Context, request CompleteWorkRequestObject) (CompleteWorkResponseObject, error)
	// Update worker heartbeat
	// (PUT /api/workers/{id}/heartbeat)
	UpdateWorkerHeartbeat(ctx context.Context, request UpdateWorkerHeartbeatRequestObject) (UpdateWorkerHeartbeatResponseObject, error)
	// List workflow runs
	// (GET /api/workflow-runs)
	ListWorkflowRuns(ctx context.Context, request ListWorkflowRunsRequestObject) (ListWorkflowRunsResponseObject, error)
	// Get workflow run details
	// (GET /api/workflow-runs/{id})
	GetWorkflowRun(ctx context.Context, request GetWorkflowRunRequestObject) (GetWorkflowRunResponseObject, error)
	// Get workflow run steps
	// (GET /api/workflow-runs/{id}/steps)
	GetWorkflowRunSteps(ctx context.Context, request GetWorkflowRunStepsRequestObject) (GetWorkflowRunStepsResponseObject, error)
	// List all workflows
	// (GET /api/workflows)
	ListWorkflows(ctx context.Context, request ListWorkflowsRequestObject) (ListWorkflowsResponseObject, error)
	// Create a new workflow
	// (POST /api/workflows)
	CreateWorkflow(ctx context.Context, request CreateWorkflowRequestObject) (CreateWorkflowResponseObject, error)
	// Delete workflow
	// (DELETE /api/workflows/{id})
	DeleteWorkflow(ctx context.Context, request DeleteWorkflowRequestObject) (DeleteWorkflowResponseObject, error)
	// Get workflow by ID
	// (GET /api/workflows/{id})
	GetWorkflow(ctx context.Context, request GetWorkflowRequestObject) (GetWorkflowResponseObject, error)
	// Update workflow
	// (PUT /api/workflows/{id})
	UpdateWorkflow(ctx context.Context, request UpdateWorkflowRequestObject) (UpdateWorkflowResponseObject, error)
	// Execute a workflow
	// (POST /api/workflows/{id}/execute)
	ExecuteWorkflow(ctx context.Context, request ExecuteWorkflowRequestObject) (ExecuteWorkflowResponseObject, error)
	// List all edges in a workflow
	// (GET /api/workflows/{workflowId}/edges)
	ListWorkflowEdges(ctx context.Context, request ListWorkflowEdgesRequestObject) (ListWorkflowEdgesResponseObject, error)
	// Create a new edge in workflow
	// (POST /api/workflows/{workflowId}/edges)
	CreateWorkflowEdge(ctx context.Context, request CreateWorkflowEdgeRequestObject) (CreateWorkflowEdgeResponseObject, error)
	// Delete workflow edge
	// (DELETE /api/workflows/{workflowId}/edges/{edgeId})
	DeleteWorkflowEdge(ctx context.Context, request DeleteWorkflowEdgeRequestObject) (DeleteWorkflowEdgeResponseObject, error)
	// Auto-layout workflow nodes
	// (POST /api/workflows/{workflowId}/layout)
	AutoLayoutWorkflow(ctx context.Context, request AutoLayoutWorkflowRequestObject) (AutoLayoutWorkflowResponseObject, error)
	// List all nodes in a workflow
	// (GET /api/workflows/{workflowId}/nodes)
	ListWorkflowNodes(ctx context.Context, request ListWorkflowNodesRequestObject) (ListWorkflowNodesResponseObject, error)
	// Create a new node in workflow
	// (POST /api/workflows/{workflowId}/nodes)
	CreateWorkflowNode(ctx context.Context, request CreateWorkflowNodeRequestObject) (CreateWorkflowNodeResponseObject, error)
	// Delete workflow node
	// (DELETE /api/workflows/{workflowId}/nodes/{nodeId})
	DeleteWorkflowNode(ctx context.Context, request DeleteWorkflowNodeRequestObject) (DeleteWorkflowNodeResponseObject, error)
	// Get specific workflow node
	// (GET /api/workflows/{workflowId}/nodes/{nodeId})
	GetWorkflowNode(ctx context.Context, request GetWorkflowNodeRequestObject) (GetWorkflowNodeResponseObject, error)
	// Update workflow node
	// (PUT /api/workflows/{workflowId}/nodes/{nodeId})
	UpdateWorkflowNode(ctx context.Context, request UpdateWorkflowNodeRequestObject) (UpdateWorkflowNodeResponseObject, error)
	// Webhook endpoint
	// (POST /webhooks/{token})
	HandleWebhook(ctx context.Context, request HandleWebhookRequestObject) (HandleWebhookResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListAgents operation middleware
func (sh *strictHandler) ListAgents(w http.ResponseWriter, r *http.Request, params ListAgentsParams) {
	var request ListAgentsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListAgents(ctx, request.(ListAgentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAgents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListAgentsResponseObject); ok {
		if err := validResponse.VisitListAgentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAgent operation middleware
func (sh *strictHandler) CreateAgent(w http.ResponseWriter, r *http.Request) {
	var request CreateAgentRequestObject

	var body CreateAgentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAgent(ctx, request.(CreateAgentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAgent")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateAgentResponseObject); ok {
		if err := validResponse.VisitCreateAgentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AssistantChat operation middleware
func (sh *strictHandler) AssistantChat(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID) {
	var request AssistantChatRequestObject

	request.AgentId = agentId

	var body AssistantChatJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AssistantChat(ctx, request.(AssistantChatRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssistantChat")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AssistantChatResponseObject); ok {
		if err := validResponse.VisitAssistantChatResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeployAgentVersion operation middleware
func (sh *strictHandler) DeployAgentVersion(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID) {
	var request DeployAgentVersionRequestObject

	request.AgentId = agentId

	var body DeployAgentVersionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeployAgentVersion(ctx, request.(DeployAgentVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeployAgentVersion")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeployAgentVersionResponseObject); ok {
		if err := validResponse.VisitDeployAgentVersionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAgentDraft operation middleware
func (sh *strictHandler) GetAgentDraft(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID) {
	var request GetAgentDraftRequestObject

	request.AgentId = agentId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAgentDraft(ctx, request.(GetAgentDraftRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAgentDraft")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAgentDraftResponseObject); ok {
		if err := validResponse.VisitGetAgentDraftResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateAgentDraft operation middleware
func (sh *strictHandler) UpdateAgentDraft(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID) {
	var request UpdateAgentDraftRequestObject

	request.AgentId = agentId

	var body UpdateAgentDraftJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateAgentDraft(ctx, request.(UpdateAgentDraftRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateAgentDraft")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateAgentDraftResponseObject); ok {
		if err := validResponse.VisitUpdateAgentDraftResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TestDraftNode operation middleware
func (sh *strictHandler) TestDraftNode(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID, nodeId string) {
	var request TestDraftNodeRequestObject

	request.AgentId = agentId
	request.NodeId = nodeId

	var body TestDraftNodeJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TestDraftNode(ctx, request.(TestDraftNodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestDraftNode")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TestDraftNodeResponseObject); ok {
		if err := validResponse.VisitTestDraftNodeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExecuteAgentNode operation middleware
func (sh *strictHandler) ExecuteAgentNode(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID, nodeId string) {
	var request ExecuteAgentNodeRequestObject

	request.AgentId = agentId
	request.NodeId = nodeId

	var body ExecuteAgentNodeJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ExecuteAgentNode(ctx, request.(ExecuteAgentNodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExecuteAgentNode")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ExecuteAgentNodeResponseObject); ok {
		if err := validResponse.VisitExecuteAgentNodeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAgentVersion operation middleware
func (sh *strictHandler) CreateAgentVersion(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID) {
	var request CreateAgentVersionRequestObject

	request.AgentId = agentId

	var body CreateAgentVersionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAgentVersion(ctx, request.(CreateAgentVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAgentVersion")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateAgentVersionResponseObject); ok {
		if err := validResponse.VisitCreateAgentVersionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetLatestAgentVersion operation middleware
func (sh *strictHandler) GetLatestAgentVersion(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID) {
	var request GetLatestAgentVersionRequestObject

	request.AgentId = agentId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetLatestAgentVersion(ctx, request.(GetLatestAgentVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLatestAgentVersion")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetLatestAgentVersionResponseObject); ok {
		if err := validResponse.VisitGetLatestAgentVersionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAgent operation middleware
func (sh *strictHandler) DeleteAgent(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request DeleteAgentRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAgent(ctx, request.(DeleteAgentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAgent")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAgentResponseObject); ok {
		if err := validResponse.VisitDeleteAgentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAgent operation middleware
func (sh *strictHandler) GetAgent(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request GetAgentRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAgent(ctx, request.(GetAgentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAgent")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAgentResponseObject); ok {
		if err := validResponse.VisitGetAgentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateAgent operation middleware
func (sh *strictHandler) UpdateAgent(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request UpdateAgentRequestObject

	request.Id = id

	var body UpdateAgentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateAgent(ctx, request.(UpdateAgentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateAgent")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateAgentResponseObject); ok {
		if err := validResponse.VisitUpdateAgentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListConnections operation middleware
func (sh *strictHandler) ListConnections(w http.ResponseWriter, r *http.Request) {
	var request ListConnectionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListConnections(ctx, request.(ListConnectionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListConnections")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListConnectionsResponseObject); ok {
		if err := validResponse.VisitListConnectionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateConnection operation middleware
func (sh *strictHandler) CreateConnection(w http.ResponseWriter, r *http.Request) {
	var request CreateConnectionRequestObject

	var body CreateConnectionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateConnection(ctx, request.(CreateConnectionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateConnection")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateConnectionResponseObject); ok {
		if err := validResponse.VisitCreateConnectionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteConnection operation middleware
func (sh *strictHandler) DeleteConnection(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request DeleteConnectionRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteConnection(ctx, request.(DeleteConnectionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteConnection")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteConnectionResponseObject); ok {
		if err := validResponse.VisitDeleteConnectionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetConnection operation middleware
func (sh *strictHandler) GetConnection(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request GetConnectionRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConnection(ctx, request.(GetConnectionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConnection")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConnectionResponseObject); ok {
		if err := validResponse.VisitGetConnectionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateConnection operation middleware
func (sh *strictHandler) UpdateConnection(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request UpdateConnectionRequestObject

	request.Id = id

	var body UpdateConnectionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateConnection(ctx, request.(UpdateConnectionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateConnection")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateConnectionResponseObject); ok {
		if err := validResponse.VisitUpdateConnectionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListCredentialTypes operation middleware
func (sh *strictHandler) ListCredentialTypes(w http.ResponseWriter, r *http.Request) {
	var request ListCredentialTypesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListCredentialTypes(ctx, request.(ListCredentialTypesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListCredentialTypes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListCredentialTypesResponseObject); ok {
		if err := validResponse.VisitListCredentialTypesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCredentialTypeSchema operation middleware
func (sh *strictHandler) GetCredentialTypeSchema(w http.ResponseWriter, r *http.Request, pType string) {
	var request GetCredentialTypeSchemaRequestObject

	request.Type = pType

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCredentialTypeSchema(ctx, request.(GetCredentialTypeSchemaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCredentialTypeSchema")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCredentialTypeSchemaResponseObject); ok {
		if err := validResponse.VisitGetCredentialTypeSchemaResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TestCredentials operation middleware
func (sh *strictHandler) TestCredentials(w http.ResponseWriter, r *http.Request, pType string) {
	var request TestCredentialsRequestObject

	request.Type = pType

	var body TestCredentialsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TestCredentials(ctx, request.(TestCredentialsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestCredentials")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TestCredentialsResponseObject); ok {
		if err := validResponse.VisitTestCredentialsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListCredentials operation middleware
func (sh *strictHandler) ListCredentials(w http.ResponseWriter, r *http.Request, params ListCredentialsParams) {
	var request ListCredentialsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListCredentials(ctx, request.(ListCredentialsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListCredentials")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListCredentialsResponseObject); ok {
		if err := validResponse.VisitListCredentialsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListExtensions operation middleware
func (sh *strictHandler) ListExtensions(w http.ResponseWriter, r *http.Request) {
	var request ListExtensionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListExtensions(ctx, request.(ListExtensionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListExtensions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListExtensionsResponseObject); ok {
		if err := validResponse.VisitListExtensionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHealth operation middleware
func (sh *strictHandler) GetHealth(w http.ResponseWriter, r *http.Request) {
	var request GetHealthRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealth(ctx, request.(GetHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealth")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetHealthResponseObject); ok {
		if err := validResponse.VisitGetHealthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListIntegrations operation middleware
func (sh *strictHandler) ListIntegrations(w http.ResponseWriter, r *http.Request) {
	var request ListIntegrationsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListIntegrations(ctx, request.(ListIntegrationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListIntegrations")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListIntegrationsResponseObject); ok {
		if err := validResponse.VisitListIntegrationsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListNodeTypes operation middleware
func (sh *strictHandler) ListNodeTypes(w http.ResponseWriter, r *http.Request, params ListNodeTypesParams) {
	var request ListNodeTypesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListNodeTypes(ctx, request.(ListNodeTypesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListNodeTypes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListNodeTypesResponseObject); ok {
		if err := validResponse.VisitListNodeTypesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNodeParameterOptions operation middleware
func (sh *strictHandler) GetNodeParameterOptions(w http.ResponseWriter, r *http.Request, pType string, parameter string, params GetNodeParameterOptionsParams) {
	var request GetNodeParameterOptionsRequestObject

	request.Type = pType
	request.Parameter = parameter
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetNodeParameterOptions(ctx, request.(GetNodeParameterOptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNodeParameterOptions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetNodeParameterOptionsResponseObject); ok {
		if err := validResponse.VisitGetNodeParameterOptionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListTriggers operation middleware
func (sh *strictHandler) ListTriggers(w http.ResponseWriter, r *http.Request) {
	var request ListTriggersRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListTriggers(ctx, request.(ListTriggersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTriggers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListTriggersResponseObject); ok {
		if err := validResponse.VisitListTriggersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateTrigger operation middleware
func (sh *strictHandler) CreateTrigger(w http.ResponseWriter, r *http.Request) {
	var request CreateTriggerRequestObject

	var body CreateTriggerJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTrigger(ctx, request.(CreateTriggerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTrigger")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateTriggerResponseObject); ok {
		if err := validResponse.VisitCreateTriggerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTrigger operation middleware
func (sh *strictHandler) DeleteTrigger(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request DeleteTriggerRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTrigger(ctx, request.(DeleteTriggerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTrigger")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteTriggerResponseObject); ok {
		if err := validResponse.VisitDeleteTriggerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTrigger operation middleware
func (sh *strictHandler) GetTrigger(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request GetTriggerRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTrigger(ctx, request.(GetTriggerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTrigger")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTriggerResponseObject); ok {
		if err := validResponse.VisitGetTriggerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateTrigger operation middleware
func (sh *strictHandler) UpdateTrigger(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request UpdateTriggerRequestObject

	request.Id = id

	var body UpdateTriggerJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateTrigger(ctx, request.(UpdateTriggerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateTrigger")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateTriggerResponseObject); ok {
		if err := validResponse.VisitUpdateTriggerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListWorkers operation middleware
func (sh *strictHandler) ListWorkers(w http.ResponseWriter, r *http.Request) {
	var request ListWorkersRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListWorkers(ctx, request.(ListWorkersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListWorkers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListWorkersResponseObject); ok {
		if err := validResponse.VisitListWorkersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RegisterWorker operation middleware
func (sh *strictHandler) RegisterWorker(w http.ResponseWriter, r *http.Request) {
	var request RegisterWorkerRequestObject

	var body RegisterWorkerJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RegisterWorker(ctx, request.(RegisterWorkerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RegisterWorker")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RegisterWorkerResponseObject); ok {
		if err := validResponse.VisitRegisterWorkerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UnregisterWorker operation middleware
func (sh *strictHandler) UnregisterWorker(w http.ResponseWriter, r *http.Request, id string) {
	var request UnregisterWorkerRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UnregisterWorker(ctx, request.(UnregisterWorkerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UnregisterWorker")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UnregisterWorkerResponseObject); ok {
		if err := validResponse.VisitUnregisterWorkerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ClaimWork operation middleware
func (sh *strictHandler) ClaimWork(w http.ResponseWriter, r *http.Request, id string) {
	var request ClaimWorkRequestObject

	request.Id = id

	var body ClaimWorkJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ClaimWork(ctx, request.(ClaimWorkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClaimWork")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ClaimWorkResponseObject); ok {
		if err := validResponse.VisitClaimWorkResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CompleteWork operation middleware
func (sh *strictHandler) CompleteWork(w http.ResponseWriter, r *http.Request, id string, itemId string) {
	var request CompleteWorkRequestObject

	request.Id = id
	request.ItemId = itemId

	var body CompleteWorkJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CompleteWork(ctx, request.(CompleteWorkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CompleteWork")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CompleteWorkResponseObject); ok {
		if err := validResponse.VisitCompleteWorkResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateWorkerHeartbeat operation middleware
func (sh *strictHandler) UpdateWorkerHeartbeat(w http.ResponseWriter, r *http.Request, id string) {
	var request UpdateWorkerHeartbeatRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateWorkerHeartbeat(ctx, request.(UpdateWorkerHeartbeatRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateWorkerHeartbeat")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateWorkerHeartbeatResponseObject); ok {
		if err := validResponse.VisitUpdateWorkerHeartbeatResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListWorkflowRuns operation middleware
func (sh *strictHandler) ListWorkflowRuns(w http.ResponseWriter, r *http.Request, params ListWorkflowRunsParams) {
	var request ListWorkflowRunsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListWorkflowRuns(ctx, request.(ListWorkflowRunsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListWorkflowRuns")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListWorkflowRunsResponseObject); ok {
		if err := validResponse.VisitListWorkflowRunsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWorkflowRun operation middleware
func (sh *strictHandler) GetWorkflowRun(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request GetWorkflowRunRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkflowRun(ctx, request.(GetWorkflowRunRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWorkflowRun")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetWorkflowRunResponseObject); ok {
		if err := validResponse.VisitGetWorkflowRunResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWorkflowRunSteps operation middleware
func (sh *strictHandler) GetWorkflowRunSteps(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request GetWorkflowRunStepsRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkflowRunSteps(ctx, request.(GetWorkflowRunStepsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWorkflowRunSteps")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetWorkflowRunStepsResponseObject); ok {
		if err := validResponse.VisitGetWorkflowRunStepsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListWorkflows operation middleware
func (sh *strictHandler) ListWorkflows(w http.ResponseWriter, r *http.Request, params ListWorkflowsParams) {
	var request ListWorkflowsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListWorkflows(ctx, request.(ListWorkflowsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListWorkflows")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListWorkflowsResponseObject); ok {
		if err := validResponse.VisitListWorkflowsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateWorkflow operation middleware
func (sh *strictHandler) CreateWorkflow(w http.ResponseWriter, r *http.Request) {
	var request CreateWorkflowRequestObject

	var body CreateWorkflowJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateWorkflow(ctx, request.(CreateWorkflowRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateWorkflow")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateWorkflowResponseObject); ok {
		if err := validResponse.VisitCreateWorkflowResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteWorkflow operation middleware
func (sh *strictHandler) DeleteWorkflow(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request DeleteWorkflowRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteWorkflow(ctx, request.(DeleteWorkflowRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteWorkflow")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteWorkflowResponseObject); ok {
		if err := validResponse.VisitDeleteWorkflowResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWorkflow operation middleware
func (sh *strictHandler) GetWorkflow(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request GetWorkflowRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkflow(ctx, request.(GetWorkflowRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWorkflow")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetWorkflowResponseObject); ok {
		if err := validResponse.VisitGetWorkflowResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateWorkflow operation middleware
func (sh *strictHandler) UpdateWorkflow(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request UpdateWorkflowRequestObject

	request.Id = id

	var body UpdateWorkflowJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateWorkflow(ctx, request.(UpdateWorkflowRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateWorkflow")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateWorkflowResponseObject); ok {
		if err := validResponse.VisitUpdateWorkflowResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExecuteWorkflow operation middleware
func (sh *strictHandler) ExecuteWorkflow(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request ExecuteWorkflowRequestObject

	request.Id = id

	var body ExecuteWorkflowJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ExecuteWorkflow(ctx, request.(ExecuteWorkflowRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExecuteWorkflow")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ExecuteWorkflowResponseObject); ok {
		if err := validResponse.VisitExecuteWorkflowResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListWorkflowEdges operation middleware
func (sh *strictHandler) ListWorkflowEdges(w http.ResponseWriter, r *http.Request, workflowId openapi_types.UUID) {
	var request ListWorkflowEdgesRequestObject

	request.WorkflowId = workflowId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListWorkflowEdges(ctx, request.(ListWorkflowEdgesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListWorkflowEdges")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListWorkflowEdgesResponseObject); ok {
		if err := validResponse.VisitListWorkflowEdgesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateWorkflowEdge operation middleware
func (sh *strictHandler) CreateWorkflowEdge(w http.ResponseWriter, r *http.Request, workflowId openapi_types.UUID) {
	var request CreateWorkflowEdgeRequestObject

	request.WorkflowId = workflowId

	var body CreateWorkflowEdgeJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateWorkflowEdge(ctx, request.(CreateWorkflowEdgeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateWorkflowEdge")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateWorkflowEdgeResponseObject); ok {
		if err := validResponse.VisitCreateWorkflowEdgeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteWorkflowEdge operation middleware
func (sh *strictHandler) DeleteWorkflowEdge(w http.ResponseWriter, r *http.Request, workflowId openapi_types.UUID, edgeId string) {
	var request DeleteWorkflowEdgeRequestObject

	request.WorkflowId = workflowId
	request.EdgeId = edgeId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteWorkflowEdge(ctx, request.(DeleteWorkflowEdgeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteWorkflowEdge")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteWorkflowEdgeResponseObject); ok {
		if err := validResponse.VisitDeleteWorkflowEdgeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AutoLayoutWorkflow operation middleware
func (sh *strictHandler) AutoLayoutWorkflow(w http.ResponseWriter, r *http.Request, workflowId openapi_types.UUID) {
	var request AutoLayoutWorkflowRequestObject

	request.WorkflowId = workflowId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AutoLayoutWorkflow(ctx, request.(AutoLayoutWorkflowRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AutoLayoutWorkflow")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AutoLayoutWorkflowResponseObject); ok {
		if err := validResponse.VisitAutoLayoutWorkflowResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListWorkflowNodes operation middleware
func (sh *strictHandler) ListWorkflowNodes(w http.ResponseWriter, r *http.Request, workflowId openapi_types.UUID) {
	var request ListWorkflowNodesRequestObject

	request.WorkflowId = workflowId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListWorkflowNodes(ctx, request.(ListWorkflowNodesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListWorkflowNodes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListWorkflowNodesResponseObject); ok {
		if err := validResponse.VisitListWorkflowNodesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateWorkflowNode operation middleware
func (sh *strictHandler) CreateWorkflowNode(w http.ResponseWriter, r *http.Request, workflowId openapi_types.UUID) {
	var request CreateWorkflowNodeRequestObject

	request.WorkflowId = workflowId

	var body CreateWorkflowNodeJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateWorkflowNode(ctx, request.(CreateWorkflowNodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateWorkflowNode")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateWorkflowNodeResponseObject); ok {
		if err := validResponse.VisitCreateWorkflowNodeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteWorkflowNode operation middleware
func (sh *strictHandler) DeleteWorkflowNode(w http.ResponseWriter, r *http.Request, workflowId openapi_types.UUID, nodeId string) {
	var request DeleteWorkflowNodeRequestObject

	request.WorkflowId = workflowId
	request.NodeId = nodeId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteWorkflowNode(ctx, request.(DeleteWorkflowNodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteWorkflowNode")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteWorkflowNodeResponseObject); ok {
		if err := validResponse.VisitDeleteWorkflowNodeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWorkflowNode operation middleware
func (sh *strictHandler) GetWorkflowNode(w http.ResponseWriter, r *http.Request, workflowId openapi_types.UUID, nodeId string) {
	var request GetWorkflowNodeRequestObject

	request.WorkflowId = workflowId
	request.NodeId = nodeId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkflowNode(ctx, request.(GetWorkflowNodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWorkflowNode")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetWorkflowNodeResponseObject); ok {
		if err := validResponse.VisitGetWorkflowNodeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateWorkflowNode operation middleware
func (sh *strictHandler) UpdateWorkflowNode(w http.ResponseWriter, r *http.Request, workflowId openapi_types.UUID, nodeId string) {
	var request UpdateWorkflowNodeRequestObject

	request.WorkflowId = workflowId
	request.NodeId = nodeId

	var body UpdateWorkflowNodeJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateWorkflowNode(ctx, request.(UpdateWorkflowNodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateWorkflowNode")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateWorkflowNodeResponseObject); ok {
		if err := validResponse.VisitUpdateWorkflowNodeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// HandleWebhook operation middleware
func (sh *strictHandler) HandleWebhook(w http.ResponseWriter, r *http.Request, token string) {
	var request HandleWebhookRequestObject

	request.Token = token

	var body HandleWebhookJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.HandleWebhook(ctx, request.(HandleWebhookRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HandleWebhook")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(HandleWebhookResponseObject); ok {
		if err := validResponse.VisitHandleWebhookResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
