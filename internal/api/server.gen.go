// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for CreateTriggerRequestType.
const (
	CreateTriggerRequestTypeSchedule CreateTriggerRequestType = "schedule"
	CreateTriggerRequestTypeWebhook  CreateTriggerRequestType = "webhook"
)

// Defines values for NodeTypeKinds.
const (
	NodeTypeKindsAction  NodeTypeKinds = "action"
	NodeTypeKindsMemory  NodeTypeKinds = "memory"
	NodeTypeKindsModel   NodeTypeKinds = "model"
	NodeTypeKindsTool    NodeTypeKinds = "tool"
	NodeTypeKindsTrigger NodeTypeKinds = "trigger"
)

// Defines values for TriggerType.
const (
	TriggerTypeSchedule TriggerType = "schedule"
	TriggerTypeWebhook  TriggerType = "webhook"
)

// Defines values for WorkerStatus.
const (
	Active   WorkerStatus = "active"
	Inactive WorkerStatus = "inactive"
)

// Defines values for WorkflowExecutionStatus.
const (
	WorkflowExecutionStatusCompleted WorkflowExecutionStatus = "completed"
	WorkflowExecutionStatusFailed    WorkflowExecutionStatus = "failed"
	WorkflowExecutionStatusPending   WorkflowExecutionStatus = "pending"
	WorkflowExecutionStatusRunning   WorkflowExecutionStatus = "running"
)

// Defines values for WorkflowRunStatus.
const (
	WorkflowRunStatusCompleted WorkflowRunStatus = "completed"
	WorkflowRunStatusFailed    WorkflowRunStatus = "failed"
	WorkflowRunStatusPending   WorkflowRunStatus = "pending"
	WorkflowRunStatusRunning   WorkflowRunStatus = "running"
)

// Defines values for WorkflowStepStatus.
const (
	WorkflowStepStatusCompleted WorkflowStepStatus = "completed"
	WorkflowStepStatusFailed    WorkflowStepStatus = "failed"
	WorkflowStepStatusPending   WorkflowStepStatus = "pending"
	WorkflowStepStatusRunning   WorkflowStepStatus = "running"
	WorkflowStepStatusSkipped   WorkflowStepStatus = "skipped"
)

// Defines values for ListWorkflowRunsParamsStatus.
const (
	ListWorkflowRunsParamsStatusCompleted ListWorkflowRunsParamsStatus = "completed"
	ListWorkflowRunsParamsStatusFailed    ListWorkflowRunsParamsStatus = "failed"
	ListWorkflowRunsParamsStatusPending   ListWorkflowRunsParamsStatus = "pending"
	ListWorkflowRunsParamsStatusRunning   ListWorkflowRunsParamsStatus = "running"
)

// Agent defines model for Agent.
type Agent struct {
	CreatedAt   time.Time           `json:"created_at"`
	Definition  *WorkflowDefinition `json:"definition,omitempty"`
	Description *string             `json:"description,omitempty"`
	Id          openapi_types.UUID  `json:"id"`
	Name        string              `json:"name"`
	UpdatedAt   time.Time           `json:"updated_at"`
}

// AgentList defines model for AgentList.
type AgentList struct {
	Agents *[]Agent `json:"agents,omitempty"`
	Limit  *int     `json:"limit,omitempty"`
	Page   *int     `json:"page,omitempty"`
	Total  *int     `json:"total,omitempty"`
}

// Connection defines model for Connection.
type Connection struct {
	CreatedAt   *time.Time              `json:"created_at,omitempty"`
	Credentials *map[string]interface{} `json:"credentials,omitempty"`
	Id          *openapi_types.UUID     `json:"id,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	Type        *string                 `json:"type,omitempty"`
	UpdatedAt   *time.Time              `json:"updated_at,omitempty"`
}

// CreateAgentRequest defines model for CreateAgentRequest.
type CreateAgentRequest struct {
	Definition  *WorkflowDefinition `json:"definition,omitempty"`
	Description *string             `json:"description,omitempty"`
	Name        string              `json:"name"`
}

// CreateConnectionRequest defines model for CreateConnectionRequest.
type CreateConnectionRequest struct {
	Credentials map[string]interface{} `json:"credentials"`
	Name        string                 `json:"name"`
	Type        string                 `json:"type"`
}

// CreateTriggerRequest defines model for CreateTriggerRequest.
type CreateTriggerRequest struct {
	Config     *map[string]interface{}  `json:"config,omitempty"`
	Enabled    *bool                    `json:"enabled,omitempty"`
	Name       string                   `json:"name"`
	Type       CreateTriggerRequestType `json:"type"`
	WorkflowId openapi_types.UUID       `json:"workflow_id"`
}

// CreateTriggerRequestType defines model for CreateTriggerRequest.Type.
type CreateTriggerRequestType string

// CreateWorkflowRequest defines model for CreateWorkflowRequest.
type CreateWorkflowRequest struct {
	Definition  *WorkflowDefinition `json:"definition,omitempty"`
	Description *string             `json:"description,omitempty"`
	Name        string              `json:"name"`
}

// Error defines model for Error.
type Error struct {
	Code    *int    `json:"code,omitempty"`
	Error   *string `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
}

// NodeInput defines model for NodeInput.
type NodeInput struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
	Required    *bool   `json:"required,omitempty"`
	Type        *string `json:"type,omitempty"`
}

// NodeOutput defines model for NodeOutput.
type NodeOutput struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
	Type        *string `json:"type,omitempty"`
}

// NodeType defines model for NodeType.
type NodeType struct {
	Description *string          `json:"description,omitempty"`
	Id          *string          `json:"id,omitempty"`
	Inputs      *[]NodeInput     `json:"inputs,omitempty"`
	Kinds       *[]NodeTypeKinds `json:"kinds,omitempty"`
	Name        *string          `json:"name,omitempty"`
	Outputs     *[]NodeOutput    `json:"outputs,omitempty"`
}

// NodeTypeKinds defines model for NodeType.Kinds.
type NodeTypeKinds string

// RegisterWorkerRequest defines model for RegisterWorkerRequest.
type RegisterWorkerRequest struct {
	Concurrency *int    `json:"concurrency,omitempty"`
	Id          string  `json:"id"`
	Name        *string `json:"name,omitempty"`
}

// Trigger defines model for Trigger.
type Trigger struct {
	Config     *map[string]interface{} `json:"config,omitempty"`
	CreatedAt  *time.Time              `json:"created_at,omitempty"`
	Enabled    *bool                   `json:"enabled,omitempty"`
	Id         *openapi_types.UUID     `json:"id,omitempty"`
	Name       *string                 `json:"name,omitempty"`
	Type       *TriggerType            `json:"type,omitempty"`
	UpdatedAt  *time.Time              `json:"updated_at,omitempty"`
	WorkflowId *openapi_types.UUID     `json:"workflow_id,omitempty"`
}

// TriggerType defines model for Trigger.Type.
type TriggerType string

// UpdateAgentRequest defines model for UpdateAgentRequest.
type UpdateAgentRequest struct {
	Definition  *WorkflowDefinition `json:"definition,omitempty"`
	Description *string             `json:"description,omitempty"`
	Name        *string             `json:"name,omitempty"`
}

// UpdateConnectionRequest defines model for UpdateConnectionRequest.
type UpdateConnectionRequest struct {
	Credentials *map[string]interface{} `json:"credentials,omitempty"`
	Name        *string                 `json:"name,omitempty"`
}

// UpdateTriggerRequest defines model for UpdateTriggerRequest.
type UpdateTriggerRequest struct {
	Config  *map[string]interface{} `json:"config,omitempty"`
	Enabled *bool                   `json:"enabled,omitempty"`
	Name    *string                 `json:"name,omitempty"`
}

// UpdateWorkflowRequest defines model for UpdateWorkflowRequest.
type UpdateWorkflowRequest struct {
	Definition  *WorkflowDefinition `json:"definition,omitempty"`
	Description *string             `json:"description,omitempty"`
	Name        *string             `json:"name,omitempty"`
}

// WorkItem defines model for WorkItem.
type WorkItem struct {
	CreatedAt *time.Time              `json:"created_at,omitempty"`
	Id        *string                 `json:"id,omitempty"`
	Payload   *map[string]interface{} `json:"payload,omitempty"`
	Type      *string                 `json:"type,omitempty"`
}

// Worker defines model for Worker.
type Worker struct {
	Concurrency   *int          `json:"concurrency,omitempty"`
	Id            *string       `json:"id,omitempty"`
	LastHeartbeat *time.Time    `json:"last_heartbeat,omitempty"`
	Name          *string       `json:"name,omitempty"`
	RegisteredAt  *time.Time    `json:"registered_at,omitempty"`
	Status        *WorkerStatus `json:"status,omitempty"`
}

// WorkerStatus defines model for Worker.Status.
type WorkerStatus string

// Workflow defines model for Workflow.
type Workflow struct {
	CreatedAt   time.Time           `json:"created_at"`
	Definition  *WorkflowDefinition `json:"definition,omitempty"`
	Description *string             `json:"description,omitempty"`
	Id          openapi_types.UUID  `json:"id"`
	Name        string              `json:"name"`
	UpdatedAt   time.Time           `json:"updated_at"`
}

// WorkflowDefinition defines model for WorkflowDefinition.
type WorkflowDefinition struct {
	Edges *[]WorkflowEdge `json:"edges,omitempty"`
	Nodes *[]WorkflowNode `json:"nodes,omitempty"`
}

// WorkflowEdge defines model for WorkflowEdge.
type WorkflowEdge struct {
	Id           string  `json:"id"`
	Source       string  `json:"source"`
	SourceOutput *string `json:"sourceOutput,omitempty"`
	Target       string  `json:"target"`
	TargetInput  *string `json:"targetInput,omitempty"`
}

// WorkflowExecution defines model for WorkflowExecution.
type WorkflowExecution struct {
	CompletedAt *time.Time               `json:"completed_at,omitempty"`
	Error       *string                  `json:"error,omitempty"`
	Id          *openapi_types.UUID      `json:"id,omitempty"`
	Result      *map[string]interface{}  `json:"result,omitempty"`
	StartedAt   *time.Time               `json:"started_at,omitempty"`
	Status      *WorkflowExecutionStatus `json:"status,omitempty"`
	WorkflowId  *openapi_types.UUID      `json:"workflow_id,omitempty"`
}

// WorkflowExecutionStatus defines model for WorkflowExecution.Status.
type WorkflowExecutionStatus string

// WorkflowList defines model for WorkflowList.
type WorkflowList struct {
	Limit     *int        `json:"limit,omitempty"`
	Page      *int        `json:"page,omitempty"`
	Total     *int        `json:"total,omitempty"`
	Workflows *[]Workflow `json:"workflows,omitempty"`
}

// WorkflowNode defines model for WorkflowNode.
type WorkflowNode struct {
	Config map[string]interface{} `json:"config"`
	Id     string                 `json:"id"`
	Name   string                 `json:"name"`
	Type   string                 `json:"type"`
}

// WorkflowRun defines model for WorkflowRun.
type WorkflowRun struct {
	CompletedAt *time.Time              `json:"completed_at,omitempty"`
	Context     *map[string]interface{} `json:"context,omitempty"`
	Error       *string                 `json:"error,omitempty"`
	Id          *openapi_types.UUID     `json:"id,omitempty"`
	StartedAt   *time.Time              `json:"started_at,omitempty"`
	Status      *WorkflowRunStatus      `json:"status,omitempty"`
	WorkflowId  *openapi_types.UUID     `json:"workflow_id,omitempty"`
}

// WorkflowRunStatus defines model for WorkflowRun.Status.
type WorkflowRunStatus string

// WorkflowRunList defines model for WorkflowRunList.
type WorkflowRunList struct {
	Limit *int           `json:"limit,omitempty"`
	Page  *int           `json:"page,omitempty"`
	Runs  *[]WorkflowRun `json:"runs,omitempty"`
	Total *int           `json:"total,omitempty"`
}

// WorkflowStep defines model for WorkflowStep.
type WorkflowStep struct {
	CompletedAt *time.Time              `json:"completed_at,omitempty"`
	Error       *string                 `json:"error,omitempty"`
	Id          *openapi_types.UUID     `json:"id,omitempty"`
	Input       *map[string]interface{} `json:"input,omitempty"`
	NodeId      *string                 `json:"node_id,omitempty"`
	Output      *map[string]interface{} `json:"output,omitempty"`
	RunId       *openapi_types.UUID     `json:"run_id,omitempty"`
	StartedAt   *time.Time              `json:"started_at,omitempty"`
	Status      *WorkflowStepStatus     `json:"status,omitempty"`
}

// WorkflowStepStatus defines model for WorkflowStep.Status.
type WorkflowStepStatus string

// ListAgentsParams defines parameters for ListAgents.
type ListAgentsParams struct {
	Page  *int `form:"page,omitempty" json:"page,omitempty"`
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListNodeTypesParams defines parameters for ListNodeTypes.
type ListNodeTypesParams struct {
	// Kind Filter by node kind (can be comma-separated)
	Kind *string `form:"kind,omitempty" json:"kind,omitempty"`
}

// ClaimWorkJSONBody defines parameters for ClaimWork.
type ClaimWorkJSONBody struct {
	MaxItems *int `json:"maxItems,omitempty"`
}

// CompleteWorkJSONBody defines parameters for CompleteWork.
type CompleteWorkJSONBody struct {
	Error  *string                 `json:"error,omitempty"`
	Result *map[string]interface{} `json:"result,omitempty"`
}

// ListWorkflowRunsParams defines parameters for ListWorkflowRuns.
type ListWorkflowRunsParams struct {
	WorkflowId *openapi_types.UUID           `form:"workflow_id,omitempty" json:"workflow_id,omitempty"`
	Status     *ListWorkflowRunsParamsStatus `form:"status,omitempty" json:"status,omitempty"`
	Page       *int                          `form:"page,omitempty" json:"page,omitempty"`
	Limit      *int                          `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListWorkflowRunsParamsStatus defines parameters for ListWorkflowRuns.
type ListWorkflowRunsParamsStatus string

// ListWorkflowsParams defines parameters for ListWorkflows.
type ListWorkflowsParams struct {
	Page  *int `form:"page,omitempty" json:"page,omitempty"`
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// ExecuteWorkflowJSONBody defines parameters for ExecuteWorkflow.
type ExecuteWorkflowJSONBody struct {
	Input *map[string]interface{} `json:"input,omitempty"`
}

// HandleWebhookJSONBody defines parameters for HandleWebhook.
type HandleWebhookJSONBody map[string]interface{}

// CreateAgentJSONRequestBody defines body for CreateAgent for application/json ContentType.
type CreateAgentJSONRequestBody = CreateAgentRequest

// UpdateAgentJSONRequestBody defines body for UpdateAgent for application/json ContentType.
type UpdateAgentJSONRequestBody = UpdateAgentRequest

// CreateConnectionJSONRequestBody defines body for CreateConnection for application/json ContentType.
type CreateConnectionJSONRequestBody = CreateConnectionRequest

// UpdateConnectionJSONRequestBody defines body for UpdateConnection for application/json ContentType.
type UpdateConnectionJSONRequestBody = UpdateConnectionRequest

// CreateTriggerJSONRequestBody defines body for CreateTrigger for application/json ContentType.
type CreateTriggerJSONRequestBody = CreateTriggerRequest

// UpdateTriggerJSONRequestBody defines body for UpdateTrigger for application/json ContentType.
type UpdateTriggerJSONRequestBody = UpdateTriggerRequest

// RegisterWorkerJSONRequestBody defines body for RegisterWorker for application/json ContentType.
type RegisterWorkerJSONRequestBody = RegisterWorkerRequest

// ClaimWorkJSONRequestBody defines body for ClaimWork for application/json ContentType.
type ClaimWorkJSONRequestBody ClaimWorkJSONBody

// CompleteWorkJSONRequestBody defines body for CompleteWork for application/json ContentType.
type CompleteWorkJSONRequestBody CompleteWorkJSONBody

// CreateWorkflowJSONRequestBody defines body for CreateWorkflow for application/json ContentType.
type CreateWorkflowJSONRequestBody = CreateWorkflowRequest

// UpdateWorkflowJSONRequestBody defines body for UpdateWorkflow for application/json ContentType.
type UpdateWorkflowJSONRequestBody = UpdateWorkflowRequest

// ExecuteWorkflowJSONRequestBody defines body for ExecuteWorkflow for application/json ContentType.
type ExecuteWorkflowJSONRequestBody ExecuteWorkflowJSONBody

// HandleWebhookJSONRequestBody defines body for HandleWebhook for application/json ContentType.
type HandleWebhookJSONRequestBody HandleWebhookJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all agents
	// (GET /api/agents)
	ListAgents(w http.ResponseWriter, r *http.Request, params ListAgentsParams)
	// Create a new agent
	// (POST /api/agents)
	CreateAgent(w http.ResponseWriter, r *http.Request)
	// Delete agent
	// (DELETE /api/agents/{id})
	DeleteAgent(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get agent by ID
	// (GET /api/agents/{id})
	GetAgent(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Update agent
	// (PUT /api/agents/{id})
	UpdateAgent(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// List connections
	// (GET /api/connections)
	ListConnections(w http.ResponseWriter, r *http.Request)
	// Create a connection
	// (POST /api/connections)
	CreateConnection(w http.ResponseWriter, r *http.Request)
	// Delete connection
	// (DELETE /api/connections/{id})
	DeleteConnection(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get connection by ID
	// (GET /api/connections/{id})
	GetConnection(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Update connection
	// (PUT /api/connections/{id})
	UpdateConnection(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Health check endpoint
	// (GET /api/health)
	GetHealth(w http.ResponseWriter, r *http.Request)
	// List available node types
	// (GET /api/node-types)
	ListNodeTypes(w http.ResponseWriter, r *http.Request, params ListNodeTypesParams)
	// List triggers
	// (GET /api/triggers)
	ListTriggers(w http.ResponseWriter, r *http.Request)
	// Create a trigger
	// (POST /api/triggers)
	CreateTrigger(w http.ResponseWriter, r *http.Request)
	// Delete trigger
	// (DELETE /api/triggers/{id})
	DeleteTrigger(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get trigger by ID
	// (GET /api/triggers/{id})
	GetTrigger(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Update trigger
	// (PUT /api/triggers/{id})
	UpdateTrigger(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// List all workers
	// (GET /api/workers)
	ListWorkers(w http.ResponseWriter, r *http.Request)
	// Register a new worker
	// (POST /api/workers)
	RegisterWorker(w http.ResponseWriter, r *http.Request)
	// Unregister a worker
	// (DELETE /api/workers/{id})
	UnregisterWorker(w http.ResponseWriter, r *http.Request, id string)
	// Claim work items
	// (POST /api/workers/{id}/claim-work)
	ClaimWork(w http.ResponseWriter, r *http.Request, id string)
	// Complete a work item
	// (POST /api/workers/{id}/complete-work/{itemId})
	CompleteWork(w http.ResponseWriter, r *http.Request, id string, itemId string)
	// Update worker heartbeat
	// (PUT /api/workers/{id}/heartbeat)
	UpdateWorkerHeartbeat(w http.ResponseWriter, r *http.Request, id string)
	// List workflow runs
	// (GET /api/workflow-runs)
	ListWorkflowRuns(w http.ResponseWriter, r *http.Request, params ListWorkflowRunsParams)
	// Get workflow run details
	// (GET /api/workflow-runs/{id})
	GetWorkflowRun(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get workflow run steps
	// (GET /api/workflow-runs/{id}/steps)
	GetWorkflowRunSteps(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// List all workflows
	// (GET /api/workflows)
	ListWorkflows(w http.ResponseWriter, r *http.Request, params ListWorkflowsParams)
	// Create a new workflow
	// (POST /api/workflows)
	CreateWorkflow(w http.ResponseWriter, r *http.Request)
	// Delete workflow
	// (DELETE /api/workflows/{id})
	DeleteWorkflow(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get workflow by ID
	// (GET /api/workflows/{id})
	GetWorkflow(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Update workflow
	// (PUT /api/workflows/{id})
	UpdateWorkflow(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Execute a workflow
	// (POST /api/workflows/{id}/execute)
	ExecuteWorkflow(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Webhook endpoint
	// (POST /webhooks/{token})
	HandleWebhook(w http.ResponseWriter, r *http.Request, token string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List all agents
// (GET /api/agents)
func (_ Unimplemented) ListAgents(w http.ResponseWriter, r *http.Request, params ListAgentsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new agent
// (POST /api/agents)
func (_ Unimplemented) CreateAgent(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete agent
// (DELETE /api/agents/{id})
func (_ Unimplemented) DeleteAgent(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get agent by ID
// (GET /api/agents/{id})
func (_ Unimplemented) GetAgent(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update agent
// (PUT /api/agents/{id})
func (_ Unimplemented) UpdateAgent(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List connections
// (GET /api/connections)
func (_ Unimplemented) ListConnections(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a connection
// (POST /api/connections)
func (_ Unimplemented) CreateConnection(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete connection
// (DELETE /api/connections/{id})
func (_ Unimplemented) DeleteConnection(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get connection by ID
// (GET /api/connections/{id})
func (_ Unimplemented) GetConnection(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update connection
// (PUT /api/connections/{id})
func (_ Unimplemented) UpdateConnection(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Health check endpoint
// (GET /api/health)
func (_ Unimplemented) GetHealth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List available node types
// (GET /api/node-types)
func (_ Unimplemented) ListNodeTypes(w http.ResponseWriter, r *http.Request, params ListNodeTypesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List triggers
// (GET /api/triggers)
func (_ Unimplemented) ListTriggers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a trigger
// (POST /api/triggers)
func (_ Unimplemented) CreateTrigger(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete trigger
// (DELETE /api/triggers/{id})
func (_ Unimplemented) DeleteTrigger(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get trigger by ID
// (GET /api/triggers/{id})
func (_ Unimplemented) GetTrigger(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update trigger
// (PUT /api/triggers/{id})
func (_ Unimplemented) UpdateTrigger(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all workers
// (GET /api/workers)
func (_ Unimplemented) ListWorkers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Register a new worker
// (POST /api/workers)
func (_ Unimplemented) RegisterWorker(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unregister a worker
// (DELETE /api/workers/{id})
func (_ Unimplemented) UnregisterWorker(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Claim work items
// (POST /api/workers/{id}/claim-work)
func (_ Unimplemented) ClaimWork(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Complete a work item
// (POST /api/workers/{id}/complete-work/{itemId})
func (_ Unimplemented) CompleteWork(w http.ResponseWriter, r *http.Request, id string, itemId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update worker heartbeat
// (PUT /api/workers/{id}/heartbeat)
func (_ Unimplemented) UpdateWorkerHeartbeat(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List workflow runs
// (GET /api/workflow-runs)
func (_ Unimplemented) ListWorkflowRuns(w http.ResponseWriter, r *http.Request, params ListWorkflowRunsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get workflow run details
// (GET /api/workflow-runs/{id})
func (_ Unimplemented) GetWorkflowRun(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get workflow run steps
// (GET /api/workflow-runs/{id}/steps)
func (_ Unimplemented) GetWorkflowRunSteps(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all workflows
// (GET /api/workflows)
func (_ Unimplemented) ListWorkflows(w http.ResponseWriter, r *http.Request, params ListWorkflowsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new workflow
// (POST /api/workflows)
func (_ Unimplemented) CreateWorkflow(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete workflow
// (DELETE /api/workflows/{id})
func (_ Unimplemented) DeleteWorkflow(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get workflow by ID
// (GET /api/workflows/{id})
func (_ Unimplemented) GetWorkflow(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update workflow
// (PUT /api/workflows/{id})
func (_ Unimplemented) UpdateWorkflow(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Execute a workflow
// (POST /api/workflows/{id}/execute)
func (_ Unimplemented) ExecuteWorkflow(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Webhook endpoint
// (POST /webhooks/{token})
func (_ Unimplemented) HandleWebhook(w http.ResponseWriter, r *http.Request, token string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListAgents operation middleware
func (siw *ServerInterfaceWrapper) ListAgents(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAgentsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAgents(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateAgent operation middleware
func (siw *ServerInterfaceWrapper) CreateAgent(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAgent(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAgent operation middleware
func (siw *ServerInterfaceWrapper) DeleteAgent(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAgent(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAgent operation middleware
func (siw *ServerInterfaceWrapper) GetAgent(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAgent(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateAgent operation middleware
func (siw *ServerInterfaceWrapper) UpdateAgent(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateAgent(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListConnections operation middleware
func (siw *ServerInterfaceWrapper) ListConnections(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListConnections(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateConnection operation middleware
func (siw *ServerInterfaceWrapper) CreateConnection(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateConnection(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteConnection operation middleware
func (siw *ServerInterfaceWrapper) DeleteConnection(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteConnection(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetConnection operation middleware
func (siw *ServerInterfaceWrapper) GetConnection(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConnection(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateConnection operation middleware
func (siw *ServerInterfaceWrapper) UpdateConnection(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateConnection(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListNodeTypes operation middleware
func (siw *ServerInterfaceWrapper) ListNodeTypes(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListNodeTypesParams

	// ------------- Optional query parameter "kind" -------------

	err = runtime.BindQueryParameter("form", true, false, "kind", r.URL.Query(), &params.Kind)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "kind", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListNodeTypes(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTriggers operation middleware
func (siw *ServerInterfaceWrapper) ListTriggers(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTriggers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateTrigger operation middleware
func (siw *ServerInterfaceWrapper) CreateTrigger(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTrigger(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteTrigger operation middleware
func (siw *ServerInterfaceWrapper) DeleteTrigger(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTrigger(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTrigger operation middleware
func (siw *ServerInterfaceWrapper) GetTrigger(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrigger(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateTrigger operation middleware
func (siw *ServerInterfaceWrapper) UpdateTrigger(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTrigger(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListWorkers operation middleware
func (siw *ServerInterfaceWrapper) ListWorkers(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListWorkers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RegisterWorker operation middleware
func (siw *ServerInterfaceWrapper) RegisterWorker(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterWorker(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UnregisterWorker operation middleware
func (siw *ServerInterfaceWrapper) UnregisterWorker(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UnregisterWorker(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ClaimWork operation middleware
func (siw *ServerInterfaceWrapper) ClaimWork(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ClaimWork(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CompleteWork operation middleware
func (siw *ServerInterfaceWrapper) CompleteWork(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Path parameter "itemId" -------------
	var itemId string

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", chi.URLParam(r, "itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CompleteWork(w, r, id, itemId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateWorkerHeartbeat operation middleware
func (siw *ServerInterfaceWrapper) UpdateWorkerHeartbeat(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateWorkerHeartbeat(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListWorkflowRuns operation middleware
func (siw *ServerInterfaceWrapper) ListWorkflowRuns(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListWorkflowRunsParams

	// ------------- Optional query parameter "workflow_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "workflow_id", r.URL.Query(), &params.WorkflowId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflow_id", Err: err})
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListWorkflowRuns(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetWorkflowRun operation middleware
func (siw *ServerInterfaceWrapper) GetWorkflowRun(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWorkflowRun(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetWorkflowRunSteps operation middleware
func (siw *ServerInterfaceWrapper) GetWorkflowRunSteps(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWorkflowRunSteps(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListWorkflows operation middleware
func (siw *ServerInterfaceWrapper) ListWorkflows(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListWorkflowsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListWorkflows(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateWorkflow operation middleware
func (siw *ServerInterfaceWrapper) CreateWorkflow(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateWorkflow(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteWorkflow operation middleware
func (siw *ServerInterfaceWrapper) DeleteWorkflow(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteWorkflow(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetWorkflow operation middleware
func (siw *ServerInterfaceWrapper) GetWorkflow(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWorkflow(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateWorkflow operation middleware
func (siw *ServerInterfaceWrapper) UpdateWorkflow(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateWorkflow(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ExecuteWorkflow operation middleware
func (siw *ServerInterfaceWrapper) ExecuteWorkflow(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ExecuteWorkflow(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// HandleWebhook operation middleware
func (siw *ServerInterfaceWrapper) HandleWebhook(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "token" -------------
	var token string

	err = runtime.BindStyledParameterWithOptions("simple", "token", chi.URLParam(r, "token"), &token, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "token", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HandleWebhook(w, r, token)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/agents", wrapper.ListAgents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/agents", wrapper.CreateAgent)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/agents/{id}", wrapper.DeleteAgent)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/agents/{id}", wrapper.GetAgent)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/agents/{id}", wrapper.UpdateAgent)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/connections", wrapper.ListConnections)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/connections", wrapper.CreateConnection)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/connections/{id}", wrapper.DeleteConnection)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/connections/{id}", wrapper.GetConnection)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/connections/{id}", wrapper.UpdateConnection)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/health", wrapper.GetHealth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/node-types", wrapper.ListNodeTypes)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/triggers", wrapper.ListTriggers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/triggers", wrapper.CreateTrigger)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/triggers/{id}", wrapper.DeleteTrigger)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/triggers/{id}", wrapper.GetTrigger)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/triggers/{id}", wrapper.UpdateTrigger)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/workers", wrapper.ListWorkers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/workers", wrapper.RegisterWorker)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/workers/{id}", wrapper.UnregisterWorker)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/workers/{id}/claim-work", wrapper.ClaimWork)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/workers/{id}/complete-work/{itemId}", wrapper.CompleteWork)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/workers/{id}/heartbeat", wrapper.UpdateWorkerHeartbeat)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/workflow-runs", wrapper.ListWorkflowRuns)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/workflow-runs/{id}", wrapper.GetWorkflowRun)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/workflow-runs/{id}/steps", wrapper.GetWorkflowRunSteps)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/workflows", wrapper.ListWorkflows)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/workflows", wrapper.CreateWorkflow)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/workflows/{id}", wrapper.DeleteWorkflow)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/workflows/{id}", wrapper.GetWorkflow)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/workflows/{id}", wrapper.UpdateWorkflow)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/workflows/{id}/execute", wrapper.ExecuteWorkflow)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/webhooks/{token}", wrapper.HandleWebhook)
	})

	return r
}

type ListAgentsRequestObject struct {
	Params ListAgentsParams
}

type ListAgentsResponseObject interface {
	VisitListAgentsResponse(w http.ResponseWriter) error
}

type ListAgents200JSONResponse AgentList

func (response ListAgents200JSONResponse) VisitListAgentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListAgents500JSONResponse Error

func (response ListAgents500JSONResponse) VisitListAgentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateAgentRequestObject struct {
	Body *CreateAgentJSONRequestBody
}

type CreateAgentResponseObject interface {
	VisitCreateAgentResponse(w http.ResponseWriter) error
}

type CreateAgent201JSONResponse Agent

func (response CreateAgent201JSONResponse) VisitCreateAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateAgent400JSONResponse Error

func (response CreateAgent400JSONResponse) VisitCreateAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateAgent500JSONResponse Error

func (response CreateAgent500JSONResponse) VisitCreateAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAgentRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteAgentResponseObject interface {
	VisitDeleteAgentResponse(w http.ResponseWriter) error
}

type DeleteAgent204Response struct {
}

func (response DeleteAgent204Response) VisitDeleteAgentResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAgent404JSONResponse Error

func (response DeleteAgent404JSONResponse) VisitDeleteAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAgent500JSONResponse Error

func (response DeleteAgent500JSONResponse) VisitDeleteAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAgentRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetAgentResponseObject interface {
	VisitGetAgentResponse(w http.ResponseWriter) error
}

type GetAgent200JSONResponse Agent

func (response GetAgent200JSONResponse) VisitGetAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAgent404JSONResponse Error

func (response GetAgent404JSONResponse) VisitGetAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAgent500JSONResponse Error

func (response GetAgent500JSONResponse) VisitGetAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAgentRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *UpdateAgentJSONRequestBody
}

type UpdateAgentResponseObject interface {
	VisitUpdateAgentResponse(w http.ResponseWriter) error
}

type UpdateAgent200JSONResponse Agent

func (response UpdateAgent200JSONResponse) VisitUpdateAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAgent400JSONResponse Error

func (response UpdateAgent400JSONResponse) VisitUpdateAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAgent404JSONResponse Error

func (response UpdateAgent404JSONResponse) VisitUpdateAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAgent500JSONResponse Error

func (response UpdateAgent500JSONResponse) VisitUpdateAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListConnectionsRequestObject struct {
}

type ListConnectionsResponseObject interface {
	VisitListConnectionsResponse(w http.ResponseWriter) error
}

type ListConnections200JSONResponse []Connection

func (response ListConnections200JSONResponse) VisitListConnectionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListConnections500JSONResponse Error

func (response ListConnections500JSONResponse) VisitListConnectionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateConnectionRequestObject struct {
	Body *CreateConnectionJSONRequestBody
}

type CreateConnectionResponseObject interface {
	VisitCreateConnectionResponse(w http.ResponseWriter) error
}

type CreateConnection201JSONResponse Connection

func (response CreateConnection201JSONResponse) VisitCreateConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateConnection400JSONResponse Error

func (response CreateConnection400JSONResponse) VisitCreateConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateConnection500JSONResponse Error

func (response CreateConnection500JSONResponse) VisitCreateConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteConnectionRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteConnectionResponseObject interface {
	VisitDeleteConnectionResponse(w http.ResponseWriter) error
}

type DeleteConnection204Response struct {
}

func (response DeleteConnection204Response) VisitDeleteConnectionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteConnection404JSONResponse Error

func (response DeleteConnection404JSONResponse) VisitDeleteConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteConnection500JSONResponse Error

func (response DeleteConnection500JSONResponse) VisitDeleteConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConnectionRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetConnectionResponseObject interface {
	VisitGetConnectionResponse(w http.ResponseWriter) error
}

type GetConnection200JSONResponse Connection

func (response GetConnection200JSONResponse) VisitGetConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConnection404JSONResponse Error

func (response GetConnection404JSONResponse) VisitGetConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConnection500JSONResponse Error

func (response GetConnection500JSONResponse) VisitGetConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateConnectionRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *UpdateConnectionJSONRequestBody
}

type UpdateConnectionResponseObject interface {
	VisitUpdateConnectionResponse(w http.ResponseWriter) error
}

type UpdateConnection200JSONResponse Connection

func (response UpdateConnection200JSONResponse) VisitUpdateConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateConnection400JSONResponse Error

func (response UpdateConnection400JSONResponse) VisitUpdateConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateConnection404JSONResponse Error

func (response UpdateConnection404JSONResponse) VisitUpdateConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateConnection500JSONResponse Error

func (response UpdateConnection500JSONResponse) VisitUpdateConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetHealthRequestObject struct {
}

type GetHealthResponseObject interface {
	VisitGetHealthResponse(w http.ResponseWriter) error
}

type GetHealth200JSONResponse struct {
	Status *string `json:"status,omitempty"`
}

func (response GetHealth200JSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListNodeTypesRequestObject struct {
	Params ListNodeTypesParams
}

type ListNodeTypesResponseObject interface {
	VisitListNodeTypesResponse(w http.ResponseWriter) error
}

type ListNodeTypes200JSONResponse []NodeType

func (response ListNodeTypes200JSONResponse) VisitListNodeTypesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTriggersRequestObject struct {
}

type ListTriggersResponseObject interface {
	VisitListTriggersResponse(w http.ResponseWriter) error
}

type ListTriggers200JSONResponse []Trigger

func (response ListTriggers200JSONResponse) VisitListTriggersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTriggers500JSONResponse Error

func (response ListTriggers500JSONResponse) VisitListTriggersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateTriggerRequestObject struct {
	Body *CreateTriggerJSONRequestBody
}

type CreateTriggerResponseObject interface {
	VisitCreateTriggerResponse(w http.ResponseWriter) error
}

type CreateTrigger201JSONResponse Trigger

func (response CreateTrigger201JSONResponse) VisitCreateTriggerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateTrigger400JSONResponse Error

func (response CreateTrigger400JSONResponse) VisitCreateTriggerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateTrigger500JSONResponse Error

func (response CreateTrigger500JSONResponse) VisitCreateTriggerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTriggerRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteTriggerResponseObject interface {
	VisitDeleteTriggerResponse(w http.ResponseWriter) error
}

type DeleteTrigger204Response struct {
}

func (response DeleteTrigger204Response) VisitDeleteTriggerResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteTrigger404JSONResponse Error

func (response DeleteTrigger404JSONResponse) VisitDeleteTriggerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTrigger500JSONResponse Error

func (response DeleteTrigger500JSONResponse) VisitDeleteTriggerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTriggerRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetTriggerResponseObject interface {
	VisitGetTriggerResponse(w http.ResponseWriter) error
}

type GetTrigger200JSONResponse Trigger

func (response GetTrigger200JSONResponse) VisitGetTriggerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTrigger404JSONResponse Error

func (response GetTrigger404JSONResponse) VisitGetTriggerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetTrigger500JSONResponse Error

func (response GetTrigger500JSONResponse) VisitGetTriggerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTriggerRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *UpdateTriggerJSONRequestBody
}

type UpdateTriggerResponseObject interface {
	VisitUpdateTriggerResponse(w http.ResponseWriter) error
}

type UpdateTrigger200JSONResponse Trigger

func (response UpdateTrigger200JSONResponse) VisitUpdateTriggerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTrigger400JSONResponse Error

func (response UpdateTrigger400JSONResponse) VisitUpdateTriggerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTrigger404JSONResponse Error

func (response UpdateTrigger404JSONResponse) VisitUpdateTriggerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTrigger500JSONResponse Error

func (response UpdateTrigger500JSONResponse) VisitUpdateTriggerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListWorkersRequestObject struct {
}

type ListWorkersResponseObject interface {
	VisitListWorkersResponse(w http.ResponseWriter) error
}

type ListWorkers200JSONResponse []Worker

func (response ListWorkers200JSONResponse) VisitListWorkersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListWorkers500JSONResponse Error

func (response ListWorkers500JSONResponse) VisitListWorkersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RegisterWorkerRequestObject struct {
	Body *RegisterWorkerJSONRequestBody
}

type RegisterWorkerResponseObject interface {
	VisitRegisterWorkerResponse(w http.ResponseWriter) error
}

type RegisterWorker201JSONResponse Worker

func (response RegisterWorker201JSONResponse) VisitRegisterWorkerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type RegisterWorker400JSONResponse Error

func (response RegisterWorker400JSONResponse) VisitRegisterWorkerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RegisterWorker500JSONResponse Error

func (response RegisterWorker500JSONResponse) VisitRegisterWorkerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UnregisterWorkerRequestObject struct {
	Id string `json:"id"`
}

type UnregisterWorkerResponseObject interface {
	VisitUnregisterWorkerResponse(w http.ResponseWriter) error
}

type UnregisterWorker204Response struct {
}

func (response UnregisterWorker204Response) VisitUnregisterWorkerResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UnregisterWorker404JSONResponse Error

func (response UnregisterWorker404JSONResponse) VisitUnregisterWorkerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UnregisterWorker500JSONResponse Error

func (response UnregisterWorker500JSONResponse) VisitUnregisterWorkerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ClaimWorkRequestObject struct {
	Id   string `json:"id"`
	Body *ClaimWorkJSONRequestBody
}

type ClaimWorkResponseObject interface {
	VisitClaimWorkResponse(w http.ResponseWriter) error
}

type ClaimWork200JSONResponse []WorkItem

func (response ClaimWork200JSONResponse) VisitClaimWorkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CompleteWorkRequestObject struct {
	Id     string `json:"id"`
	ItemId string `json:"itemId"`
	Body   *CompleteWorkJSONRequestBody
}

type CompleteWorkResponseObject interface {
	VisitCompleteWorkResponse(w http.ResponseWriter) error
}

type CompleteWork200Response struct {
}

func (response CompleteWork200Response) VisitCompleteWorkResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateWorkerHeartbeatRequestObject struct {
	Id string `json:"id"`
}

type UpdateWorkerHeartbeatResponseObject interface {
	VisitUpdateWorkerHeartbeatResponse(w http.ResponseWriter) error
}

type UpdateWorkerHeartbeat200Response struct {
}

func (response UpdateWorkerHeartbeat200Response) VisitUpdateWorkerHeartbeatResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateWorkerHeartbeat404JSONResponse Error

func (response UpdateWorkerHeartbeat404JSONResponse) VisitUpdateWorkerHeartbeatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateWorkerHeartbeat500JSONResponse Error

func (response UpdateWorkerHeartbeat500JSONResponse) VisitUpdateWorkerHeartbeatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListWorkflowRunsRequestObject struct {
	Params ListWorkflowRunsParams
}

type ListWorkflowRunsResponseObject interface {
	VisitListWorkflowRunsResponse(w http.ResponseWriter) error
}

type ListWorkflowRuns200JSONResponse WorkflowRunList

func (response ListWorkflowRuns200JSONResponse) VisitListWorkflowRunsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListWorkflowRuns500JSONResponse Error

func (response ListWorkflowRuns500JSONResponse) VisitListWorkflowRunsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflowRunRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetWorkflowRunResponseObject interface {
	VisitGetWorkflowRunResponse(w http.ResponseWriter) error
}

type GetWorkflowRun200JSONResponse WorkflowRun

func (response GetWorkflowRun200JSONResponse) VisitGetWorkflowRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflowRun404JSONResponse Error

func (response GetWorkflowRun404JSONResponse) VisitGetWorkflowRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflowRun500JSONResponse Error

func (response GetWorkflowRun500JSONResponse) VisitGetWorkflowRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflowRunStepsRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetWorkflowRunStepsResponseObject interface {
	VisitGetWorkflowRunStepsResponse(w http.ResponseWriter) error
}

type GetWorkflowRunSteps200JSONResponse []WorkflowStep

func (response GetWorkflowRunSteps200JSONResponse) VisitGetWorkflowRunStepsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflowRunSteps404JSONResponse Error

func (response GetWorkflowRunSteps404JSONResponse) VisitGetWorkflowRunStepsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflowRunSteps500JSONResponse Error

func (response GetWorkflowRunSteps500JSONResponse) VisitGetWorkflowRunStepsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListWorkflowsRequestObject struct {
	Params ListWorkflowsParams
}

type ListWorkflowsResponseObject interface {
	VisitListWorkflowsResponse(w http.ResponseWriter) error
}

type ListWorkflows200JSONResponse WorkflowList

func (response ListWorkflows200JSONResponse) VisitListWorkflowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListWorkflows500JSONResponse Error

func (response ListWorkflows500JSONResponse) VisitListWorkflowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateWorkflowRequestObject struct {
	Body *CreateWorkflowJSONRequestBody
}

type CreateWorkflowResponseObject interface {
	VisitCreateWorkflowResponse(w http.ResponseWriter) error
}

type CreateWorkflow201JSONResponse Workflow

func (response CreateWorkflow201JSONResponse) VisitCreateWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateWorkflow400JSONResponse Error

func (response CreateWorkflow400JSONResponse) VisitCreateWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateWorkflow500JSONResponse Error

func (response CreateWorkflow500JSONResponse) VisitCreateWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteWorkflowRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteWorkflowResponseObject interface {
	VisitDeleteWorkflowResponse(w http.ResponseWriter) error
}

type DeleteWorkflow204Response struct {
}

func (response DeleteWorkflow204Response) VisitDeleteWorkflowResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteWorkflow404JSONResponse Error

func (response DeleteWorkflow404JSONResponse) VisitDeleteWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteWorkflow500JSONResponse Error

func (response DeleteWorkflow500JSONResponse) VisitDeleteWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflowRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetWorkflowResponseObject interface {
	VisitGetWorkflowResponse(w http.ResponseWriter) error
}

type GetWorkflow200JSONResponse Workflow

func (response GetWorkflow200JSONResponse) VisitGetWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflow404JSONResponse Error

func (response GetWorkflow404JSONResponse) VisitGetWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflow500JSONResponse Error

func (response GetWorkflow500JSONResponse) VisitGetWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateWorkflowRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *UpdateWorkflowJSONRequestBody
}

type UpdateWorkflowResponseObject interface {
	VisitUpdateWorkflowResponse(w http.ResponseWriter) error
}

type UpdateWorkflow200JSONResponse Workflow

func (response UpdateWorkflow200JSONResponse) VisitUpdateWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateWorkflow400JSONResponse Error

func (response UpdateWorkflow400JSONResponse) VisitUpdateWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateWorkflow404JSONResponse Error

func (response UpdateWorkflow404JSONResponse) VisitUpdateWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateWorkflow500JSONResponse Error

func (response UpdateWorkflow500JSONResponse) VisitUpdateWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ExecuteWorkflowRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *ExecuteWorkflowJSONRequestBody
}

type ExecuteWorkflowResponseObject interface {
	VisitExecuteWorkflowResponse(w http.ResponseWriter) error
}

type ExecuteWorkflow200JSONResponse WorkflowExecution

func (response ExecuteWorkflow200JSONResponse) VisitExecuteWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ExecuteWorkflow400JSONResponse Error

func (response ExecuteWorkflow400JSONResponse) VisitExecuteWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ExecuteWorkflow404JSONResponse Error

func (response ExecuteWorkflow404JSONResponse) VisitExecuteWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ExecuteWorkflow500JSONResponse Error

func (response ExecuteWorkflow500JSONResponse) VisitExecuteWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type HandleWebhookRequestObject struct {
	Token string `json:"token"`
	Body  *HandleWebhookJSONRequestBody
}

type HandleWebhookResponseObject interface {
	VisitHandleWebhookResponse(w http.ResponseWriter) error
}

type HandleWebhook200Response struct {
}

func (response HandleWebhook200Response) VisitHandleWebhookResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type HandleWebhook404JSONResponse Error

func (response HandleWebhook404JSONResponse) VisitHandleWebhookResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type HandleWebhook500JSONResponse Error

func (response HandleWebhook500JSONResponse) VisitHandleWebhookResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all agents
	// (GET /api/agents)
	ListAgents(ctx context.Context, request ListAgentsRequestObject) (ListAgentsResponseObject, error)
	// Create a new agent
	// (POST /api/agents)
	CreateAgent(ctx context.Context, request CreateAgentRequestObject) (CreateAgentResponseObject, error)
	// Delete agent
	// (DELETE /api/agents/{id})
	DeleteAgent(ctx context.Context, request DeleteAgentRequestObject) (DeleteAgentResponseObject, error)
	// Get agent by ID
	// (GET /api/agents/{id})
	GetAgent(ctx context.Context, request GetAgentRequestObject) (GetAgentResponseObject, error)
	// Update agent
	// (PUT /api/agents/{id})
	UpdateAgent(ctx context.Context, request UpdateAgentRequestObject) (UpdateAgentResponseObject, error)
	// List connections
	// (GET /api/connections)
	ListConnections(ctx context.Context, request ListConnectionsRequestObject) (ListConnectionsResponseObject, error)
	// Create a connection
	// (POST /api/connections)
	CreateConnection(ctx context.Context, request CreateConnectionRequestObject) (CreateConnectionResponseObject, error)
	// Delete connection
	// (DELETE /api/connections/{id})
	DeleteConnection(ctx context.Context, request DeleteConnectionRequestObject) (DeleteConnectionResponseObject, error)
	// Get connection by ID
	// (GET /api/connections/{id})
	GetConnection(ctx context.Context, request GetConnectionRequestObject) (GetConnectionResponseObject, error)
	// Update connection
	// (PUT /api/connections/{id})
	UpdateConnection(ctx context.Context, request UpdateConnectionRequestObject) (UpdateConnectionResponseObject, error)
	// Health check endpoint
	// (GET /api/health)
	GetHealth(ctx context.Context, request GetHealthRequestObject) (GetHealthResponseObject, error)
	// List available node types
	// (GET /api/node-types)
	ListNodeTypes(ctx context.Context, request ListNodeTypesRequestObject) (ListNodeTypesResponseObject, error)
	// List triggers
	// (GET /api/triggers)
	ListTriggers(ctx context.Context, request ListTriggersRequestObject) (ListTriggersResponseObject, error)
	// Create a trigger
	// (POST /api/triggers)
	CreateTrigger(ctx context.Context, request CreateTriggerRequestObject) (CreateTriggerResponseObject, error)
	// Delete trigger
	// (DELETE /api/triggers/{id})
	DeleteTrigger(ctx context.Context, request DeleteTriggerRequestObject) (DeleteTriggerResponseObject, error)
	// Get trigger by ID
	// (GET /api/triggers/{id})
	GetTrigger(ctx context.Context, request GetTriggerRequestObject) (GetTriggerResponseObject, error)
	// Update trigger
	// (PUT /api/triggers/{id})
	UpdateTrigger(ctx context.Context, request UpdateTriggerRequestObject) (UpdateTriggerResponseObject, error)
	// List all workers
	// (GET /api/workers)
	ListWorkers(ctx context.Context, request ListWorkersRequestObject) (ListWorkersResponseObject, error)
	// Register a new worker
	// (POST /api/workers)
	RegisterWorker(ctx context.Context, request RegisterWorkerRequestObject) (RegisterWorkerResponseObject, error)
	// Unregister a worker
	// (DELETE /api/workers/{id})
	UnregisterWorker(ctx context.Context, request UnregisterWorkerRequestObject) (UnregisterWorkerResponseObject, error)
	// Claim work items
	// (POST /api/workers/{id}/claim-work)
	ClaimWork(ctx context.Context, request ClaimWorkRequestObject) (ClaimWorkResponseObject, error)
	// Complete a work item
	// (POST /api/workers/{id}/complete-work/{itemId})
	CompleteWork(ctx context.Context, request CompleteWorkRequestObject) (CompleteWorkResponseObject, error)
	// Update worker heartbeat
	// (PUT /api/workers/{id}/heartbeat)
	UpdateWorkerHeartbeat(ctx context.Context, request UpdateWorkerHeartbeatRequestObject) (UpdateWorkerHeartbeatResponseObject, error)
	// List workflow runs
	// (GET /api/workflow-runs)
	ListWorkflowRuns(ctx context.Context, request ListWorkflowRunsRequestObject) (ListWorkflowRunsResponseObject, error)
	// Get workflow run details
	// (GET /api/workflow-runs/{id})
	GetWorkflowRun(ctx context.Context, request GetWorkflowRunRequestObject) (GetWorkflowRunResponseObject, error)
	// Get workflow run steps
	// (GET /api/workflow-runs/{id}/steps)
	GetWorkflowRunSteps(ctx context.Context, request GetWorkflowRunStepsRequestObject) (GetWorkflowRunStepsResponseObject, error)
	// List all workflows
	// (GET /api/workflows)
	ListWorkflows(ctx context.Context, request ListWorkflowsRequestObject) (ListWorkflowsResponseObject, error)
	// Create a new workflow
	// (POST /api/workflows)
	CreateWorkflow(ctx context.Context, request CreateWorkflowRequestObject) (CreateWorkflowResponseObject, error)
	// Delete workflow
	// (DELETE /api/workflows/{id})
	DeleteWorkflow(ctx context.Context, request DeleteWorkflowRequestObject) (DeleteWorkflowResponseObject, error)
	// Get workflow by ID
	// (GET /api/workflows/{id})
	GetWorkflow(ctx context.Context, request GetWorkflowRequestObject) (GetWorkflowResponseObject, error)
	// Update workflow
	// (PUT /api/workflows/{id})
	UpdateWorkflow(ctx context.Context, request UpdateWorkflowRequestObject) (UpdateWorkflowResponseObject, error)
	// Execute a workflow
	// (POST /api/workflows/{id}/execute)
	ExecuteWorkflow(ctx context.Context, request ExecuteWorkflowRequestObject) (ExecuteWorkflowResponseObject, error)
	// Webhook endpoint
	// (POST /webhooks/{token})
	HandleWebhook(ctx context.Context, request HandleWebhookRequestObject) (HandleWebhookResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListAgents operation middleware
func (sh *strictHandler) ListAgents(w http.ResponseWriter, r *http.Request, params ListAgentsParams) {
	var request ListAgentsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListAgents(ctx, request.(ListAgentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAgents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListAgentsResponseObject); ok {
		if err := validResponse.VisitListAgentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAgent operation middleware
func (sh *strictHandler) CreateAgent(w http.ResponseWriter, r *http.Request) {
	var request CreateAgentRequestObject

	var body CreateAgentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAgent(ctx, request.(CreateAgentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAgent")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateAgentResponseObject); ok {
		if err := validResponse.VisitCreateAgentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAgent operation middleware
func (sh *strictHandler) DeleteAgent(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request DeleteAgentRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAgent(ctx, request.(DeleteAgentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAgent")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAgentResponseObject); ok {
		if err := validResponse.VisitDeleteAgentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAgent operation middleware
func (sh *strictHandler) GetAgent(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request GetAgentRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAgent(ctx, request.(GetAgentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAgent")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAgentResponseObject); ok {
		if err := validResponse.VisitGetAgentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateAgent operation middleware
func (sh *strictHandler) UpdateAgent(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request UpdateAgentRequestObject

	request.Id = id

	var body UpdateAgentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateAgent(ctx, request.(UpdateAgentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateAgent")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateAgentResponseObject); ok {
		if err := validResponse.VisitUpdateAgentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListConnections operation middleware
func (sh *strictHandler) ListConnections(w http.ResponseWriter, r *http.Request) {
	var request ListConnectionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListConnections(ctx, request.(ListConnectionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListConnections")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListConnectionsResponseObject); ok {
		if err := validResponse.VisitListConnectionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateConnection operation middleware
func (sh *strictHandler) CreateConnection(w http.ResponseWriter, r *http.Request) {
	var request CreateConnectionRequestObject

	var body CreateConnectionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateConnection(ctx, request.(CreateConnectionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateConnection")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateConnectionResponseObject); ok {
		if err := validResponse.VisitCreateConnectionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteConnection operation middleware
func (sh *strictHandler) DeleteConnection(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request DeleteConnectionRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteConnection(ctx, request.(DeleteConnectionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteConnection")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteConnectionResponseObject); ok {
		if err := validResponse.VisitDeleteConnectionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetConnection operation middleware
func (sh *strictHandler) GetConnection(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request GetConnectionRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConnection(ctx, request.(GetConnectionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConnection")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConnectionResponseObject); ok {
		if err := validResponse.VisitGetConnectionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateConnection operation middleware
func (sh *strictHandler) UpdateConnection(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request UpdateConnectionRequestObject

	request.Id = id

	var body UpdateConnectionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateConnection(ctx, request.(UpdateConnectionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateConnection")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateConnectionResponseObject); ok {
		if err := validResponse.VisitUpdateConnectionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHealth operation middleware
func (sh *strictHandler) GetHealth(w http.ResponseWriter, r *http.Request) {
	var request GetHealthRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealth(ctx, request.(GetHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealth")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetHealthResponseObject); ok {
		if err := validResponse.VisitGetHealthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListNodeTypes operation middleware
func (sh *strictHandler) ListNodeTypes(w http.ResponseWriter, r *http.Request, params ListNodeTypesParams) {
	var request ListNodeTypesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListNodeTypes(ctx, request.(ListNodeTypesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListNodeTypes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListNodeTypesResponseObject); ok {
		if err := validResponse.VisitListNodeTypesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListTriggers operation middleware
func (sh *strictHandler) ListTriggers(w http.ResponseWriter, r *http.Request) {
	var request ListTriggersRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListTriggers(ctx, request.(ListTriggersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTriggers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListTriggersResponseObject); ok {
		if err := validResponse.VisitListTriggersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateTrigger operation middleware
func (sh *strictHandler) CreateTrigger(w http.ResponseWriter, r *http.Request) {
	var request CreateTriggerRequestObject

	var body CreateTriggerJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTrigger(ctx, request.(CreateTriggerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTrigger")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateTriggerResponseObject); ok {
		if err := validResponse.VisitCreateTriggerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTrigger operation middleware
func (sh *strictHandler) DeleteTrigger(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request DeleteTriggerRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTrigger(ctx, request.(DeleteTriggerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTrigger")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteTriggerResponseObject); ok {
		if err := validResponse.VisitDeleteTriggerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTrigger operation middleware
func (sh *strictHandler) GetTrigger(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request GetTriggerRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTrigger(ctx, request.(GetTriggerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTrigger")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTriggerResponseObject); ok {
		if err := validResponse.VisitGetTriggerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateTrigger operation middleware
func (sh *strictHandler) UpdateTrigger(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request UpdateTriggerRequestObject

	request.Id = id

	var body UpdateTriggerJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateTrigger(ctx, request.(UpdateTriggerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateTrigger")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateTriggerResponseObject); ok {
		if err := validResponse.VisitUpdateTriggerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListWorkers operation middleware
func (sh *strictHandler) ListWorkers(w http.ResponseWriter, r *http.Request) {
	var request ListWorkersRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListWorkers(ctx, request.(ListWorkersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListWorkers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListWorkersResponseObject); ok {
		if err := validResponse.VisitListWorkersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RegisterWorker operation middleware
func (sh *strictHandler) RegisterWorker(w http.ResponseWriter, r *http.Request) {
	var request RegisterWorkerRequestObject

	var body RegisterWorkerJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RegisterWorker(ctx, request.(RegisterWorkerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RegisterWorker")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RegisterWorkerResponseObject); ok {
		if err := validResponse.VisitRegisterWorkerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UnregisterWorker operation middleware
func (sh *strictHandler) UnregisterWorker(w http.ResponseWriter, r *http.Request, id string) {
	var request UnregisterWorkerRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UnregisterWorker(ctx, request.(UnregisterWorkerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UnregisterWorker")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UnregisterWorkerResponseObject); ok {
		if err := validResponse.VisitUnregisterWorkerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ClaimWork operation middleware
func (sh *strictHandler) ClaimWork(w http.ResponseWriter, r *http.Request, id string) {
	var request ClaimWorkRequestObject

	request.Id = id

	var body ClaimWorkJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ClaimWork(ctx, request.(ClaimWorkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClaimWork")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ClaimWorkResponseObject); ok {
		if err := validResponse.VisitClaimWorkResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CompleteWork operation middleware
func (sh *strictHandler) CompleteWork(w http.ResponseWriter, r *http.Request, id string, itemId string) {
	var request CompleteWorkRequestObject

	request.Id = id
	request.ItemId = itemId

	var body CompleteWorkJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CompleteWork(ctx, request.(CompleteWorkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CompleteWork")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CompleteWorkResponseObject); ok {
		if err := validResponse.VisitCompleteWorkResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateWorkerHeartbeat operation middleware
func (sh *strictHandler) UpdateWorkerHeartbeat(w http.ResponseWriter, r *http.Request, id string) {
	var request UpdateWorkerHeartbeatRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateWorkerHeartbeat(ctx, request.(UpdateWorkerHeartbeatRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateWorkerHeartbeat")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateWorkerHeartbeatResponseObject); ok {
		if err := validResponse.VisitUpdateWorkerHeartbeatResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListWorkflowRuns operation middleware
func (sh *strictHandler) ListWorkflowRuns(w http.ResponseWriter, r *http.Request, params ListWorkflowRunsParams) {
	var request ListWorkflowRunsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListWorkflowRuns(ctx, request.(ListWorkflowRunsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListWorkflowRuns")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListWorkflowRunsResponseObject); ok {
		if err := validResponse.VisitListWorkflowRunsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWorkflowRun operation middleware
func (sh *strictHandler) GetWorkflowRun(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request GetWorkflowRunRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkflowRun(ctx, request.(GetWorkflowRunRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWorkflowRun")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetWorkflowRunResponseObject); ok {
		if err := validResponse.VisitGetWorkflowRunResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWorkflowRunSteps operation middleware
func (sh *strictHandler) GetWorkflowRunSteps(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request GetWorkflowRunStepsRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkflowRunSteps(ctx, request.(GetWorkflowRunStepsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWorkflowRunSteps")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetWorkflowRunStepsResponseObject); ok {
		if err := validResponse.VisitGetWorkflowRunStepsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListWorkflows operation middleware
func (sh *strictHandler) ListWorkflows(w http.ResponseWriter, r *http.Request, params ListWorkflowsParams) {
	var request ListWorkflowsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListWorkflows(ctx, request.(ListWorkflowsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListWorkflows")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListWorkflowsResponseObject); ok {
		if err := validResponse.VisitListWorkflowsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateWorkflow operation middleware
func (sh *strictHandler) CreateWorkflow(w http.ResponseWriter, r *http.Request) {
	var request CreateWorkflowRequestObject

	var body CreateWorkflowJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateWorkflow(ctx, request.(CreateWorkflowRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateWorkflow")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateWorkflowResponseObject); ok {
		if err := validResponse.VisitCreateWorkflowResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteWorkflow operation middleware
func (sh *strictHandler) DeleteWorkflow(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request DeleteWorkflowRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteWorkflow(ctx, request.(DeleteWorkflowRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteWorkflow")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteWorkflowResponseObject); ok {
		if err := validResponse.VisitDeleteWorkflowResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWorkflow operation middleware
func (sh *strictHandler) GetWorkflow(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request GetWorkflowRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkflow(ctx, request.(GetWorkflowRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWorkflow")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetWorkflowResponseObject); ok {
		if err := validResponse.VisitGetWorkflowResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateWorkflow operation middleware
func (sh *strictHandler) UpdateWorkflow(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request UpdateWorkflowRequestObject

	request.Id = id

	var body UpdateWorkflowJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateWorkflow(ctx, request.(UpdateWorkflowRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateWorkflow")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateWorkflowResponseObject); ok {
		if err := validResponse.VisitUpdateWorkflowResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExecuteWorkflow operation middleware
func (sh *strictHandler) ExecuteWorkflow(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request ExecuteWorkflowRequestObject

	request.Id = id

	var body ExecuteWorkflowJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ExecuteWorkflow(ctx, request.(ExecuteWorkflowRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExecuteWorkflow")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ExecuteWorkflowResponseObject); ok {
		if err := validResponse.VisitExecuteWorkflowResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// HandleWebhook operation middleware
func (sh *strictHandler) HandleWebhook(w http.ResponseWriter, r *http.Request, token string) {
	var request HandleWebhookRequestObject

	request.Token = token

	var body HandleWebhookJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.HandleWebhook(ctx, request.(HandleWebhookRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HandleWebhook")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(HandleWebhookResponseObject); ok {
		if err := validResponse.VisitHandleWebhookResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
