events {
    worker_connections 1024;
}

http {
    # Docker Compose will create multiple containers with names like:
    # mel-agent-scale-api-1, mel-agent-scale-api-2, etc.
    # We use Docker's internal DNS resolution for the service name 'api'
    # which will automatically load balance across all scaled instances
    
    # Docker Compose's built-in DNS will resolve 'api' to all scaled instances
    # We rely on Docker's internal load balancing for simplicity and automatic scaling
    # This approach automatically includes/excludes instances as they start/stop

    # Health check configuration
    server {
        listen 80;
        
        # Enable logging
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;

        # Health check endpoint (for load balancer itself)
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Proxy all requests to API servers
        location / {
            # Use Docker's built-in service discovery and load balancing
            # Docker will automatically round-robin to all healthy 'api' service instances
            proxy_pass http://api:8080;
            
            # Headers for proper proxying
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Health check settings
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 10s;
            
            # WebSocket support (if needed)
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # API server health checks (for monitoring)
        location /api-health {
            access_log off;
            proxy_pass http://api:8080/health;
            proxy_set_header Host $host;
        }

        # Readiness checks - proxy to backend readiness endpoint
        location /ready {
            access_log off;
            proxy_pass http://api:8080/ready;
            proxy_set_header Host $host;
            proxy_connect_timeout 2s;
            proxy_read_timeout 2s;
            # Return 503 if no healthy backends
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        }
    }
}